// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracity.DataWorkbench.Tenant.ApiClient
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Tenant operations.
    /// </summary>
    public partial interface ITenant
    {
        /// <summary>
        /// Returns user roles in a tenant, workspaces and datasets
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<RbacEntryDto>>> QueryUserRbacWithHttpMessagesAsync(RbacQueryDto body, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Grant role for the given user to a Dataset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RoleScopeGetDto>> GrantUserRoleScopeWithHttpMessagesAsync(GrantUserRoleScopeRequestDto body, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get role of the given user based on id of RoleScope
        /// </summary>
        /// <param name='roleScopeId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<RoleScopeGetDto>> GetUserRoleScopeByIdWithHttpMessagesAsync(System.Guid roleScopeId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update role for the given user to a Tenant/Workspace/Dataset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='roleScopeId'>
        /// </param>
        /// <param name='roleId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
        Task<HttpOperationResponse<RoleScopeGetDto>> UpdateUserRoleScopeWithHttpMessagesAsync(ChangeUserRoleScopeRequestDto body, System.Guid roleScopeId, System.Guid roleId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get role list of the given user to a Tenant/Workspace/Dataset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<RoleScopeGetDto>>> GetUserRoleScopesWithHttpMessagesAsync(GetUserRoleScopeRequestDto body, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Revoke role for the given user to a Tenant/Workspace/Dataset
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> RevokeRoleScopeWithHttpMessagesAsync(RevokeUserRoleScopeRequestDto body, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Add new tenant
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TenantGetDto>> PostTenantWithHttpMessagesAsync(TenantCreationDto body, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves all tenants of logged in user
        /// </summary>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<TenantGetDto>>> GetTenantWithHttpMessagesAsync(string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get tenant info according to the tenant id or alias
        /// </summary>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TenantGetDto>> GetTenant1WithHttpMessagesAsync(string tenantIdOrAlias, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get user list in the tenant
        /// </summary>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<UserGetDto>>> GetUsersByTenantIdOrAliasWithHttpMessagesAsync(string tenantIdOrAlias, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Add user to the tenant. If user doesn't exist in workbench, will
        /// create one based on the user info.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<UserGetDto>> InviteTenantUserWithHttpMessagesAsync(UserInviteDto body, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete user from the tenant
        /// </summary>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<bool?>> DeleteTenantUserWithHttpMessagesAsync(string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update user role for the specific tenant
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateTenantUserRoleWithHttpMessagesAsync(UserUpdateDto body, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get user role list according to the tenant id or alias
        /// </summary>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TenantUserRoleGetDto>> GetTenantAndWorkspacesRolesWithHttpMessagesAsync(string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Add new workspace to the tenant
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<WorkspaceGetDto>> PostWorkspaceWithHttpMessagesAsync(WorkspaceCreationDto body, string tenantIdOrAlias, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get workspace list in the tenant
        /// </summary>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<WorkspaceGetDto>>> GetWorkspacesWithHttpMessagesAsync(string tenantIdOrAlias, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Check if tenant exists or workspace in the tenant
        /// </summary>
        /// <param name='tenantIdOrAlias'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> ValidateWorkspaceInTenantWithHttpMessagesAsync(string tenantIdOrAlias, System.Guid workspaceId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get tenants and workspaces list which the user has access.
        /// </summary>
        /// <param name='withAdminAccessOnly'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<UserTenantWorkspaceGetDto>>> GeTenantsWithWorkspacesWithHttpMessagesAsync(bool? withAdminAccessOnly = default, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get users info according to the id
        /// </summary>
        /// <param name='usersId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<UserGetDto>>> GetUsersWithHttpMessagesAsync(IList<System.Guid?> usersId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Add a new user or update user
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<UserGetDto>> CreateOrUpdateUserWithHttpMessagesAsync(UserCreationDto body, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get user info according to the id
        /// </summary>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserGetDto>> GetUserWithHttpMessagesAsync(System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get workspace role for the user
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<WorkspaceUserRoleGetDto>>> GetWorkspaceUserRolesWithHttpMessagesAsync(IList<System.Guid?> body, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Gets the predefined system user
        /// </summary>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserGetDto>> GetSystemUserWithHttpMessagesAsync(string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get workspace info according to the workspace id
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<WorkspaceGetDto>> GetWorkspaceWithHttpMessagesAsync(System.Guid workspaceId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get all Service Accounts
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<ServiceAccountGetDto>>> GetServiceAccountsListWithHttpMessagesAsync(System.Guid workspaceId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Create new Service Account to the given workspace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> CreateServiceAccountWithHttpMessagesAsync(ServiceAccountWriteDto body, System.Guid workspaceId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get service account info
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='serviceAccountId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<ServiceAccountGetDto>> GetServiceAccountWithHttpMessagesAsync(System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove service account from the given workspace id and service
        /// account id
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='serviceAccountId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<bool?>> DeleteServiceAccountWithHttpMessagesAsync(System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update the given service account
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='serviceAccountId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateServiceAccountWithHttpMessagesAsync(ServiceAccountWriteDto body, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Regenerate Service Account secret for the given workspace id and
        /// service account id
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='serviceAccountId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<string>> RegenerateServiceAccountSecretWithHttpMessagesAsync(System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get tenant which the workspace belongs to
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<TenantGetDto>> GetTenantByWorkspaceIdWithHttpMessagesAsync(System.Guid workspaceId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get user list in the workspace
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IList<UserGetDto>>> GetUsersByWorkspaceIdWithHttpMessagesAsync(System.Guid workspaceId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Add user to the workspace. If user doesn't exist in workbench, will
        /// create one based on the user info.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<UserGetDto>> InviteWorkspaceUserWithHttpMessagesAsync(UserInviteDto body, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete user from the workspace
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<bool?>> DeleteWorkspaceUserWithHttpMessagesAsync(System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update user role for the specific workspace
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> UpdateWorkspaceUserRoleWithHttpMessagesAsync(UserUpdateDto body, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Gets a list of workspaces with relative tenant info along with.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='xAmbientContextUserContext'>
        /// The user context with userId as actor.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IList<WorkspaceWithTenantReadDTO>>> GetWorkspaceWithTenantListWithHttpMessagesAsync(IList<System.Guid?> body, string xAmbientContextUserContext = default, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default);
    }
}

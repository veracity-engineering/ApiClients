// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracity.DataWorkbench.Tenant.ApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Tenant.
    /// </summary>
    public static partial class TenantExtensions
    {
            /// <summary>
            /// Returns user roles in a tenant, workspaces and datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<RbacEntryDto> QueryUserRbac(this ITenant operations, RbacQueryDto body, string xAmbientContextUserContext = default)
            {
                return operations.QueryUserRbacAsync(body, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns user roles in a tenant, workspaces and datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RbacEntryDto>> QueryUserRbacAsync(this ITenant operations, RbacQueryDto body, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.QueryUserRbacWithHttpMessagesAsync(body, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grant role for the given user to a Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static RoleScopeGetDto GrantUserRoleScope(this ITenant operations, GrantUserRoleScopeRequestDto body, string xAmbientContextUserContext = default)
            {
                return operations.GrantUserRoleScopeAsync(body, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grant role for the given user to a Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleScopeGetDto> GrantUserRoleScopeAsync(this ITenant operations, GrantUserRoleScopeRequestDto body, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GrantUserRoleScopeWithHttpMessagesAsync(body, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get role of the given user based on id of RoleScope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleScopeId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static RoleScopeGetDto GetUserRoleScopeById(this ITenant operations, System.Guid roleScopeId, string xAmbientContextUserContext = default)
            {
                return operations.GetUserRoleScopeByIdAsync(roleScopeId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get role of the given user based on id of RoleScope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleScopeId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleScopeGetDto> GetUserRoleScopeByIdAsync(this ITenant operations, System.Guid roleScopeId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserRoleScopeByIdWithHttpMessagesAsync(roleScopeId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update role for the given user to a Tenant/Workspace/Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='roleScopeId'>
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static RoleScopeGetDto UpdateUserRoleScope(this ITenant operations, ChangeUserRoleScopeRequestDto body, System.Guid roleScopeId, System.Guid roleId, string xAmbientContextUserContext = default)
            {
                return operations.UpdateUserRoleScopeAsync(body, roleScopeId, roleId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update role for the given user to a Tenant/Workspace/Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='roleScopeId'>
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<RoleScopeGetDto> UpdateUserRoleScopeAsync(this ITenant operations, ChangeUserRoleScopeRequestDto body, System.Guid roleScopeId, System.Guid roleId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateUserRoleScopeWithHttpMessagesAsync(body, roleScopeId, roleId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get role list of the given user to a Tenant/Workspace/Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<RoleScopeGetDto> GetUserRoleScopes(this ITenant operations, GetUserRoleScopeRequestDto body, string xAmbientContextUserContext = default)
            {
                return operations.GetUserRoleScopesAsync(body, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get role list of the given user to a Tenant/Workspace/Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RoleScopeGetDto>> GetUserRoleScopesAsync(this ITenant operations, GetUserRoleScopeRequestDto body, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserRoleScopesWithHttpMessagesAsync(body, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revoke role for the given user to a Tenant/Workspace/Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static void RevokeRoleScope(this ITenant operations, RevokeUserRoleScopeRequestDto body, string xAmbientContextUserContext = default)
            {
                operations.RevokeRoleScopeAsync(body, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke role for the given user to a Tenant/Workspace/Dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RevokeRoleScopeAsync(this ITenant operations, RevokeUserRoleScopeRequestDto body, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                (await operations.RevokeRoleScopeWithHttpMessagesAsync(body, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add new tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static TenantGetDto PostTenant(this ITenant operations, TenantCreationDto body, string xAmbientContextUserContext = default)
            {
                return operations.PostTenantAsync(body, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add new tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantGetDto> PostTenantAsync(this ITenant operations, TenantCreationDto body, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.PostTenantWithHttpMessagesAsync(body, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all tenants of logged in user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<TenantGetDto> GetTenant(this ITenant operations, string xAmbientContextUserContext = default)
            {
                return operations.GetTenantAsync(xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all tenants of logged in user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TenantGetDto>> GetTenantAsync(this ITenant operations, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetTenantWithHttpMessagesAsync(xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get tenant info according to the tenant id or alias
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static TenantGetDto GetTenant1(this ITenant operations, string tenantIdOrAlias, string xAmbientContextUserContext = default)
            {
                return operations.GetTenant1Async(tenantIdOrAlias, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tenant info according to the tenant id or alias
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantGetDto> GetTenant1Async(this ITenant operations, string tenantIdOrAlias, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetTenant1WithHttpMessagesAsync(tenantIdOrAlias, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user list in the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<UserGetDto> GetUsersByTenantIdOrAlias(this ITenant operations, string tenantIdOrAlias, string xAmbientContextUserContext = default)
            {
                return operations.GetUsersByTenantIdOrAliasAsync(tenantIdOrAlias, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user list in the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserGetDto>> GetUsersByTenantIdOrAliasAsync(this ITenant operations, string tenantIdOrAlias, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersByTenantIdOrAliasWithHttpMessagesAsync(tenantIdOrAlias, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add user to the tenant. If user doesn't exist in workbench, will create one
            /// based on the user info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static UserGetDto InviteTenantUser(this ITenant operations, UserInviteDto body, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default)
            {
                return operations.InviteTenantUserAsync(body, tenantIdOrAlias, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add user to the tenant. If user doesn't exist in workbench, will create one
            /// based on the user info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserGetDto> InviteTenantUserAsync(this ITenant operations, UserInviteDto body, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.InviteTenantUserWithHttpMessagesAsync(body, tenantIdOrAlias, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete user from the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static bool? DeleteTenantUser(this ITenant operations, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default)
            {
                return operations.DeleteTenantUserAsync(tenantIdOrAlias, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete user from the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteTenantUserAsync(this ITenant operations, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.DeleteTenantUserWithHttpMessagesAsync(tenantIdOrAlias, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update user role for the specific tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static void UpdateTenantUserRole(this ITenant operations, UserUpdateDto body, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default)
            {
                operations.UpdateTenantUserRoleAsync(body, tenantIdOrAlias, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update user role for the specific tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateTenantUserRoleAsync(this ITenant operations, UserUpdateDto body, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                (await operations.UpdateTenantUserRoleWithHttpMessagesAsync(body, tenantIdOrAlias, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get user role list according to the tenant id or alias
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static TenantUserRoleGetDto GetTenantAndWorkspacesRoles(this ITenant operations, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default)
            {
                return operations.GetTenantAndWorkspacesRolesAsync(tenantIdOrAlias, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user role list according to the tenant id or alias
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantUserRoleGetDto> GetTenantAndWorkspacesRolesAsync(this ITenant operations, string tenantIdOrAlias, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetTenantAndWorkspacesRolesWithHttpMessagesAsync(tenantIdOrAlias, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add new workspace to the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static WorkspaceGetDto PostWorkspace(this ITenant operations, WorkspaceCreationDto body, string tenantIdOrAlias, string xAmbientContextUserContext = default)
            {
                return operations.PostWorkspaceAsync(body, tenantIdOrAlias, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add new workspace to the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceGetDto> PostWorkspaceAsync(this ITenant operations, WorkspaceCreationDto body, string tenantIdOrAlias, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.PostWorkspaceWithHttpMessagesAsync(body, tenantIdOrAlias, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get workspace list in the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<WorkspaceGetDto> GetWorkspaces(this ITenant operations, string tenantIdOrAlias, string xAmbientContextUserContext = default)
            {
                return operations.GetWorkspacesAsync(tenantIdOrAlias, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get workspace list in the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkspaceGetDto>> GetWorkspacesAsync(this ITenant operations, string tenantIdOrAlias, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetWorkspacesWithHttpMessagesAsync(tenantIdOrAlias, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if tenant exists or workspace in the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static void ValidateWorkspaceInTenant(this ITenant operations, string tenantIdOrAlias, System.Guid workspaceId, string xAmbientContextUserContext = default)
            {
                operations.ValidateWorkspaceInTenantAsync(tenantIdOrAlias, workspaceId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if tenant exists or workspace in the tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantIdOrAlias'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidateWorkspaceInTenantAsync(this ITenant operations, string tenantIdOrAlias, System.Guid workspaceId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                (await operations.ValidateWorkspaceInTenantWithHttpMessagesAsync(tenantIdOrAlias, workspaceId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get tenants and workspaces list which the user has access.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='withAdminAccessOnly'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<UserTenantWorkspaceGetDto> GeTenantsWithWorkspaces(this ITenant operations, bool? withAdminAccessOnly = default, string xAmbientContextUserContext = default)
            {
                return operations.GeTenantsWithWorkspacesAsync(withAdminAccessOnly, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tenants and workspaces list which the user has access.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='withAdminAccessOnly'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserTenantWorkspaceGetDto>> GeTenantsWithWorkspacesAsync(this ITenant operations, bool? withAdminAccessOnly = default, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GeTenantsWithWorkspacesWithHttpMessagesAsync(withAdminAccessOnly, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get users info according to the id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<UserGetDto> GetUsers(this ITenant operations, IList<System.Guid?> usersId, string xAmbientContextUserContext = default)
            {
                return operations.GetUsersAsync(usersId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get users info according to the id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='usersId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserGetDto>> GetUsersAsync(this ITenant operations, IList<System.Guid?> usersId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(usersId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new user or update user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static UserGetDto CreateOrUpdateUser(this ITenant operations, UserCreationDto body, string xAmbientContextUserContext = default)
            {
                return operations.CreateOrUpdateUserAsync(body, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new user or update user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserGetDto> CreateOrUpdateUserAsync(this ITenant operations, UserCreationDto body, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.CreateOrUpdateUserWithHttpMessagesAsync(body, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user info according to the id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static UserGetDto GetUser(this ITenant operations, System.Guid userId, string xAmbientContextUserContext = default)
            {
                return operations.GetUserAsync(userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user info according to the id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserGetDto> GetUserAsync(this ITenant operations, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get workspace role for the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<WorkspaceUserRoleGetDto> GetWorkspaceUserRoles(this ITenant operations, IList<System.Guid?> body, System.Guid userId, string xAmbientContextUserContext = default)
            {
                return operations.GetWorkspaceUserRolesAsync(body, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get workspace role for the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkspaceUserRoleGetDto>> GetWorkspaceUserRolesAsync(this ITenant operations, IList<System.Guid?> body, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetWorkspaceUserRolesWithHttpMessagesAsync(body, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the predefined system user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static UserGetDto GetSystemUser(this ITenant operations, string xAmbientContextUserContext = default)
            {
                return operations.GetSystemUserAsync(xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the predefined system user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserGetDto> GetSystemUserAsync(this ITenant operations, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetSystemUserWithHttpMessagesAsync(xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get workspace info according to the workspace id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static WorkspaceGetDto GetWorkspace(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default)
            {
                return operations.GetWorkspaceAsync(workspaceId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get workspace info according to the workspace id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceGetDto> GetWorkspaceAsync(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetWorkspaceWithHttpMessagesAsync(workspaceId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Service Accounts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<ServiceAccountGetDto> GetServiceAccountsList(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default)
            {
                return operations.GetServiceAccountsListAsync(workspaceId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Service Accounts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ServiceAccountGetDto>> GetServiceAccountsListAsync(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetServiceAccountsListWithHttpMessagesAsync(workspaceId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new Service Account to the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static void CreateServiceAccount(this ITenant operations, ServiceAccountWriteDto body, System.Guid workspaceId, string xAmbientContextUserContext = default)
            {
                operations.CreateServiceAccountAsync(body, workspaceId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new Service Account to the given workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateServiceAccountAsync(this ITenant operations, ServiceAccountWriteDto body, System.Guid workspaceId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                (await operations.CreateServiceAccountWithHttpMessagesAsync(body, workspaceId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get service account info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static ServiceAccountGetDto GetServiceAccount(this ITenant operations, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default)
            {
                return operations.GetServiceAccountAsync(workspaceId, serviceAccountId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get service account info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceAccountGetDto> GetServiceAccountAsync(this ITenant operations, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetServiceAccountWithHttpMessagesAsync(workspaceId, serviceAccountId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove service account from the given workspace id and service account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static bool? DeleteServiceAccount(this ITenant operations, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default)
            {
                return operations.DeleteServiceAccountAsync(workspaceId, serviceAccountId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove service account from the given workspace id and service account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteServiceAccountAsync(this ITenant operations, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.DeleteServiceAccountWithHttpMessagesAsync(workspaceId, serviceAccountId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the given service account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static void UpdateServiceAccount(this ITenant operations, ServiceAccountWriteDto body, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default)
            {
                operations.UpdateServiceAccountAsync(body, workspaceId, serviceAccountId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the given service account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateServiceAccountAsync(this ITenant operations, ServiceAccountWriteDto body, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                (await operations.UpdateServiceAccountWithHttpMessagesAsync(body, workspaceId, serviceAccountId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Regenerate Service Account secret for the given workspace id and service
            /// account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static string RegenerateServiceAccountSecret(this ITenant operations, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default)
            {
                return operations.RegenerateServiceAccountSecretAsync(workspaceId, serviceAccountId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate Service Account secret for the given workspace id and service
            /// account id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='serviceAccountId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RegenerateServiceAccountSecretAsync(this ITenant operations, System.Guid workspaceId, System.Guid serviceAccountId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.RegenerateServiceAccountSecretWithHttpMessagesAsync(workspaceId, serviceAccountId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get tenant which the workspace belongs to
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static TenantGetDto GetTenantByWorkspaceId(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default)
            {
                return operations.GetTenantByWorkspaceIdAsync(workspaceId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tenant which the workspace belongs to
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantGetDto> GetTenantByWorkspaceIdAsync(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetTenantByWorkspaceIdWithHttpMessagesAsync(workspaceId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user list in the workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<UserGetDto> GetUsersByWorkspaceId(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default)
            {
                return operations.GetUsersByWorkspaceIdAsync(workspaceId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user list in the workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserGetDto>> GetUsersByWorkspaceIdAsync(this ITenant operations, System.Guid workspaceId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersByWorkspaceIdWithHttpMessagesAsync(workspaceId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add user to the workspace. If user doesn't exist in workbench, will create
            /// one based on the user info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static UserGetDto InviteWorkspaceUser(this ITenant operations, UserInviteDto body, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default)
            {
                return operations.InviteWorkspaceUserAsync(body, workspaceId, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add user to the workspace. If user doesn't exist in workbench, will create
            /// one based on the user info.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserGetDto> InviteWorkspaceUserAsync(this ITenant operations, UserInviteDto body, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.InviteWorkspaceUserWithHttpMessagesAsync(body, workspaceId, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete user from the workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static bool? DeleteWorkspaceUser(this ITenant operations, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default)
            {
                return operations.DeleteWorkspaceUserAsync(workspaceId, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete user from the workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteWorkspaceUserAsync(this ITenant operations, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.DeleteWorkspaceUserWithHttpMessagesAsync(workspaceId, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update user role for the specific workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static void UpdateWorkspaceUserRole(this ITenant operations, UserUpdateDto body, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default)
            {
                operations.UpdateWorkspaceUserRoleAsync(body, workspaceId, userId, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update user role for the specific workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateWorkspaceUserRoleAsync(this ITenant operations, UserUpdateDto body, System.Guid workspaceId, System.Guid userId, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                (await operations.UpdateWorkspaceUserRoleWithHttpMessagesAsync(body, workspaceId, userId, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of workspaces with relative tenant info along with.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            public static IList<WorkspaceWithTenantReadDTO> GetWorkspaceWithTenantList(this ITenant operations, IList<System.Guid?> body, string xAmbientContextUserContext = default)
            {
                return operations.GetWorkspaceWithTenantListAsync(body, xAmbientContextUserContext).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of workspaces with relative tenant info along with.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xAmbientContextUserContext'>
            /// The user context with userId as actor.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkspaceWithTenantReadDTO>> GetWorkspaceWithTenantListAsync(this ITenant operations, IList<System.Guid?> body, string xAmbientContextUserContext = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetWorkspaceWithTenantListWithHttpMessagesAsync(body, xAmbientContextUserContext, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

{
  "openapi": "3.0.4",
  "info": {
    "title": "Veracity Platform Api V4 (Test)",
    "description": "This document outlines the capabilities of the **Veracity Platform API V4**. This powerful, RESTful API provides a comprehensive suite of tools for managing resources within the Veracity ecosystem. It allows developers to programmatically interact with core Veracity concepts such as **Tenants**, **Applications**, **Users**, and **Groups**.\r\n\r\nThe API is structured around a clear and logical resource hierarchy, making it intuitive to use. A key feature is the extensive use of OData query options, allowing for powerful filtering, searching, and pagination of results, which is essential for managing large sets of data efficiently.\r\n\r\n## Key Concepts\r\n\r\n* **Tenants**: A tenant represents a customer or an organization within Veracity. It is the top-level container for users, groups, and application subscriptions.\r\n* **Applications**: These are the services or tools that are installed within a tenant. The API provides endpoints to manage application subscriptions, licenses, and administrators.\r\n* **Users**: These are the individual accounts within a tenant that can be granted access to applications and resources.\r\n* **Groups**: Groups are collections of users, used to simplify access management. Assigning a license or a permission to a group grants it to all members of that group.\r\n* **Application Elements**: A flexible feature that allows applications to create and manage their own hierarchical data structures (elements) within a tenant, complete with their own access control.\r\n\r\n## Understanding Identifiers in the Veracity Platform API\r\n\r\nThe Veracity API uses several types of identifiers (IDs) to reference resources. Understanding the scope and context of each ID is crucial for using the API correctly.\r\n\r\n| Identifier | Scope | Description | Example Usage |\r\n| :--- | :--- | :--- | :--- |\r\n| `tenantId` | Tenant | A unique identifier for a tenant, which represents a customer or organization. | `GET /tenants/{tenantId}` |\r\n| `applicationId` | Global | A unique identifier for an application, corresponding to the **Service ID** in the developer portal. This ID is the same across all tenants. | `GET /applications/{applicationId}/manifest` |\r\n| `applicationInstanceId` | Tenant-Specific | A unique identifier for a specific *installation* or *subscription* of an application within a tenant. | Returned in the body of `GET /tenants/{tenantId}/applications/{applicationId}` |\r\n| `profileId` | Tenant-Specific | A unique identifier for a user account *within a specific tenant*. | `GET /tenants/{tenantId}/users/{userId}` |\r\n| `userId` | Global | A globally unique identifier (GUID) for a user's core identity across the entire Veracity platform, independent of any tenant. | Returned in the body of `GET /tenants/{tenantId}/users/{userId}` |\r\n| `groupId` | Tenant-Specific | A unique identifier for a group of users *within a specific tenant*. | `GET /tenants/{tenantId}/groups/{groupId}` |\r\n| `elementId` | Veracity assigned | A unique identifier for an Application Element, which is a custom resource created and managed by an application. | `GET /tenants/{tenantId}/applications/{applicationId}/elements/{elementId}` |\r\n| `elementExternalId` | Application assigned | A unique identifier for an Application Element, which allows you to create a connection between an element and a resource in your application. | `GET /tenants/{tenantId}/applications/{applicationId}/elements/{elementId}` |\r\n| `entityId` | Polymorphic | A placeholder for an ID that can be either a `userId` or a `groupId`. The context is determined by the `licenseType` or `memberType` query parameter. | `DELETE /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}?licenseType=profile` |\r\n| `objectId` | Polymorphic | A generic identifier returned in response bodies. It typically represents a `userId` for users or a `groupId` for groups, depending on the context of the license or membership. | Returned in the body of `GET /tenants/{tenantId}/applications/{applicationId}/licenses` |\r\n\r\n## Core Functionalities\r\n\r\n### Tenants\r\n\r\nThe API provides endpoints to manage and query tenant information.\r\n\r\n* **Get Tenant Information**: Retrieve detailed information about a specific tenant using its ID.\r\n* **List Tenants for an Application**: Find all tenants where a specific application is installed.\r\n* **Manage Tenant Administrators**: List administrators for a tenant and get details about a specific administrator's roles.\r\n* **List Users and Groups**: Get a combined list of all users and groups within a specific tenant.\r\n* **Update Tenant Properties**: Modify custom extension properties associated with a tenant.\r\n\r\n### Applications\r\n\r\nEndpoints for managing application subscriptions and access within a tenant.\r\n\r\n* **List and Get Applications**: Retrieve a list of all applications installed in a tenant or get details for a single application.\r\n* **Manage Licenses**:\r\n    * List all licenses (both user and group) for an application.\r\n    * Add or remove user/group licenses.\r\n    * Verify if a specific user has a license.\r\n    * Update license details, including custom extension properties.\r\n    * Set specific access levels for a subscription.\r\n* **Manage Administrators**:\r\n    * List all administrators for an application.\r\n    * Add or remove a user as an application administrator.\r\n* **List All Users**: Get a comprehensive list of all users with access to an application, including those with inherited access from groups.\r\n* **Application Manifest**: Retrieve the application's manifest, which contains settings and configurations defined in the developer portal.\r\n\r\n### Users\r\n\r\nA set of endpoints for user management and querying user-related information.\r\n\r\n* **List and Get Users**: List all users within a tenant or retrieve detailed information for a specific user by their ID or email address.\r\n* **Resolve Multiple Users**: Fetch detailed information for a list of user IDs in a single request.\r\n* **Manage User Properties**: Update custom extension properties for a user.\r\n* **User's Groups**:\r\n    * List the groups a user is a direct member of.\r\n    * List all groups a user belongs to, including through nested group memberships.\r\n* **User's Applications**: Get a list of all applications a user has access to within a specific tenant.\r\n* **User's Tenants**: Retrieve a list of all tenants a user is a member of.\r\n\r\n### Groups\r\n\r\nFunctionality for managing user groups and their memberships.\r\n\r\n* **List and Get Groups**: List all groups within a tenant or get detailed information for a specific group.\r\n* **Manage Group Members**:\r\n    * List all direct members (users and other groups) of a group.\r\n    * Get a \"flat\" list of all users in a group, including members of any nested groups.\r\n    * Check if a specific user is a member of a group (directly or indirectly).\r\n* **Manage Group Properties**: Update custom extension properties for a group or for a specific membership.\r\n* **Group's Applications**: List all applications for which a group has a license.\r\n\r\n### Me (Current User)\r\n\r\nThese endpoints provide a convenient way for the authenticated user to query their own permissions and resources without needing to know their own user ID.\r\n\r\n* **Get My Information**: Retrieve details for the currently logged-in user.\r\n* **Get My Applications**: List all applications the user has access to across all their tenants or within a specific tenant.\r\n* **Get My Tenants**: List all tenants the user is a member of.\r\n* **Get My Groups**: List all groups the user is a member of within a specific tenant.\r\n* **Verify Policies**: An endpoint to ensure the user has accepted all required Veracity policies for a given application.\r\n\r\n### Application Elements\r\n\r\nThis advanced feature allows applications to define and manage their own resources within the Veracity platform.\r\n\r\n* **Create and Manage Elements**: Create, retrieve, update (patch), and delete hierarchical application elements.\r\n* **Manage Element Rights**:\r\n    * Assign and manage access rights for users and groups to specific elements.\r\n    * Control access levels for fine-grained permission models.\r\n* **Query User Access**:\r\n    * Get a tree view of all elements a user has access to.\r\n    * Check the effective rights a specific user has on a particular element.\n\n> Service build version __BUILD_NUMBER__ - Environment: Test",
    "version": "Veracity Platform api V4"
  },
  "servers": [
    {
      "url": "https://api-v4-ica5dyfal6qp2-test.azurewebsites.net"
    }
  ],
  "paths": {
    "/tenants/{tenantId}/applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List applications within a tenant\r\n\r\n",
        "description": "Get applications installed in the tenant\n\nFilterable fields: name, pricingTier, orderNumber, state\n\nquery sample: tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/applications?$filter=serviceId eq '88dd8fdc-c6db-49d4-89f5-76bc4e7c8d57'&$top=1&$skip=0&search=Interface<br/>",
        "operationId": "Applications_GetApplications",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "managementMode eq 'veracityManaged'",
              "search": "MyApp",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedApplicationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedApplicationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedApplicationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application by its public id\r\n\r\n",
        "description": "Get application by public id<br/>",
        "operationId": "Applications_GetApplication",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Update your application's state or properties\r\n\r\n",
        "description": "Update extension properties for an application. Extension properties have the name format {prefix}_property name. Prefixes are registered in developer.veracity.com<br/>",
        "operationId": "Applications_PatchApplication",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/licenses": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "LIst direct licenses granted for the application\r\n\r\n",
        "description": "Get all direct users and/or groups. LicenseType values - profile: personal licenses, userGroup: license given to a group or empty string: get both personal and group licenses. Please note that requests with odata query elements cannot be cached and my affect performance. OData parsing is currently and experimental feature in this endpoint.<br/>",
        "operationId": "Applications_GetLicenses",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "licenseType",
            "in": "query",
            "description": "Represents the type of entity.",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "email eq 'olaf.jensen@democorp.com'",
              "search": "olaf jensen",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Add a new license to a user or group\r\n\r\n",
        "description": "Add user or group license to application<br/>",
        "operationId": "Applications_AddLicense",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/effective-licenses/{userId}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get the effective rights for a user\r\n\r\n",
        "description": "Verify user license<br/>",
        "operationId": "Applications_VerifyUserLicense",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get direct license for the user or group\r\n\r\n",
        "description": "Get the user or groups direct license<br/>",
        "operationId": "Applications_GetLicense",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "You can only update extension properties.\r\n\r\n",
        "description": "Update license details. Extension properties have the name format {prefix}_property name. Prefixes are registered in developer.veracity.com. EntityId is the id of the group or the person, and licenseType (profile,userGroup) indicates which type of license you are updating<br/>",
        "operationId": "Applications_UpdateLicense",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "licenseType",
            "in": "query",
            "description": "Represents the type of entity.",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Remove a subscription from a user or a group\r\n\r\n",
        "description": "Remove subscription. EntityId is the id of the group or the person, and licenseType (profile,userGroup) indicates which type of license you are removing<br/>",
        "operationId": "Applications_DeleteLicense",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "licenseType",
            "in": "query",
            "description": "Represents the type of entity.",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed."
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/users": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "All users, both direct and inherited\r\n\r\n",
        "description": "Get all users including inherited from groups, deduplication is by default in effect. disable deduplication to detect users with multiple paths to the application in the tenant.<br/>",
        "operationId": "Applications_GetUsersWithInheritedAccess",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "managementMode eq 'veracityManaged'",
              "search": "MyApp",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "includeDuplicates",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}/accessLevel": {
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Only applicable for applications with access levels\r\n\r\n",
        "description": "Set access level on an existing subscription. entityId is the id of the group or the person, and licenseType (profile,userGroup) indicates which type of license you are updating<br/>",
        "operationId": "Applications_SetAccessLevel",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "licenseType",
            "in": "query",
            "description": "Represents the type of entity.",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{applicationId}/tenants": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application tenants\r\n\r\n",
        "description": "Get all tenants where application is installed<br/>",
        "operationId": "Applications_GetTenantsForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/administrators": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List application admins\r\n\r\n",
        "description": "List application administrators<br/>",
        "operationId": "Applications_GetAdministrators",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminUser"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminUser"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminUser"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/administrators/{userId}": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Add application admin\r\n\r\n",
        "description": "Add user as application administrator, this is only used by hybrid and service managed applications. If the application has access levels defined, this must be provided if the user doesn't have a license from before. Only applicable for applications without access levels or with access levels V1<br/>",
        "operationId": "Applications_AddAdministrator",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accessLevel",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed."
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "remove an admin\r\n\r\n",
        "description": "Remove application administrator, this is only used by hybrid and service managed applications. Only applicable for applications without access levels or with access levels V1<br/>",
        "operationId": "Applications_DeleteAdministrator",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "removeLicense",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed."
          }
        }
      }
    },
    "/applications/{applicationId}/manifest": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get the application manifest\r\n\r\n",
        "description": "Get application manifest, which contains the application settings and the administrators. All these settings are controlled in developer.veracity.com<br/>",
        "operationId": "Applications_GetApplicationManifest",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationManifest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationManifest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationManifest"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get root level elements\r\n\r\n",
        "description": "List all root level elements<br/>",
        "operationId": "Elements_ListElements",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "elementExternalId eq 'workspace1'",
              "$orderby": "elementType desc",
              "search": "my test workspace",
              "$top": 100,
              "$skip": 0
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedElementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedElementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedElementResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "create root element\r\n\r\n",
        "description": "Create a root level element<br/>",
        "operationId": "Elements_CreateElement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/{elementId}/elements": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get child elements\r\n\r\n",
        "description": "List all child elements<br/>",
        "operationId": "Elements_ListChildElements",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "elementExternalId eq 'workspace1'",
              "$orderby": "elementType desc",
              "search": "my test workspace",
              "$top": 100,
              "$skip": 0
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedElementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedElementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedElementResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Create child element\r\n\r\n",
        "description": "Create a child element<br/>",
        "operationId": "Elements_CreateChildElement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/element-tree": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get the element hierarchy\r\n\r\n",
        "description": "Get the full tree view od the application elements<br/>",
        "operationId": "Elements_GetElementTree",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementTreeResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementTreeResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementTreeResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/{elementId}": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get element\r\n\r\n",
        "description": "Get an element by the id or external reference<br/>",
        "operationId": "Elements_GetElement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Update element\r\n\r\n",
        "description": "Update aspects of an element<br/>",
        "operationId": "Elements_PatchElement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Delete element\r\n\r\n",
        "description": "Delete an element from the application<br/>",
        "operationId": "Elements_DeleteElement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed."
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/{elementId}/rights": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get direct rights\r\n\r\n",
        "description": "Get the direct element rights<br/>",
        "operationId": "Elements_GetElementRights",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberType",
            "in": "query",
            "description": "the type of member, profile or userGroup",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "email eq 'olaf.jensen@democorp.com'",
              "search": "olaf jensen",
              "$top": 100,
              "$skip": 0
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Add right to a user or group\r\n\r\n",
        "description": "Add element right to the user or group.<br/>",
        "operationId": "Elements_AddElementRights",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRightRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRightRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRightRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ElementRightRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/{elementId}/rights/{entityId}": {
      "patch": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Update right for a user or group\r\n\r\n",
        "description": "Update the element right<br/>",
        "operationId": "Elements_UpdateElementRights",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberType",
            "in": "query",
            "description": "the type of member, profile or userGroup",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Delete a right from a user or group\r\n\r\n",
        "description": "Delete element right<br/>",
        "operationId": "Elements_DeleteElementRights",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberType",
            "in": "query",
            "description": "the type of member, profile or userGroup",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed."
          }
        }
      },
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "direct right for an entity\r\n\r\n",
        "description": "Get the direct right for a user or group<br/>",
        "operationId": "Elements_GetElementRight",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/users/{userId}/elements/all": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get rights for a user\r\n\r\n",
        "description": "Get all element rights for a user<br/>",
        "operationId": "Elements_GetUserElements",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightTreeResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightTreeResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightTreeResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/{elementId}/effective-rights/{userId}": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get the effective rights for a user\r\n\r\n",
        "description": "Get the effective rights for a specific element for a user<br/>",
        "operationId": "Elements_GetUserElement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/users/me/elements/all": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get the rights for the logged in user\r\n\r\n",
        "description": "Get element rights for the logged in user<br/>",
        "operationId": "Elements_GetCurentUserElements",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightTreeResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightTreeResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementRightTreeResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/applications/{applicationId}/elements/{elementId}/effective-rights/me": {
      "get": {
        "tags": [
          "ApplicationElements"
        ],
        "summary": "Get the effective rights for the logged in user\r\n\r\n",
        "description": "Get the effective rights for a specific element for the logged in user<br/>",
        "operationId": "Elements_GetCurentUserElement",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Can be the application internal id or the VTM elementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementRightResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get groups within the tenant\r\n\r\n",
        "description": "Get groups in the tenant\n\nFliterable fields: name\n\nquery sample: tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/groups?$filter=name eq 'AN_Techleads'&$top=1&$skip=0<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_GetGroups",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "email eq 'olaf.jensen@democorp.com'",
              "search": "olaf jensen",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedGroupResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedGroupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get group by id\r\n\r\n",
        "description": "Get group by id<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_GetGroup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Update the group\r\n\r\n",
        "description": "Update extension properties for a group. Extension properties have the name format {prefix}_property name. Prefixes are registered in developer.veracity.com. Pleas note that the order of operations can impact the result<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_PatchGroup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups/{groupId}/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get direct members\r\n\r\n",
        "description": "Get all direct users and groups.  Please note that requests with odata query elements cannot be cached and my affect performance. OData parsing is currently and experimental feature in this endpoint.<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_GetGroupMembers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "memberType",
            "in": "query",
            "description": "the type of member, profile or userGroup",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "email eq 'olaf.jensen@democorp.com'",
              "search": "olaf jensen",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups/{groupId}/members/recursive": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get all users\r\n\r\n",
        "description": "Get all users including inherited from groups<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_GetMembersWithInheritedMemberships",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "email eq 'olaf.jensen@democorp.com'",
              "search": "olaf jensen",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups/{groupId}/members/{entityId}": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Update a member\r\n\r\n",
        "description": "Update extension properties  for a group membership. extension properties have the name format {prefix}_property name. Prefixes are registered in developer.veracity.com<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_PatchMember",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Represents the type of entity.",
            "schema": {
              "$ref": "#/components/schemas/EntityTypes"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get direct user or group member\r\n\r\n",
        "description": "get direct member<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_GetDirectMember",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups/{groupId}/memberOf": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List the groups the given group is a member of\r\n\r\n",
        "description": "List all groups this group is a member of<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_GetMemberOf",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups/{groupId}/applications": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the application licenses the group has\r\n\r\n",
        "description": "Get all applications this group has a license for<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_GetApplications",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/groups/{groupId}/effective-users/{userId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Check if a user is a member of the group\r\n\r\n",
        "description": "Check if the user is a member of this group, either direct or inherited<br/>Retrieve groups and group members to determine access rights within your application",
        "operationId": "Groups_IsUserMemberOfGroup",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IsMemberResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsMemberResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsMemberResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get the user info for the logged in user\r\n\r\n",
        "description": "Get details for the logged on user<br/>",
        "operationId": "Me_GetMyInfo",
        "parameters": [
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/me/applications": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get the applications the user has a license for\r\n\r\n",
        "description": "Get all applications the user has access to<br/>",
        "operationId": "Me_GetMyApplications",
        "parameters": [
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/me/tenants/{tenantId}/applications": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get all applications the user has a license for in a given tenant\r\n\r\n",
        "description": "Get all applications in a tenant the user has access to<br/>",
        "operationId": "Me_GetMyTenantApplications",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/me/tenants/{tenantId}/groups": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get the users group memberships\r\n\r\n",
        "description": "Get the groups the logged on user belongs to<br/>",
        "operationId": "Me_GetMyGroups",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/me/tenants": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get all tenants the user is a member of\r\n\r\n",
        "description": "Get all tenants the logged on user is a member of<br/>",
        "operationId": "Me_GetMyTenants",
        "parameters": [
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponseEx"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponseEx"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponseEx"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/me/applications/{applicationId}/tenants": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get tenants with the application installed and the user has a license\r\n\r\n",
        "description": "Get all tenants the logged on user is a member of and has access to the application<br/>",
        "operationId": "Me_GetMyTenantsWithApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/me/policy-verifications/{applicationId}": {
      "post": {
        "tags": [
          "Me"
        ],
        "summary": "Important process, verifies that the authenticated user has accepted all required Veracity policies for the given application.\r\n\r\n",
        "description": "Verify Veracity user policies, returns an empty 202 response if all policies are ok, 406 with an error response that contains the url to send the user to correct the policy issue<br/>",
        "operationId": "Me_VerifyUserPolicy",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The applicationId is the same as serviceId in developer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "Accepted"
          },
          "406": {
            "description": "The request was not acceptable, the response contains a url to correct the issue",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "StatusService"
        ],
        "summary": "",
        "description": "Returns 200 when all dependencies are ok, 424 if there are some non essential dependency failures and 500 when essential dependencies are unreachable or the service is down<br/>",
        "operationId": "StatusService_GetServiceHealthStatus",
        "parameters": [
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          },
          "424": {
            "description": "Failed Dependency",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get tenant\r\n\r\n",
        "description": "Get tenant by id<br/>",
        "operationId": "Tenants_GetTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get application tenants\r\n\r\n",
        "description": "Get list of tenants linked to your service<br/>",
        "operationId": "Tenants_GetTenants",
        "parameters": [
          {
            "name": "applicationId",
            "in": "query",
            "description": "The applicationId is the same as serviceId in developer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tenants"
        ],
        "summary": "Add/update application properties for the tenant\r\n\r\n",
        "description": "Update the tenant extension properties. Extension properties have the name format {prefix}_property name. Prefixes are registered in developer.veracity.com. Pleas note that the order of operations can impact the result<br/>",
        "operationId": "Tenants_PatchTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/administrators/{userId}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get global admin rights for the user\r\n\r\n",
        "description": "Get the admin details for a user by their id<br/>",
        "operationId": "Tenants_GetAdmin",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoles"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoles"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoles"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/administrators": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "LIst global admins\r\n\r\n",
        "description": "Get all admins of the tenant, both global and local.<br/>",
        "operationId": "Tenants_GetAdmins",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoles"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoles"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoles"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users-and-groups": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "List users and groups\r\n\r\n",
        "description": "Retrieves all users and groups from a tenant<br/>",
        "operationId": "Tenants_GetUsersAndGroups",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "email eq 'olaf.jensen@democorp.com'",
              "search": "olaf jensen",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedUserOrGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedUserOrGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedUserOrGroup"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/emails/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Resolve user in a tenant by email\r\n\r\n",
        "description": "Retrieves a user by their email address<br/>",
        "operationId": "Users_GetUserByEmail",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "email",
            "in": "path",
            "description": "The email address of the user",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "olaf.jensen@democorp.com"
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user in a tenant\r\n\r\n",
        "description": "Get user by id<br/>",
        "operationId": "Users_GetUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List user in a tenant\r\n\r\n",
        "description": "List users in a tenan\n\nFilterable fields: name, email, isServicePrincipal, state\n\nquery sample: tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/users?$filter=name eq 'Normann, Ola'&$top=1&$skip=0<br/>",
        "operationId": "Users_ListUsers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "odata",
            "in": "query",
            "description": "OData query options, the values are passed as query string parameters",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "$filter": "email eq 'olaf.jensen@democorp.com'",
              "search": "olaf jensen",
              "$top": 100,
              "$skip": 0,
              "$orderby": "name desc"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedUserResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedUserResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedUserResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Get multiple users by ids\r\n\r\n",
        "description": "Get full user details for a list of user ids<br/>",
        "operationId": "Users_ResolveUsers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "Accepted",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalUserDetailsResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by id in a tenant\r\n\r\n",
        "description": "Get user details<br/>",
        "operationId": "Users_GetUserInTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update application properties for a user\r\n\r\n",
        "description": "Update extension properties  for a user. Extension properties have the name format {prefix}_property name. Prefixes are registered in developer.veracity.com<br/>",
        "operationId": "Users_PatchUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users/{userId}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get direct groups for the user\r\n\r\n",
        "description": "Get the direct groups for the user<br/>",
        "operationId": "Users_GetGroupsForUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users/{userId}/groups/recursive": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all groups for a user\r\n\r\n",
        "description": "Get direct and inherited groups for the user<br/>",
        "operationId": "Users_GetGroupsForUserExploded",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users/{userId}/applications": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user applications\r\n\r\n",
        "description": "Get all applications in a tenant the user has access to<br/>",
        "operationId": "Users_GetApplicationsForUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id (or dnvCustomerId for veracity_default tenants)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationLicenseResponse"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/tenants": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all tenants the user belongs to\r\n\r\n",
        "description": "Get the tenants a user is member of<br/>",
        "operationId": "Users_GetTenantsForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The users id found in Veracity Identity",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request-id",
            "in": "header",
            "description": "A correlation token to use when looking in the logs.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetail"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponseEx"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponseEx"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantResponseEx"
                  },
                  "description": "A list of items. This class is used to represent the result of a query."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdminItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the id of the application or group",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "the name of the application or group",
            "nullable": true,
            "example": "Veracity VTM Demo"
          },
          "type": {
            "type": "string",
            "description": "the type of the item, application or group",
            "nullable": true,
            "example": "application"
          }
        },
        "additionalProperties": false,
        "description": "Represent the local admins within the tenant."
      },
      "AdminUser": {
        "type": "object",
        "properties": {
          "isApplicationAdmin": {
            "type": "boolean",
            "description": "Value indicating whether the user is an application administrator. This can be combined with user admin, if isUserAdmin is false this user can only add users from the tenant pool, not add new users to the tenant.",
            "example": true
          },
          "isTenantAdmin": {
            "type": "boolean",
            "description": "Value indicating whether the user is a tenant administrator. When this is true, the other admin flags are not relevant.",
            "example": false
          },
          "isUserAdmin": {
            "type": "boolean",
            "description": "Value indicating whether the user is a user administrator, meaning the user can add new users to the tenant.",
            "example": true
          },
          "profileId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the user (across all tenants)¨.",
            "format": "uuid"
          },
          "isLocked": {
            "type": "boolean",
            "description": "the isLocked is true, the user cannot be removed from the tenant. The user is normally a service principal that comes with one of the applications and is required for the applications to work."
          },
          "accessHubProfileUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "description": "Returns the relative profile picture URL of the user if the middleware is added to the web application.",
            "format": "uri",
            "nullable": true,
            "readOnly": true,
            "example": "/profile/picture/12345678-1234-1234-1234-123456789012"
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user.",
            "format": "uuid"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating whether the user is a service principal.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a application administrator.",
        "readOnly": true
      },
      "ApplicationLicenseResponse": {
        "type": "object",
        "properties": {
          "accessLevel": {
            "type": "string",
            "description": "The access level of the license. Only applicable for application that has access levels defined in developer.veracity.com.",
            "nullable": true,
            "example": "data_reader"
          },
          "applicationUrl": {
            "type": "string",
            "description": "The url to the application page in including tenant id if not system tenant",
            "nullable": true,
            "example": "https://myaplication.mycompany?tenant_id=ae0c841b-7a2a-4144-cb13-ac0224c084ce"
          },
          "name": {
            "type": "string",
            "description": "The name of the application.",
            "nullable": true,
            "example": "Veracity VTM Demo"
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application. This is the same as the serviceId in developer.",
            "format": "uuid",
            "example": "1deb5f9f-f438-4665-9f11-62e86737f7d1"
          },
          "applicationInstanceId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the application.",
            "format": "uuid",
            "example": "89da7932-cc2a-4eaa-acd4-b34e8e2e5c35"
          },
          "accessHubApplicationUrl": {
            "type": "string",
            "description": "The url to the application page in access hub.",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/applications/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a response for an application license.",
        "readOnly": true
      },
      "ApplicationManager": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The user id of the manager.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email of the manager.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "the display name of the manager",
            "nullable": true
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "true if the manager is a service principal"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "true if the manager is an admin"
          },
          "canManageUsers": {
            "type": "boolean",
            "description": "true id the user can manage application users (human users will only be able to manage users in the system tenant for legacy applications)"
          }
        },
        "additionalProperties": false,
        "description": "Represents a manager of an application."
      },
      "ApplicationManifest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "the application name as defined in developer.veracity.com",
            "nullable": true
          },
          "applicationId": {
            "type": "string",
            "description": "the application id found in developer.veracity.com",
            "nullable": true
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "the application description as defined in developer.veracity.com",
            "nullable": true
          },
          "logoUri": {
            "type": "string",
            "description": "the URI to the application logo",
            "format": "uri",
            "nullable": true
          },
          "managers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationManager"
            },
            "description": "The users and service principals that are administrators of the service",
            "nullable": true
          },
          "isProduction": {
            "type": "boolean",
            "description": "true if the application is approved for production"
          },
          "propertyPrefix": {
            "type": "string",
            "description": "the prefix reserved for the application, used to prefix properties in the graph",
            "nullable": true
          },
          "useApplyForFlow": {
            "type": "boolean",
            "description": ""
          },
          "settings": {
            "$ref": "#/components/schemas/ApplicationSettings"
          },
          "applicationUrlTemplate": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Retreive the settings for the application"
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "installmentState": {
            "$ref": "#/components/schemas/InstallmentState"
          },
          "managementMode": {
            "$ref": "#/components/schemas/ManagementModes"
          },
          "orderNumber": {
            "type": "string",
            "description": "The order number of the application. this is populated by the marketplace when the application is purchased.",
            "nullable": true,
            "example": "123456"
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Lists the available access levels for the application.",
            "nullable": true,
            "example": [
              "data_reader",
              "data_writer"
            ]
          },
          "production": {
            "type": "boolean",
            "description": "Value indicating whether the application is in production.",
            "example": true
          },
          "pricingTier": {
            "type": "string",
            "description": "The pricing tier of the application. This is used by the marketplace to indicate variant, sku , or pricing tier, only used by the application itself.\r\nThis is a free text field and can be used by the application to retrieve any information about the pricing tier,sku or variant of the application. The content options is determined by the application itself and communicated to the instance by the marketplace or any other provisioning process.",
            "nullable": true,
            "example": "standard"
          },
          "numberOfLicenses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Capability"
            },
            "description": "Additional capabilities enabled for the application.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the application.",
            "nullable": true,
            "example": "Veracity VTM Demo"
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application. This is the same as the serviceId in developer.",
            "format": "uuid",
            "example": "1deb5f9f-f438-4665-9f11-62e86737f7d1"
          },
          "applicationInstanceId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the application.",
            "format": "uuid",
            "example": "89da7932-cc2a-4eaa-acd4-b34e8e2e5c35"
          },
          "accessHubApplicationUrl": {
            "type": "string",
            "description": "The url to the application page in access hub.",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/applications/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents the response for an application.",
        "readOnly": true
      },
      "ApplicationSettings": {
        "type": "object",
        "properties": {
          "accessAdminGroupUrl": {
            "type": "string",
            "description": "the url template to access the group admin page",
            "nullable": true
          },
          "accessAdminRootUrl": {
            "type": "string",
            "description": "the url template to access the root admin page",
            "nullable": true
          },
          "accessAdminUserUrl": {
            "type": "string",
            "description": "the url template to access the user admin page",
            "nullable": true
          },
          "isPureVisual": {
            "type": "boolean",
            "description": "true if the application is only shown in myServcies and not in the access hub",
            "nullable": true
          },
          "mode": {
            "type": "string",
            "description": "the management mode of the application, can be veracityManaged, hybrid or serviceManaged",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "details about the applications tenant settings"
      },
      "Capability": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the capability.",
            "nullable": true,
            "example": "files"
          },
          "hasAccessLevel": {
            "type": "boolean",
            "description": "Determines if the capability can have additional rights associated with it. If true, the capability is visible in access hub and is part of ACL.",
            "example": true
          },
          "capacity": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "capacityUnit": {
            "type": "string",
            "description": "This is usually used to tell the application what the unit of measure is for the capacity. Eg gigabytes, number of sub-elements, etc.",
            "nullable": true
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of access levels associated with the capability.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CapabilityRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasAccessLevel": {
            "type": "boolean",
            "description": "Determines if the capability can have additional rights associated with it. If true, the capability is visible in access hub and is part of ACL.",
            "example": true
          },
          "capacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "capacityUnit": {
            "type": "string",
            "description": "This is usually used to tell the application what the unit of measure is for the capacity. Eg gigabytes, number of sub-elements, etc.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DependencyState": {
        "type": "object",
        "properties": {
          "componentId": {
            "type": "string",
            "nullable": true
          },
          "componentType": {
            "type": "string",
            "nullable": true
          },
          "observedValue": {
            "nullable": true
          },
          "observedUnit": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/HealthStateTypes"
          },
          "affectedEndpoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "output": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "format": "int32"
          },
          "critical": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ElementRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Describe the purpose og the element",
            "nullable": true
          },
          "elementExternalId": {
            "type": "string",
            "description": "the application's reference for the element. This is the same as the element id in the application.",
            "nullable": true,
            "example": "{6e4d334d-b8c9-4ac3-a058-c8ddd5f39c05}"
          },
          "elementType": {
            "type": "string",
            "description": "the type of the element, used to describe the element in the application.",
            "nullable": true
          },
          "elementTypeIconUrl": {
            "type": "string",
            "description": "The url element type icon. This is used to display the element in the application and access hub.",
            "format": "uri",
            "nullable": true
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityRequest"
            },
            "description": "Additional capabilities enabled for the application element.",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the element. This is used to display the element in the application and access hub."
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The system tags associated with the element and assigned by the application itself or Veracity Platform components. These are used to categorize and filter elements in the application and access hub.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties. Extra information kept on the object.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a request to create an application element."
      },
      "ElementResponse": {
        "type": "object",
        "properties": {
          "elementId": {
            "type": "string",
            "description": "The ID of the application element.",
            "format": "uuid",
            "example": "1deb5f9f-f438-4665-9f11-62e86737f7d1"
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application. This is the same as the serviceId in developer.",
            "format": "uuid",
            "example": "1deb5f9f-f438-4665-9f11-62e86737f7d1"
          },
          "applicationInstanceId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the application.",
            "format": "uuid",
            "example": "89da7932-cc2a-4eaa-acd4-b34e8e2e5c35"
          },
          "elementExternalId": {
            "type": "string",
            "description": "the application's reference for the element. This is the same as the element id in the application.",
            "nullable": true,
            "example": "workspace1"
          },
          "elementType": {
            "type": "string",
            "description": "the type of the element, used to describe the element in the application.",
            "nullable": true,
            "example": "Workspace"
          },
          "elementTypeIconUrl": {
            "type": "string",
            "description": "The url element type icon. This is used to display the element in the application and access hub.",
            "format": "uri",
            "nullable": true,
            "example": "https://cdn.veracity.com/assets/workspace.icon.png"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Capability"
            },
            "description": "Additional capabilities enabled for the application element.",
            "nullable": true
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isChild": {
            "type": "boolean"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "elementLevel": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "accessHubElementUrl": {
            "type": "string",
            "description": "Gets or sets the URL for accessing the hub element associated with this response.",
            "format": "uri",
            "nullable": true
          },
          "accessHubApplicationUrl": {
            "type": "string",
            "description": "Gets or sets the URL for accessing the application in the Access Hub.",
            "format": "uri",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "This class represents the response for an application element.",
        "readOnly": true
      },
      "ElementRightRequest": {
        "required": [
          "entityId",
          "licenseType"
        ],
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "The veracity user id for profile members and the group id for group members",
            "format": "uuid"
          },
          "licenseType": {
            "$ref": "#/components/schemas/EntityTypes"
          },
          "accessLevel": {
            "type": "string",
            "description": "Optional: used when provisioning applications that support accessLevels",
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Grant the users to manage licenses for this application/element. Only used for V1 access levels in the Veracity platform. This will be removed as the legacy applications upgrades to the new model.",
            "nullable": true
          },
          "canAddUsersToTenant": {
            "type": "boolean",
            "description": "Grant the user the ability to add users to the tenant"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties. Extra information kept on the object.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a request to manage element rights for a user or group."
      },
      "ElementRightResponse": {
        "type": "object",
        "properties": {
          "elementId": {
            "type": "string",
            "nullable": true
          },
          "elementExternalId": {
            "type": "string",
            "nullable": true
          },
          "isDirect": {
            "type": "boolean",
            "nullable": true
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "accessHubElementUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "objectId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the object¨. Profile id for profile licenses and the group id for group licenses",
            "format": "uuid",
            "nullable": true
          },
          "accessLevel": {
            "type": "string",
            "description": "Indicates the accessLevel of the uses in the application instance, only applicable for applications with tenant wide roles. eg:  'owner', 'contributor', 'reader'.",
            "nullable": true,
            "example": "data_reader"
          },
          "isLocked": {
            "type": "boolean",
            "description": "when the isLocked is true, the user cannot be removed from the application instance. The user is normally a service principal that comes with the application and is required for the application to work. This does not count towards the license count.",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "The email for profile licenses.",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "state": {
            "$ref": "#/components/schemas/LicenseStates"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating whether the user is a service principal.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The user id as found in Veracity Identity for profile licenses and the group id for group licenses",
            "format": "uuid",
            "nullable": true
          },
          "licenseType": {
            "$ref": "#/components/schemas/EntityTypes"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Indicates that the user can add licenses to other users for this application.",
            "nullable": true,
            "example": false
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application. This is the same as the serviceId in developer.",
            "format": "uuid"
          },
          "applicationInstanceId": {
            "type": "string",
            "description": "The ID of the instance of an application in tenant.",
            "format": "uuid"
          },
          "accessHubProfileUrl": {
            "type": "string",
            "description": "The url to the member profile page in access hub, this is only valid for profile licenses",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35/profiles/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "accessHubGroupUrl": {
            "type": "string",
            "description": "The url to the group page in access hub, only valid for group licenses",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users_groups/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "accessHubApplicationUrl": {
            "type": "string",
            "description": "The url to the application page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/applications/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "groupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "applicationUrl": {
            "type": "string",
            "description": "The url to the application page in including tenant id if not system tenant",
            "nullable": true,
            "example": "https://myaplication.mycompany?tenant_id=ae0c841b-7a2a-4144-cb13-ac0224c084ce"
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "ElementRightTreeResponse": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElementRightTreeResponse"
            },
            "nullable": true
          },
          "elementId": {
            "type": "string",
            "nullable": true
          },
          "elementExternalId": {
            "type": "string",
            "nullable": true
          },
          "isDirect": {
            "type": "boolean",
            "nullable": true
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "accessHubElementUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "objectId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the object¨. Profile id for profile licenses and the group id for group licenses",
            "format": "uuid",
            "nullable": true
          },
          "accessLevel": {
            "type": "string",
            "description": "Indicates the accessLevel of the uses in the application instance, only applicable for applications with tenant wide roles. eg:  'owner', 'contributor', 'reader'.",
            "nullable": true,
            "example": "data_reader"
          },
          "isLocked": {
            "type": "boolean",
            "description": "when the isLocked is true, the user cannot be removed from the application instance. The user is normally a service principal that comes with the application and is required for the application to work. This does not count towards the license count.",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "The email for profile licenses.",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "state": {
            "$ref": "#/components/schemas/LicenseStates"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating whether the user is a service principal.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The user id as found in Veracity Identity for profile licenses and the group id for group licenses",
            "format": "uuid",
            "nullable": true
          },
          "licenseType": {
            "$ref": "#/components/schemas/EntityTypes"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Indicates that the user can add licenses to other users for this application.",
            "nullable": true,
            "example": false
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application. This is the same as the serviceId in developer.",
            "format": "uuid"
          },
          "applicationInstanceId": {
            "type": "string",
            "description": "The ID of the instance of an application in tenant.",
            "format": "uuid"
          },
          "accessHubProfileUrl": {
            "type": "string",
            "description": "The url to the member profile page in access hub, this is only valid for profile licenses",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35/profiles/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "accessHubGroupUrl": {
            "type": "string",
            "description": "The url to the group page in access hub, only valid for group licenses",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users_groups/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "accessHubApplicationUrl": {
            "type": "string",
            "description": "The url to the application page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/applications/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "groupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "applicationUrl": {
            "type": "string",
            "description": "The url to the application page in including tenant id if not system tenant",
            "nullable": true,
            "example": "https://myaplication.mycompany?tenant_id=ae0c841b-7a2a-4144-cb13-ac0224c084ce"
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "ElementTreeResponse": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElementTreeResponse"
            },
            "description": "List of child elements.",
            "nullable": true
          },
          "elementId": {
            "type": "string",
            "description": "The ID of the application element.",
            "format": "uuid",
            "example": "1deb5f9f-f438-4665-9f11-62e86737f7d1"
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application. This is the same as the serviceId in developer.",
            "format": "uuid",
            "example": "1deb5f9f-f438-4665-9f11-62e86737f7d1"
          },
          "applicationInstanceId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the application.",
            "format": "uuid",
            "example": "89da7932-cc2a-4eaa-acd4-b34e8e2e5c35"
          },
          "elementExternalId": {
            "type": "string",
            "description": "the application's reference for the element. This is the same as the element id in the application.",
            "nullable": true,
            "example": "workspace1"
          },
          "elementType": {
            "type": "string",
            "description": "the type of the element, used to describe the element in the application.",
            "nullable": true,
            "example": "Workspace"
          },
          "elementTypeIconUrl": {
            "type": "string",
            "description": "The url element type icon. This is used to display the element in the application and access hub.",
            "format": "uri",
            "nullable": true,
            "example": "https://cdn.veracity.com/assets/workspace.icon.png"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Capability"
            },
            "description": "Additional capabilities enabled for the application element.",
            "nullable": true
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isChild": {
            "type": "boolean"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "elementLevel": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "accessHubElementUrl": {
            "type": "string",
            "description": "Gets or sets the URL for accessing the hub element associated with this response.",
            "format": "uri",
            "nullable": true
          },
          "accessHubApplicationUrl": {
            "type": "string",
            "description": "Gets or sets the URL for accessing the application in the Access Hub.",
            "format": "uri",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "EntityTypes": {
        "enum": [
          "profile",
          "userGroup"
        ],
        "type": "string",
        "description": "Represents the type of entity."
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "This is the correlation id for the request, it can be used to track the request in the logs. You can control the value by setting the request-id header in the request",
            "nullable": true,
            "readOnly": true
          },
          "supportCode": {
            "type": "string",
            "description": "this will be deprecated in the future, use CorrelationId instead",
            "nullable": true,
            "readOnly": true
          },
          "subCode": {
            "type": "integer",
            "description": "an additional code that can be used to identify the error, pass this code to the support team when reporting the error",
            "format": "int32",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "A human readable message that describes the error",
            "nullable": true,
            "readOnly": true
          },
          "information": {
            "type": "string",
            "description": "Additional information about the error",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Describes an error that occured during the processing of a request"
      },
      "ExtensionProperty": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the property. Properties are case sensitive and shall use {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true,
            "example": "vtmd_vesselList"
          },
          "value": {
            "type": "string",
            "description": "The value of the property.",
            "nullable": true,
            "example": "7911545;7911533"
          }
        },
        "additionalProperties": false,
        "description": "Represents an extension property."
      },
      "GlobalUserDetailsResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The veracity UserId for the user.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "the users display name.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "email": {
            "type": "string",
            "description": "the users email address",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "the users phone number",
            "nullable": true,
            "example": "+61 0765 8648 4410"
          },
          "firstName": {
            "type": "string",
            "description": "the users first name",
            "nullable": true,
            "example": "Olaf"
          },
          "lastName": {
            "type": "string",
            "description": "the users last name",
            "nullable": true,
            "example": "Jensen"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Indicates if the user is a service principal or not.",
            "example": false
          },
          "isActivated": {
            "type": "boolean",
            "description": "indicates if the user is activated or not.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the response containing user details."
      },
      "GroupResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of the group",
            "nullable": true,
            "example": "LNG_Operations"
          },
          "groupId": {
            "type": "string",
            "description": "The ID of the group.",
            "format": "uuid"
          },
          "accessHubGroupUrl": {
            "type": "string",
            "description": "The url to the group page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users_groups/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a response containing information about a group.",
        "readOnly": true
      },
      "HealthStateTypes": {
        "enum": [
          "Pass",
          "Warn",
          "Fail"
        ],
        "type": "string"
      },
      "HealthStatus": {
        "type": "object",
        "properties": {
          "checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DependencyState"
            },
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/HealthStateTypes"
          },
          "serviceId": {
            "type": "string",
            "nullable": true
          },
          "releaseId": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "output": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "information": {
            "type": "string",
            "nullable": true
          },
          "subCode": {
            "type": "integer",
            "format": "int32"
          },
          "supportCode": {
            "type": "string",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "InstallmentState": {
        "enum": [
          "Pending",
          "Active"
        ],
        "type": "string",
        "description": "Represents the state of the application installment."
      },
      "IsMemberResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isDirect": {
            "type": "boolean"
          },
          "througGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JsonPatchDocument": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Operation"
        },
        "description": "Array of operations to perform"
      },
      "LicenseRequest": {
        "required": [
          "entityId",
          "licenseType"
        ],
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "The veracity user id for profile members and the group id for group members",
            "format": "uuid"
          },
          "licenseType": {
            "$ref": "#/components/schemas/EntityTypes"
          },
          "accessLevel": {
            "type": "string",
            "description": "Optional: used when provisioning applications that support accessLevels",
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Grant the users to manage licenses for this application/element. Only used for V1 access levels in the Veracity platform. This will be removed as the legacy applications upgrades to the new model.",
            "nullable": true
          },
          "canAddUsersToTenant": {
            "type": "boolean",
            "description": "Grant the user the ability to add users to the tenant"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties. Extra information kept on the object.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a license request."
      },
      "LicenseResponse": {
        "type": "object",
        "properties": {
          "nullLicense": {
            "type": "boolean",
            "description": "A null-license is a license that don't grant any application wide rights, the effective right must be calculated based on the element rights."
          },
          "isApplicationAdmin": {
            "type": "boolean",
            "nullable": true
          },
          "objectId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the object¨. Profile id for profile licenses and the group id for group licenses",
            "format": "uuid",
            "nullable": true
          },
          "accessLevel": {
            "type": "string",
            "description": "Indicates the accessLevel of the uses in the application instance, only applicable for applications with tenant wide roles. eg:  'owner', 'contributor', 'reader'.",
            "nullable": true,
            "example": "data_reader"
          },
          "isLocked": {
            "type": "boolean",
            "description": "when the isLocked is true, the user cannot be removed from the application instance. The user is normally a service principal that comes with the application and is required for the application to work. This does not count towards the license count.",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "The email for profile licenses.",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "state": {
            "$ref": "#/components/schemas/LicenseStates"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating whether the user is a service principal.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The user id as found in Veracity Identity for profile licenses and the group id for group licenses",
            "format": "uuid",
            "nullable": true
          },
          "licenseType": {
            "$ref": "#/components/schemas/EntityTypes"
          },
          "applicationId": {
            "type": "string",
            "description": "The ID of the application. This is the same as the serviceId in developer.",
            "format": "uuid"
          },
          "applicationInstanceId": {
            "type": "string",
            "description": "The ID of the instance of an application in tenant.",
            "format": "uuid"
          },
          "accessHubProfileUrl": {
            "type": "string",
            "description": "The url to the member profile page in access hub, this is only valid for profile licenses",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35/profiles/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "accessHubGroupUrl": {
            "type": "string",
            "description": "The url to the group page in access hub, only valid for group licenses",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users_groups/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "accessHubApplicationUrl": {
            "type": "string",
            "description": "The url to the application page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/applications/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "groupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "applicationUrl": {
            "type": "string",
            "description": "The url to the application page in including tenant id if not system tenant",
            "nullable": true,
            "example": "https://myaplication.mycompany?tenant_id=ae0c841b-7a2a-4144-cb13-ac0224c084ce"
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "LicenseStates": {
        "enum": [
          "Pending",
          "Active"
        ],
        "type": "string",
        "description": "Represents the license states."
      },
      "ManagementModes": {
        "enum": [
          "Legacy",
          "VeracityManaged",
          "Hybrid",
          "ServiceManaged"
        ],
        "type": "string",
        "description": "Represents the different management modes for the application."
      },
      "MemberResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of the group member",
            "nullable": true,
            "example": "LNG_Captains"
          },
          "userId": {
            "type": "string",
            "description": "The veracity user id for profile members and the group id for group members",
            "format": "uuid",
            "nullable": true,
            "example": null
          },
          "objectId": {
            "type": "string",
            "description": "The profile id for profile members and the group id for group members",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "description": "Only used for profile entities",
            "nullable": true,
            "example": null
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating if the user is a service principal",
            "nullable": true,
            "example": false
          },
          "memberType": {
            "$ref": "#/components/schemas/EntityTypes"
          },
          "isGroupAdmin": {
            "type": "boolean",
            "description": "Indicates that the user can add/remove members of this group.",
            "example": false
          },
          "groupId": {
            "type": "string",
            "description": "The ID of the group.",
            "format": "uuid"
          },
          "accessHubGroupUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "accessHubProfileUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "accessHubMemberGroupUrl": {
            "type": "string",
            "description": "Get the url to the group member page in access hub, this is only valid for group members",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users_groups/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a member response.",
        "readOnly": true
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The entity type.",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "description": "The creator.",
            "nullable": true,
            "readOnly": true
          },
          "createDate": {
            "type": "string",
            "description": "The creation date.",
            "format": "date-time",
            "readOnly": true
          },
          "modifiedBy": {
            "type": "string",
            "description": "The modifier.",
            "nullable": true,
            "readOnly": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "The modification date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata information for the entities."
      },
      "Operation": {
        "type": "object",
        "properties": {
          "op": {
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "from": {
            "type": "string"
          }
        },
        "description": "An operation to perform against a resource property. eg update the 'name' property of a resource",
        "externalDocs": {
          "description": "JSON Patch Operation",
          "url": "https://tools.ietf.org/html/rfc6902"
        }
      },
      "PagedApplicationResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationResponse"
            },
            "description": "The items in the current page",
            "nullable": true
          },
          "pageCount": {
            "type": "integer",
            "description": "The number of items in the current page",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of items in the result set. This value is only present if the result set is paged.",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "nextPageUrl": {
            "type": "string",
            "description": "Contains the relative url to the next page of the result set. The url is only present if there are more results to fetch. It assumes a constant page size.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paged list of items. This class is used to represent the result of a paged query."
      },
      "PagedElementResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElementResponse"
            },
            "description": "The items in the current page",
            "nullable": true
          },
          "pageCount": {
            "type": "integer",
            "description": "The number of items in the current page",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of items in the result set. This value is only present if the result set is paged.",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "nextPageUrl": {
            "type": "string",
            "description": "Contains the relative url to the next page of the result set. The url is only present if there are more results to fetch. It assumes a constant page size.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paged list of items. This class is used to represent the result of a paged query."
      },
      "PagedGroupResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupResponse"
            },
            "description": "The items in the current page",
            "nullable": true
          },
          "pageCount": {
            "type": "integer",
            "description": "The number of items in the current page",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of items in the result set. This value is only present if the result set is paged.",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "nextPageUrl": {
            "type": "string",
            "description": "Contains the relative url to the next page of the result set. The url is only present if there are more results to fetch. It assumes a constant page size.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paged list of items. This class is used to represent the result of a paged query."
      },
      "PagedUserOrGroup": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserOrGroup"
            },
            "description": "The items in the current page",
            "nullable": true
          },
          "pageCount": {
            "type": "integer",
            "description": "The number of items in the current page",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of items in the result set. This value is only present if the result set is paged.",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "nextPageUrl": {
            "type": "string",
            "description": "Contains the relative url to the next page of the result set. The url is only present if there are more results to fetch. It assumes a constant page size.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paged list of items. This class is used to represent the result of a paged query."
      },
      "PagedUserResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": "The items in the current page",
            "nullable": true
          },
          "pageCount": {
            "type": "integer",
            "description": "The number of items in the current page",
            "format": "int32",
            "readOnly": true
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of items in the result set. This value is only present if the result set is paged.",
            "format": "int64",
            "nullable": true,
            "readOnly": true
          },
          "nextPageUrl": {
            "type": "string",
            "description": "Contains the relative url to the next page of the result set. The url is only present if there are more results to fetch. It assumes a constant page size.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paged list of items. This class is used to represent the result of a paged query."
      },
      "PolicyErrorResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "violatedPolicies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "subscriptionMissing": {
            "type": "boolean",
            "nullable": true,
            "readOnly": true
          },
          "correlationId": {
            "type": "string",
            "description": "This is the correlation id for the request, it can be used to track the request in the logs. You can control the value by setting the request-id header in the request",
            "nullable": true,
            "readOnly": true
          },
          "supportCode": {
            "type": "string",
            "description": "this will be deprecated in the future, use CorrelationId instead",
            "nullable": true,
            "readOnly": true
          },
          "subCode": {
            "type": "integer",
            "description": "an additional code that can be used to identify the error, pass this code to the support team when reporting the error",
            "format": "int32",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "A human readable message that describes the error",
            "nullable": true,
            "readOnly": true
          },
          "information": {
            "type": "string",
            "description": "Additional information about the error",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TenantResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name of the tenant.",
            "nullable": true,
            "example": "Demo Corp"
          },
          "legalEntityName": {
            "type": "string",
            "description": "The legal entity name.",
            "nullable": true,
            "example": "Demo Corp"
          },
          "dnvCustomerId": {
            "type": "string",
            "description": "The DNV customer ID.",
            "nullable": true,
            "example": "mpbe0c84cb7a4a4114aa179c0224b084cf"
          },
          "legalEntityId": {
            "type": "string",
            "description": "The legal entity ID.",
            "nullable": true,
            "example": "mpbe0c84cb7a4a4114aa179c0224b084cf"
          },
          "tenantType": {
            "type": "string",
            "description": "The tenant type.",
            "nullable": true,
            "example": "veracity_private"
          },
          "logoUri": {
            "type": "string",
            "description": "The logo URI.",
            "format": "uri",
            "nullable": true,
            "example": "https://veracitycdn.blob.core.windows.net/digisales/ttp/logo/TT/oT+3sZIt2mTL/mvCXl4OV5nHaJTGEBTwayCo86CA.png"
          },
          "groupsIsActivated": {
            "type": "boolean",
            "description": "Value indicating if group is activated",
            "example": true
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a response containing tenant information.",
        "readOnly": true
      },
      "TenantResponseEx": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The user id of the user that used in the query for the tenant",
            "format": "uuid"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Indicates if the user that is used in the query is an admin of the tenant",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The display name of the tenant.",
            "nullable": true,
            "example": "Demo Corp"
          },
          "legalEntityName": {
            "type": "string",
            "description": "The legal entity name.",
            "nullable": true,
            "example": "Demo Corp"
          },
          "dnvCustomerId": {
            "type": "string",
            "description": "The DNV customer ID.",
            "nullable": true,
            "example": "mpbe0c84cb7a4a4114aa179c0224b084cf"
          },
          "legalEntityId": {
            "type": "string",
            "description": "The legal entity ID.",
            "nullable": true,
            "example": "mpbe0c84cb7a4a4114aa179c0224b084cf"
          },
          "tenantType": {
            "type": "string",
            "description": "The tenant type.",
            "nullable": true,
            "example": "veracity_private"
          },
          "logoUri": {
            "type": "string",
            "description": "The logo URI.",
            "format": "uri",
            "nullable": true,
            "example": "https://veracitycdn.blob.core.windows.net/digisales/ttp/logo/TT/oT+3sZIt2mTL/mvCXl4OV5nHaJTGEBTwayCo86CA.png"
          },
          "groupsIsActivated": {
            "type": "boolean",
            "description": "Value indicating if group is activated",
            "example": true
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "UserDetailsResponse": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true,
            "example": "Olaf"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true,
            "example": "Jensen"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user.",
            "nullable": true,
            "example": "+61 0765 8648 4410"
          },
          "profileId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the user (across all tenants)¨.",
            "format": "uuid"
          },
          "accessHubProfileUrl": {
            "type": "string",
            "description": "Get the url to the member profile page in access hub, this is only valid for profile members",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com/users/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35/profiles/89da7932-cc2a-4eaa-acd4-b34e8e2e5c35?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "profilePictureUrl": {
            "type": "string",
            "description": "Returns the relative profile picture URL of the user if the middleware is added to the web application.",
            "format": "uri",
            "nullable": true,
            "readOnly": true,
            "example": "/profile/picture/12345678-1234-1234-1234-123456789012"
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user.",
            "format": "uuid"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating whether the user is a service principal.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a response containing user details.",
        "readOnly": true
      },
      "UserLicenseResponse": {
        "type": "object",
        "properties": {
          "accessLevel": {
            "type": "string",
            "description": "The access level of the license. This is only relevant for applications that support access levels. Access levels can be configured in developer.veracity.com.",
            "nullable": true,
            "example": "data_reader"
          },
          "profileId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the user (across all tenants)¨.",
            "format": "uuid"
          },
          "isLocked": {
            "type": "boolean",
            "description": "the isLocked is true, the user cannot be removed from the tenant. The user is normally a service principal that comes with one of the applications and is required for the applications to work."
          },
          "accessHubProfileUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "description": "Returns the relative profile picture URL of the user if the middleware is added to the web application.",
            "format": "uri",
            "nullable": true,
            "readOnly": true,
            "example": "/profile/picture/12345678-1234-1234-1234-123456789012"
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user.",
            "format": "uuid"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating whether the user is a service principal.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "UserOrGroup": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address if the item is a user",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The id of the user if the item is a user",
            "format": "uuid",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "The id of the group if the item is a group",
            "format": "uuid",
            "nullable": true
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Indicates if the user is a service principal, null if the item is a group",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string",
            "description": "The globally unique identifier (GUID) for the user (across all tenants)¨.",
            "format": "uuid"
          },
          "isLocked": {
            "type": "boolean",
            "description": "the isLocked is true, the user cannot be removed from the tenant. The user is normally a service principal that comes with one of the applications and is required for the applications to work."
          },
          "accessHubProfileUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "description": "Returns the relative profile picture URL of the user if the middleware is added to the web application.",
            "format": "uri",
            "nullable": true,
            "readOnly": true,
            "example": "/profile/picture/12345678-1234-1234-1234-123456789012"
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user.",
            "format": "uuid"
          },
          "isServicePrincipal": {
            "type": "boolean",
            "description": "Value indicating whether the user is a service principal.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionProperty"
            },
            "description": "The extension properties of the tenant entity. extension properties are case-sensitive and shall user {appPrefix}_{propertyName} format, appPrefixes are defined in developer.veracity.com.",
            "nullable": true
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "UserRoles": {
        "type": "object",
        "properties": {
          "isTenantAdmin": {
            "type": "boolean",
            "description": "Indicates if the user is a full administrator of the tenant"
          },
          "isUserAdmin": {
            "type": "boolean",
            "description": "Indicates if the user is a user administrator in the tenant"
          },
          "adminOfApplications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminItem"
            },
            "description": "a list of applications the user is an admin of",
            "nullable": true
          },
          "adminOfGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminItem"
            },
            "description": "a list of groups the user is an admin of",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "nullable": true,
            "example": "olaf.jensen@democorp.com"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the tenant entity.",
            "nullable": true,
            "example": "Jensen, Olaf"
          },
          "tenantId": {
            "type": "string",
            "description": "The ID of the tenant.",
            "format": "uuid"
          },
          "accessHubTenantHomeUrl": {
            "type": "string",
            "description": "get the url to the tenants home page in access hub",
            "format": "uri",
            "nullable": true,
            "example": "https://accesshub.veracity.com?tenant_id=be0c84cb-7a4a-4114-aa17-9c0224b084cf"
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of system generated tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "EC",
              "premium",
              "archived"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Gets or sets the list of tags associated with the tenant entity.",
            "nullable": true,
            "example": [
              "customer",
              "energy",
              "partner"
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represent the user admin roles within the tenant.",
        "readOnly": true
      },
      "patchOp": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://logintest.veracity.com/ed815121-cdfa-4097-b524-e2b23cd36eb6/oauth2/v2.0/authorize",
            "scopes": {
              "https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/user_impersonation": "user_impersonation",
              "https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/resource_administration": "resource_administration",
              "https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/manage_services": "manage_services"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/user_impersonation",
        "https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/resource_administration",
        "https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/manage_services"
      ]
    }
  ]
}
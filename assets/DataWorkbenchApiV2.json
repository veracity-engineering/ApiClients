{
  "openapi": "3.0.1",
  "info": {
    "title": "DW Gateway",
    "description": "# What is Data Workbench?\r\nData Workbench allows you to:\r\n* Get access to external data from different sources, f.ex. emission data, that can be used in your applications.\r\n* Securely share your data and use data shared by others.\r\n* Monitor who uses your data, limit how long it is available, and revoke access to it.\r\n* Build dashboards and reports on top of the data.\r\n* Work with scalable data streams and self-defined non-time-series data streams.\r\n\r\nFor details, see [Data Workbench on Marketplace](https://store.veracity.com/b692-2dd3fb6b0225-workbench).\r\n\r\n## Tenants and workspaces\r\nEach company or a B2C customer has one tenant in Data Workbench. A tenant can have multiple workspaces. Each workspace has members. Workspace members can be admins or readers.\r\n\r\n## Data sets\r\nTo see data sets available in your workspace, go to the **Data Catalogue** tab. \r\n\r\nThe **Predefined data sets** tab shows data sets that are queried by connections from their corresponding source systems. These data sets are inherited, and you cannot modify them. However, you can use them to create new data sets.\r\n\r\nThe **Created data sets** tab shows the data sets that workspace members created.\r\n\r\nEach data set has:\r\n* Title and description.\r\n* Column picker \u2013 show or hide table columns.\r\n* Filters - filter data.\r\n* Save option \u2013 save your changes.\r\n* Share option \u2013 share a data set with a user, and set for how long you grant them access.\r\n\r\nTo see data sets you can use, go to [My data](https://data.veracity.com/containers). \r\nTo see how to manage your data on Data Fabric, go [here](https://help-center.veracity.com/en/collections/2429587-managing-your-data-on-data-fabric).",
    "version": "v2"
  },
  "servers": [
    {
      "url": "https://tst-api.dw.veracity.com/gateway/api/v2"
    }
  ],
  "paths": {
    "/tenants/{tenantId}/users/invite": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Invite user to tenant",
        "description": "Sample request for user invite:\r\n\r\n    POST tenants/{tenantId:guid}/users/invite\r\n    {\r\n        \u0022email\u0022: \u0022email\u0022,\r\n        \u0022role\u0022: \u0022reader\u0022 or \u0022administrator\u0022\r\n    }",
        "operationId": "Tenants_InviteUserToTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInviteDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return result of user invite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInviteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users/roles": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get users with role scopes in specified tenant",
        "description": "Sample response for paginated result of user role scopes info:\r\n\r\n    {\r\n    \t\u0022result\u0022: [\r\n    \t\t{\r\n    \t\t\t\u0022userId\u0022: \u0022ddbf7526-abc3-45e2-bfd9-a2223a431a12\u0022,\r\n    \t\t\t\u0022email\u0022: \u0022Jane.Yao@dnv.com\u0022,\r\n    \t\t\t\u0022name\u0022: \u0022Jane Yao\u0022,\r\n    \t\t\t\u0022isServicePrincipal\u0022: false,\r\n    \t\t\t\u0022roleScope\u0022: {\r\n    \t\t\t\t\u0022role\u0022: \u0022administrator\u0022,\r\n    \t\t\t\t\u0022scopeType\u0022: \u0022Tenant\u0022,\r\n    \t\t\t\t\u0022scopeRef\u0022: \u0022c39867d7-a4c0-4ae2-8281-7d45936a3bec\u0022\r\n    \t\t\t}\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\u0022userId\u0022: \u0022e574383d-994e-4a3d-9a7d-5d76755552e1\u0022,\r\n    \t\t\t\u0022email\u0022: \u0022Jork.Cao@dnv.com\u0022,\r\n    \t\t\t\u0022name\u0022: \u0022Jork Cao\u0022,\r\n    \t\t\t\u0022isServicePrincipal\u0022: false,\r\n    \t\t\t\u0022roleScope\u0022: {\r\n    \t\t\t\t\u0022role\u0022: \u0022reader\u0022,\r\n    \t\t\t\t\u0022scopeType\u0022: \u0022Tenant\u0022,\r\n    \t\t\t\t\u0022scopeRef\u0022: \u0022c39867d7-a4c0-4ae2-8281-7d45936a3bec\u0022\r\n    \t\t\t}\r\n    \t\t}\r\n    \t],\r\n    \t\u0022pageIndex\u0022: 1,\r\n    \t\u0022pageSize\u0022: 2,\r\n    \t\u0022totalCount\u0022: 65,\r\n    \t\u0022totalPages\u0022: 33\r\n    }",
        "operationId": "Tenants_QueryTenantUserRoleScopes",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id which you want to get user role scopes",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Index of the current page (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated result of users with role scopes"
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/users/{userId}/role": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create or update user role of tenant",
        "description": "Sample request:\r\n\r\n    {\r\n        \u0022role\u0022: \u0022reader\u0022    //\u0022reader\u0022 or \u0022administrator\u0022\r\n    }\r\n    \r\nSample response:\r\n\r\n    {\r\n         \u0022roleScopeId\u0022: \u002200c3a436-433b-45e6-ba2a-dbb44cfa4100\u0022,\r\n         \u0022userId\u0022: \u002236f17b7f-3829-4e61-8106-d9047bd04dc4\u0022,      //Id of User\r\n         \u0022scopeRef\u0022: \u00227794cb5a-403e-4f87-bd80-f7f35a34f8fb\u0022,    //Id of tenant\r\n         \u0022scopeType\u0022: \u0022Tenant\u0022,\r\n         \u0022roleName\u0022: \u0022reader\u0022\r\n    }",
        "operationId": "Tenants_CreateOrUpdateTenantUserRole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "Tenant id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateUserRoleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns updated user role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleScopeGetDto"
                }
              }
            }
          },
          "201": {
            "description": "Returns created user role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleScopeGetDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Revoke user access to a specified tenant",
        "operationId": "Tenants_RevokeTenantUserRole",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The specified tenant id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id whose access rights will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns http status code 200"
          },
          "400": {
            "description": "Failed"
          }
        }
      }
    },
    "/tenants/{tenantId}/workspaces": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get workspace list which the current user has access to for a specified tenant",
        "description": "Sample response for Workspace list info:\r\n\r\n    [\r\n        {\r\n            \u0022id\u0022: \u00226113fcaa-a29e-4804-b9a9-dac331676008\u0022,\r\n            \u0022name\u0022: \u0022Workspace Name1\u0022,\r\n            \u0022description\u0022: \u0022Workspace created by test1\u0022,\r\n            \u0022region\u0022: \u0022EU\u0022\r\n        },\r\n        {\r\n            \u0022id\u0022: \u002289a1fcaa-D43e-9802-c879-cad886785129\u0022,\r\n            \u0022name\u0022: \u0022Workspace Name2\u0022,\r\n            \u0022description\u0022: \u0022Workspace created by test2\u0022,\r\n            \u0022region\u0022: \u0022EU\u0022\r\n        }\r\n    ]",
        "operationId": "Tenants_RetrieveAllWorkspaces",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant id of the workspaces that you want to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of workspace in specified tenant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkspaceDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Add a new workspace to the specified tenant",
        "description": "Sample response for created workspace info:\r\n\r\n    {\r\n        \u0022id\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n        \u0022name\u0022: \u0022SHANGHAI\u0022,\r\n        \u0022description\u0022: \u0022WS SHANGHAI\u0022,\r\n        \u0022region\u0022: \u0022EU\u0022\r\n    }",
        "operationId": "Tenants_CreateWorkspaceV2",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceCreationDtoV2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns created workspace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get workspace by id",
        "description": "Sample response for Workspace info:\r\n\r\n    {\r\n        \u0022id\u0022: \u00226113fcaa-a29e-4804-b9a9-dac331676008\u0022,\r\n        \u0022name\u0022: \u0022Workspace Name1\u0022,\r\n        \u0022description\u0022: \u0022Workspace created by test1\u0022,\r\n        \u0022region\u0022: \u0022EU\u0022\r\n    }",
        "operationId": "Tenants_RetrieveWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id of the workspace that you want to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns workspace with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Tenants"
        ],
        "summary": "Update workspace",
        "description": "Sample response for updated workspace info:\r\n\r\n    {\r\n        \u0022id\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n        \u0022name\u0022: \u0022SHANGHAI\u0022,\r\n        \u0022description\u0022: \u0022WS SHANGHAI\u0022,\r\n        \u0022region\u0022: \u0022EU\u0022\r\n    }",
        "operationId": "Tenants_PatchWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "Workspace id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "Workspace update information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspacePatchDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns updated workspace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/analysis/executions": {
      "post": {
        "tags": [
          "Analysis"
        ],
        "summary": "Execute Python on a dataset, upon completion a notification will be triggered to user",
        "description": "Sample request For Execute Python:\r\n            \r\n    POST {workspaceId}/Analysis/executions\r\n            {\r\n                \u0022datasetIds\u0022: [\r\n                    \u00223fa85f64-5717-4562-b3fc-2c963f66afa6\u0022\r\n                ],\r\n                \u0022provider\u0022: \u0022string\u0022,\r\n                \u0022script\u0022: \u0022string\u0022,\r\n                \u0022outputDatasetName\u0022: \u0022string\u0022\r\n            }",
        "operationId": "Analysis_ExecutePython",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionWriteDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Execution Started"
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/dataorders": {
      "post": {
        "tags": [
          "DataOrders"
        ],
        "summary": "Create Data Order",
        "description": "Sample request For GPM Provider:\r\n            \r\n    POST {workspaceId}/DataOrder\r\n            {\r\n               \u0022datasetName\u0022:\u0022string\u0022,\r\n               \u0022providerType\u0022:\u0022GPM\u0022,\r\n               \u0022properties\u0022:{\r\n                \u0022portfolioId\u0022 : \u0022b259ccb2-5c07-46f8-afa2-ed0f21d912e4\u0022,\r\n            \t\u0022siteId\u0022: \u0022EnergySite\u0022,\r\n            \t\u0022deviceParameters\u0022: [\r\n            \t\t{\r\n            \t\t\t\u0022deviceIds\u0022: [\r\n            \t\t\t\t\u00221234-5\u0022,\r\n            \t\t\t\t\u0022b1c80fc9-f548-47c7-a8a0-d41c635f6949\u0022\r\n            \t\t\t],\r\n            \t\t\t\u0022parameters\u0022: [\r\n            \t\t\t\t{\r\n            \t\t\t\t\t\u0022Name\u0022: \u0022Energy\u0022,\r\n            \t\t\t\t\t\u0022Aggregation\u0022: \u0022DEFAULT\u0022\r\n            \t\t\t\t},\r\n            \t\t\t\t{\r\n            \t\t\t\t\t\u0022Name\u0022: \u0022Power\u0022,\r\n            \t\t\t\t\t\u0022Aggregation\u0022: \u0022LAST\u0022\r\n            \t\t\t\t}\r\n            \t\t\t]\r\n            \t\t}\r\n            \t],\r\n            \t\u0022granularity\u0022: 1,\r\n            \t\u0022granularityUnit\u0022: \u0022Hour\u0022,\r\n            \t\u0022interval\u0022: {\r\n            \t\t\u0022start\u0022: \u00222023-01-01T15:00:00\u0022,\r\n            \t\t\u0022end\u0022: \u00222023-01-01T20:00:00\u0022\r\n               }\r\n             }\r\n         }",
        "operationId": "DataOrders_CreateOrder",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderWriteDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns Created Data Order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/dataorders/{orderId}": {
      "get": {
        "tags": [
          "DataOrders"
        ],
        "summary": "Get Order By Id",
        "operationId": "DataOrders_GetOrder",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Data Order Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/datasets/documents/download": {
      "post": {
        "tags": [
          "Datasets"
        ],
        "summary": "Download Statement of Compliance PDF file based on workspaceId, datasetId and documentId",
        "operationId": "Datasets_SocDownload",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentRefDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns Statement of Compliance PDF file"
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/datasets/query": {
      "post": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get all data sets for a specific workspace. Supports pagination, enhanced filtering and sorting.",
        "operationId": "Datasets_GetDataCatalogsQuery",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCatalogQueryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns DataSets Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCatalogReadDtoV2PaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/datasets/{datasetId}": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Gets a specific data set by Workspace Id and DataSet Id",
        "operationId": "Datasets_GetDataCatalogByIdV2",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "datasetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DataSet Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCatalogReadDtoV2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/datasets/{datasetId}/ledger": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Gets Dataset Ledger based on workspaceId and datasetId",
        "operationId": "Datasets_GetDataCatalogLedger",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "datasetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Ledgers Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerDtoPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/datasets/{datasetId}/query": {
      "post": {
        "tags": [
          "Datasets"
        ],
        "summary": "Query for data by Workspace Id and DataSet Id with optional filters",
        "operationId": "Datasets_QueryDataSet",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "datasetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuerySpecificationV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns DataSet Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/datasets/{datasetId}/sas": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get a readonly SAS token for a given workspace dataset",
        "operationId": "Datasets_GetDatasetFolderReadonlyToken",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "datasetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "durationInMinutes",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SASType"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/ingest": {
      "post": {
        "tags": [
          "Ingest"
        ],
        "summary": "Get data ingest endpoint for current workspace",
        "description": "Sample request\r\n\r\n    dfs:\r\n        POST {workspaceId}/Ingest?type=dfs\r\n        POST {workspaceId}/Ingest?datasetId=be072260-78d9-4e14-ac16-942284026577\u0026type=dfs\r\n    blob:\r\n        POST {workspaceId}/Ingest?type=blob\r\n        POST {workspaceId}/Ingest?datasetId=be072260-78d9-4e14-ac16-942284026577\u0026type=blob\r\n\r\nSample response\r\n    \r\n    dfs:\r\n        https://{domain}.dfs.core.windows.net/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/a16d1d0d-2b92-4e71-b2a1-2931ce61c863/Raw?sv=2023-11-03\u0026spr=https\u0026st=2024-07-12T01%3A55%3A12Z\u0026se=2024-07-12T02%3A10%3A12Z\u0026sr=d\u0026sp=cw\u0026sdd=2\u0026sig=%2BaxD8B250vI0bJn9u8KHRv7duvLjqXlhOfVBOCi5Cqo%3D\r\n    blob:\r\n        https://{domain}.blob.core.windows.net/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/f5a0ef4c-e76f-4d1c-9b0d-947c8b7923ff/Raw?sv=2023-11-03\u0026spr=https\u0026st=2024-07-12T01%3A56%3A01Z\u0026se=2024-07-12T02%3A11%3A01Z\u0026sr=d\u0026sp=cw\u0026sdd=2\u0026sig=EzfaySpQ5hAN2eLEAPp4vhRIyvMUDikD4iFKDmagpKM%3D",
        "operationId": "Ingest_GenerateByodStorage",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "datasetId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/SASType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns SAS token for created folder, SAS token will be valid for only 15 mins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/ingest/{requestId}/status": {
      "get": {
        "tags": [
          "Ingest"
        ],
        "summary": "Retrieve the content of the BYOD status file",
        "description": "Sample Response\r\n\r\n    {\r\n        \u0022status\u0022: \u0022Started\u0022,\r\n        \u0022correlationId\u0022: \u0022203bfa0b-86c3-4467-a3b0-d2eb415a96cc\u0022,\r\n        \u0022fileName\u0022: \u0022TestUpload.csv\u0022\r\n    }\r\n    \r\n    {\r\n        \u0022status\u0022: \u0022Completed\u0022,\r\n        \u0022correlationId\u0022: \u0022203bfa0b-86c3-4467-a3b0-d2eb415a96cc\u0022,\r\n        \u0022fileName\u0022: \u0022TestUpload.csv\u0022,\r\n        \u0022dataSetName\u0022: \u0022TestUploadLILN\u0022\r\n    }",
        "operationId": "Ingest_GetStatusLog",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "requestId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Status Log",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusLogModel"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/ledger": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Gets Workspace Ledger based on workspaceId",
        "operationId": "Ledger_GetWorkspaceLedger",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Ledgers Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerDtoPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/revokesastoken": {
      "delete": {
        "tags": [
          "Datasets"
        ],
        "summary": "Revoke all SAS tokens for the workspace container",
        "operationId": "Datasets_RevokeAllSasTokensForContainer",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/revokesastoken/{policyName}": {
      "delete": {
        "tags": [
          "Datasets"
        ],
        "summary": "Revoke a SAS token for the workspace container",
        "operationId": "Datasets_RevokeSasTokenForContainer",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "policyName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/saspolicies": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get a SAS policies for the workspace container",
        "operationId": "Datasets_GetSasPoliciesForContainer",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SasPolicyReadDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Gets a list of workspace schemas for a specific workspace",
        "operationId": "Schemas_GetWorkspaceSchemas",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "includeDefaultSchemaVersion",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Schemas Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaReadDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/add": {
      "post": {
        "tags": [
          "Schemas"
        ],
        "summary": "create a new schema",
        "operationId": "Schemas_AddSchema",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaWriteDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/schemaversions": {
      "post": {
        "tags": [
          "Schemas"
        ],
        "summary": "Get multiple schema versions",
        "operationId": "Schemas_GetSchemaVersions",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaVersionReadDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/schemaversions/add": {
      "post": {
        "tags": [
          "Schemas"
        ],
        "summary": "Add a new schema version",
        "operationId": "Schemas_AddSchemaVersion",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaVersionWriteDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/schemaversions/{schemaVersionId}": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Get a specific schema version",
        "operationId": "Schemas_GetSchemaVersionById",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "schemaVersionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaVersionReadDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/validators": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Gets a list of column validators by workspace Id",
        "description": "Sample response:\r\n\r\n     [\r\n         {\r\n             \u0022id\u0022: \u002210ffec78-4792-4364-babd-e9c45b6f94ab\u0022,\r\n             \u0022workspaceId\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n             \u0022name\u0022: \u0022string 3\u0022,\r\n             \u0022notEmpty\u0022: true,\r\n             \u0022dataFormat\u0022: \u0022String\u0022,\r\n             \u0022minimum\u0022: 0,\r\n             \u0022maximum\u0022: 1,\r\n             \u0022exclusiveMinimum\u0022: true,\r\n             \u0022exclusiveMaximum\u0022: true,\r\n             \u0022minLength\u0022: 0,\r\n             \u0022maxLength\u0022: 1,\r\n             \u0022pattern\u0022: \u0022string\u0022,\r\n             \u0022errorMessage\u0022: \u0022string\u0022,\r\n             \u0022fallbackValue\u0022: \u0022string\u0022,\r\n             \u0022createdBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022createdOn\u0022: \u00222024-06-26T14:20:50.1444566Z\u0022,\r\n             \u0022lastModifiedBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022lastModifiedOn\u0022: \u00222024-06-26T14:20:50.1444566Z\u0022\r\n         },\r\n         {\r\n             \u0022id\u0022: \u0022834c7130-92bf-428e-acb2-c5567a540106\u0022,\r\n             \u0022workspaceId\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n             \u0022name\u0022: \u0022string\u0022,\r\n             \u0022notEmpty\u0022: true,\r\n             \u0022dataFormat\u0022: \u0022String\u0022,\r\n             \u0022minimum\u0022: 1,\r\n             \u0022maximum\u0022: 3,\r\n             \u0022exclusiveMinimum\u0022: true,\r\n             \u0022exclusiveMaximum\u0022: true,\r\n             \u0022minLength\u0022: 1,\r\n             \u0022maxLength\u0022: 3,\r\n             \u0022pattern\u0022: \u0022string\u0022,\r\n             \u0022errorMessage\u0022: \u0022string\u0022,\r\n             \u0022fallbackValue\u0022: \u0022string\u0022,\r\n             \u0022createdBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022createdOn\u0022: \u00222024-06-27T09:55:58.1032117Z\u0022,\r\n             \u0022lastModifiedBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022lastModifiedOn\u0022: \u00222024-06-27T09:55:58.1032117Z\u0022\r\n         }\r\n     ]",
        "operationId": "Schemas_GetValidatorsListByWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnValidatorReadDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Schemas"
        ],
        "summary": "Creates a new column validator",
        "description": "Example of request body:\r\n\r\n    {\r\n        \u0022name\u0022: \u0022Can be empty\u0022,\r\n        \u0022notEmpty\u0022: false,\r\n        \u0022errorMessage\u0022: \u0022Can be empty\u0022\r\n    }\r\n\r\nSample response:\r\n\r\n    {\r\n        \u0022id\u0022: \u0022d4ab697e-23f8-403b-82cd-3ead39deb0c3\u0022,\r\n        \u0022workspaceId\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n        \u0022name\u0022: \u0022Can be empty\u0022,\r\n        \u0022notEmpty\u0022: false,\r\n        \u0022errorMessage\u0022: \u0022Can be empty\u0022,\r\n        \u0022createdBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n        \u0022createdOn\u0022: \u00222024-07-05T09:52:48.8341034Z\u0022,\r\n        \u0022lastModifiedBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n        \u0022lastModifiedOn\u0022: \u00222024-07-05T09:52:48.8341034Z\u0022\r\n    }",
        "operationId": "Schemas_CreateValidatorWithWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnValidatorWriteDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnValidatorReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/validators/global": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Get list of global validators",
        "description": "Sample response:\r\n\r\n     [\r\n         {\r\n             \u0022id\u0022: \u002210ffec78-4792-4364-babd-e9c45b6f94ab\u0022,\r\n             \u0022workspaceId\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n             \u0022name\u0022: \u0022string 3\u0022,\r\n             \u0022notEmpty\u0022: true,\r\n             \u0022dataFormat\u0022: \u0022String\u0022,\r\n             \u0022minimum\u0022: 0,\r\n             \u0022maximum\u0022: 1,\r\n             \u0022exclusiveMinimum\u0022: true,\r\n             \u0022exclusiveMaximum\u0022: true,\r\n             \u0022minLength\u0022: 0,\r\n             \u0022maxLength\u0022: 1,\r\n             \u0022pattern\u0022: \u0022string\u0022,\r\n             \u0022errorMessage\u0022: \u0022string\u0022,\r\n             \u0022fallbackValue\u0022: \u0022string\u0022,\r\n             \u0022createdBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022createdOn\u0022: \u00222024-06-26T14:20:50.1444566Z\u0022,\r\n             \u0022lastModifiedBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022lastModifiedOn\u0022: \u00222024-06-26T14:20:50.1444566Z\u0022\r\n         },\r\n         {\r\n             \u0022id\u0022: \u0022834c7130-92bf-428e-acb2-c5567a540106\u0022,\r\n             \u0022workspaceId\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n             \u0022name\u0022: \u0022string\u0022,\r\n             \u0022notEmpty\u0022: true,\r\n             \u0022dataFormat\u0022: \u0022String\u0022,\r\n             \u0022minimum\u0022: 1,\r\n             \u0022maximum\u0022: 3,\r\n             \u0022exclusiveMinimum\u0022: true,\r\n             \u0022exclusiveMaximum\u0022: true,\r\n             \u0022minLength\u0022: 1,\r\n             \u0022maxLength\u0022: 3,\r\n             \u0022pattern\u0022: \u0022string\u0022,\r\n             \u0022errorMessage\u0022: \u0022string\u0022,\r\n             \u0022fallbackValue\u0022: \u0022string\u0022,\r\n             \u0022createdBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022createdOn\u0022: \u00222024-06-27T09:55:58.1032117Z\u0022,\r\n             \u0022lastModifiedBy\u0022: \u002261cecec8-629b-4779-b593-6505e2b9443b\u0022,\r\n             \u0022lastModifiedOn\u0022: \u00222024-06-27T09:55:58.1032117Z\u0022\r\n         }\r\n     ]",
        "operationId": "Schemas_GetValidatorsList",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnValidatorReadDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/validators/{validatorId}": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Gets a column validator by Id",
        "description": "Sample response:\r\n\r\n    {\r\n        \u0022id\u0022: \u002210ffec78-4792-4364-babd-e9c45b6f94ab\u0022,\r\n        \u0022workspaceId\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,\r\n        \u0022name\u0022: \u0022string 3\u0022,\r\n        \u0022notEmpty\u0022: true,\r\n        \u0022dataFormat\u0022: \u0022String\u0022,\r\n        \u0022minimum\u0022: 0,\r\n        \u0022maximum\u0022: 1,\r\n        \u0022exclusiveMinimum\u0022: true,\r\n        \u0022exclusiveMaximum\u0022: true,\r\n        \u0022minLength\u0022: 0,\r\n        \u0022maxLength\u0022: 1,\r\n        \u0022pattern\u0022: \u0022string\u0022,\r\n        \u0022errorMessage\u0022: \u0022string\u0022,\r\n        \u0022fallbackValue\u0022: \u0022string\u0022,\r\n        \u0022createdBy\u0022: \u002280737649-9108-49ff-9811-a419be7c1862\u0022,\r\n        \u0022createdOn\u0022: \u00222024-06-26T14:20:50.1444566Z\u0022,\r\n        \u0022lastModifiedBy\u0022: \u002280737649-9108-49ff-9811-a419be7c1862\u0022,\r\n        \u0022lastModifiedOn\u0022: \u00222024-06-26T14:20:50.1444566Z\u0022\r\n    }",
        "operationId": "Schemas_GetValidatorByIdWithWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "validatorId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnValidatorReadDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Schemas"
        ],
        "summary": "Updates column validator by Id",
        "description": "Example of request body:\r\n\r\n    {\r\n        \u0022name\u0022: \u0022Not Empty\u0022,\r\n        \u0022notEmpty\u0022: true,\r\n        \u0022errorMessage\u0022: \u0022Cannot be empty\u0022\r\n    }",
        "operationId": "Schemas_UpdateValidatorByIdWithWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "validatorId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnValidatorWriteDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnValidatorReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Schemas"
        ],
        "summary": "Deletes the column validator with the specified ID.",
        "operationId": "Schemas_DeleteValidatorByIdWithWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "validatorId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/{schemaId}": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Get a specific schema",
        "operationId": "Schemas_GetSchemaById",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "schemaId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Schemas Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Schemas"
        ],
        "summary": "Patch Schema",
        "operationId": "Schemas_UpdateSchema",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "schemaId",
            "in": "path",
            "description": "Schema Id to edit",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "The input describing the schema",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaPatchDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaReadDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/{schemaId}/schemaversions/{schemaVersionId}": {
      "patch": {
        "tags": [
          "Schemas"
        ],
        "summary": "Update schema version",
        "operationId": "Schemas_PatchSchemaVersion",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "schemaId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "schemaVersionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaVersionUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/schemas/{schemaId}/schemaversions/{schemaVersionId}/activate": {
      "post": {
        "tags": [
          "Schemas"
        ],
        "summary": "Activate schema version",
        "operationId": "Schemas_ActivateSchemaVersion",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "schemaId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "schemaVersionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionReadDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/shares/sharedby/query": {
      "post": {
        "tags": [
          "Shares"
        ],
        "summary": "Get share owner info by dataset ID list",
        "description": "Sample response for shared owner info:\r\n\r\n    [\r\n        {\r\n            \u0022datasetId\u0022: \u0022f80b0de1-3b1d-4a64-aa4d-88d6073ff1cd\u0022,    // Id of the dataset\r\n            \u0022sharedBy\u0022: {\r\n                \u0022id\u0022: \u00223fa85f64-5717-4562-b3fc-2c963f66afa6\u0022,   // Id of the shared user\r\n                \u0022sharedByType\u0022: \u0022User\u0022,\r\n                \u0022name\u0022: \u0022User Name\u0022  // Name of the shared user\r\n            }\r\n        },\r\n        {\r\n            \u0022datasetId\u0022: \u00226113fcaa-a29e-4804-b9a9-dac331676ee8\u0022,    // Id of the dataset\r\n            \u0022sharedBy\u0022: {\r\n                \u0022id\u0022: \u0022a1d9ef10-39c3-4d3a-8c33-241a0b1138a1\u0022,   // Id of the shared workspace\r\n                \u0022sharedByType\u0022: \u0022Workspace\u0022,\r\n                \u0022name\u0022: \u0022Workspace Name\u0022  // Name of the shared workspace\r\n            }\r\n        }\r\n    ]",
        "operationId": "Shares_QuerySharedBys",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedBysQueryDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns List of shared owner info Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SharedByInfoResultDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/shares/{shareId}/storages/sas": {
      "get": {
        "tags": [
          "Storages"
        ],
        "summary": "Get storage sas token by share id",
        "operationId": "Storages_GetSASTokenForStorageDatasetByShareIdV2",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "shareId",
            "in": "path",
            "description": "Share id of the dataset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns sas token for storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SasTokenResultDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/storages/external/policies": {
      "post": {
        "tags": [
          "Storages"
        ],
        "summary": "List sas policies for current workspace.",
        "description": "/// Sample request For Revoke Sas Token:\r\n\r\n    POST {workspaceId}/storages/external/policies\r\n            {\r\n              \u0022containerName\u0022: \u0022string\u0022,\r\n              \u0022connectionString\u0022: \u0022string\u0022                 \r\n            } \r\n* ContainerName is the name of the container for which the SAS policy needs to be revoked.\r\n* ConnectionString is the connection string of the external storage account.\r\n\r\nNotes - \r\n* This endpoint helps to list all the SAS policies for external storage which are active.",
        "operationId": "Storages_ListExternalStorageSASPolicies",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionSettingsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of sas policies for the workspace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SasPolicyDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/storages/external/sas": {
      "post": {
        "tags": [
          "Storages"
        ],
        "summary": "Get external storage sas token for current workspace",
        "description": "Sample request For Storage Sas Token:\r\n\r\n    POST {workspaceId}/storages/sas\r\n            {\r\n                \u0022settings\u0022: {\r\n                  \u0022containerName\u0022: \u0022string\u0022,\r\n                  \u0022connectionString\u0022: \u0022string\u0022\r\n                },\r\n                \u0022filters\u0022: {\r\n                   \u0022path\u0022: \u002218a4a7ab-022c-4964-9d1b-6cc77e252a67/test.csv\u0022,\r\n                   \u0022readOrWritePermission\u0022: \u0022Read\u0022,\r\n                   \u0022startsOn\u0022: \u00222024-05-14T09:04:12.297Z\u0022,\r\n                   \u0022expiresOn\u0022: \u00222024-05-14T09:04:12.297Z\u0022,\r\n                   \u0022storageName\u0022: \u0022StorageDataset\u0022\r\n                }\r\n            }\r\n* ContainerName is the name of the container for which the SAS policy needs to be revoked.\r\n* ConnectionString is the connection string of the external storage account.\r\n* Path \u2013 string, path of the resource you want to generate the SAS Token for. It is optional, if it is left empty or not provided, the default path of internal storage will be considered.(which means ContainerName which was specified while creating the internal storage). If provided, it should be valid path pointing to a resource.\r\n* ReadOrWritePermission \u2013 string, type of permission you want to give on the resource, it can only have values Read/Write.\r\n* StartsOn \u2013 DateTime, datetime from which the SAS Token will be valid. It is optional, if not provided current UTC date time will be considered. If provided, it should not be a past date time.\r\n* ExpiresOn \u2013 DateTime, datetime till when the SAS Token will be valid.It should not be a past date time and should be greater than StartsOn.\r\n* StorageName - string, name of the storage for which the SAS token needs to be generated. It is optional, if not provided the default internal storage dataset will be considered. If it is provided it should be a valid storage dataset name.\r\n\r\nNotes - \r\n* A user of Workspace who has role of Reader can only generate tokens with Read permission, if he tries to generate token with Write permission, he will be unauthorized.\r\n* A user of Workspace who has role of Administrator can generate tokens with both Read/Write permissions.\r\n* Service Accounts should generate only Read token. If they need to generate Write SAS Token, they need to get access for it.\r\n\r\nSample response for new Storage Sas Token result\r\n               {\r\n                   \u0022sasToken\u0022: \u0022https://test.dfs.core.windows.net/\u0022,\r\n                   \u0022policy\u0022: {\r\n                   \u0022policyName\u0022: \u0022rl-policy\u0022,\r\n                       \u0022policyPermissions\u0022: [\r\n                         \u0022Read\u0022,\r\n                         \u0022List\u0022\r\n                       ]\r\n                    }\r\n                 }",
        "operationId": "Storages_GetSASTokenForExternalStorage",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSasTokenForExternalDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns sas token for storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SasTokenResultDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/storages/policies": {
      "get": {
        "tags": [
          "Storages"
        ],
        "summary": "List sas policies for current workspace.",
        "description": "Notes - \r\n* This endpoint helps to list all the SAS policies for internal storage which are active.",
        "operationId": "Storages_ListInternalStorageSASPolicies",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of sas policies for the workspace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SasPolicyDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/storages/sas": {
      "post": {
        "tags": [
          "Storages"
        ],
        "summary": "Get internal storage sas token for current workspace",
        "description": "Sample request For Storage Sas Token:\r\n\r\n    POST {workspaceId}/storages/sas\r\n            {\r\n                \u0022path\u0022: \u002218a4a7ab-022c-4964-9d1b-6cc77e252a67/test.csv\u0022,\r\n                \u0022readOrWritePermission\u0022: \u0022Read\u0022,\r\n                \u0022startsOn\u0022: \u00222024-05-14T09:04:12.297Z\u0022,\r\n                \u0022expiresOn\u0022: \u00222024-05-14T09:04:12.297Z\u0022,\r\n                \u0022storageName\u0022: \u0022StorageDataset\u0022\r\n            }\r\n* Path \u2013 string, path of the resource you want to generate the SAS Token for. It is optional, if it is left empty or not provided, the default path of internal storage will be considered.(which means ContainerName which was specified while creating the internal storage). If provided, it should be valid path pointing to a resource.\r\n* ReadOrWritePermission \u2013 string, type of permission you want to give on the resource, it can only have values Read/Write.\r\n* StartsOn \u2013 DateTime, datetime from which the SAS Token will be valid. It is optional, if not provided current UTC date time will be considered. If provided, it should not be a past date time.\r\n* ExpiresOn \u2013 DateTime, datetime till when the SAS Token will be valid.It should not be a past date time and should be greater than StartsOn.\r\n* StorageName - string, name of the storage for which the SAS token needs to be generated. It is optional, if not provided the default internal storage dataset will be considered. If it is provided it should be a valid storage dataset name.\r\n\r\nNotes - \r\n* A user of Workspace who has role of Reader can only generate tokens with Read permission, if he tries to generate token with Write permission, he will be unauthorized.\r\n* A user of Workspace who has role of Administrator can generate tokens with both Read/Write permissions.\r\n* Service Accounts should generate only Read token. If they need to generate Write SAS Token, they need to get access for it.\r\n\r\nSample response for new Storage Sas Token result\r\n               {\r\n                   \u0022sasToken\u0022: \u0022https://test.dfs.core.windows.net/\u0022,\r\n                   \u0022policy\u0022: {\r\n                   \u0022policyName\u0022: \u0022rl-policy\u0022,\r\n                       \u0022policyPermissions\u0022: [\r\n                         \u0022Read\u0022,\r\n                         \u0022List\u0022\r\n                       ]\r\n                    }\r\n                 }",
        "operationId": "Storages_GetSASTokenForInternalStorage",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageQueryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns sas token for storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SasTokenResultDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/storages/sas/external/revoke": {
      "delete": {
        "tags": [
          "Storages"
        ],
        "summary": "Revoke sas policy for current workspace or based on policy name.",
        "description": "Sample request For Revoke Sas Token:\r\n\r\n    DELETE {workspaceId}/storages/sas/external/revoke\r\n            {\r\n                \u0022settings\u0022: {\r\n                    \u0022containerName\u0022: \u0022string\u0022,\r\n                    \u0022connectionString\u0022: \u0022string\u0022\r\n                },\r\n                \u0022policyName\u0022: \u0022string\u0022\r\n            } \r\n* ContainerName is the name of the container for which the SAS policy needs to be revoked.\r\n* ConnectionString is the connection string of the external storage account.\r\n\r\nNotes - \r\n* If policyName is not provided, all the SAS policies for the workspace for storage will be revoked.\r\n* If policyName is provided, only the SAS policy with that name will be revoked.\r\n* To see the policyNames for storage, call the POST endpoint - /gateway/api/v1/workspaces/{workspaceId}/storages/sas/external/policies endpoint.\r\n* A user of Workspace who has role of Reader can not revoke tokens.\r\n* A user of Workspace who has role of Administrator can only revoke tokens.\r\n* Service Accounts can\u0027t revoke tokens currently.",
        "operationId": "Storages_RevokeExternalSASToken",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeSasTokenExternalDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Revokes sas policy for storage"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/storages/sas/revoke": {
      "delete": {
        "tags": [
          "Storages"
        ],
        "summary": "Revoke sas policy for current workspace or based on policy name.",
        "description": "Notes - \r\n* If policyName is not provided, all the SAS policies for the workspace for storage will be revoked.\r\n* If policyName is provided, only the SAS policy with that name will be revoked.\r\n* To see the policyNames for storage, call the GET endpoint - /gateway/api/v1/workspaces/{workspaceId}/storages/sas/policies endpoint.\r\n* A user of Workspace who has role of Reader can not revoke tokens.\r\n* A user of Workspace who has role of Administrator can only revoke tokens.\r\n* Service Accounts can\u0027t revoke tokens currently.",
        "operationId": "Storages_RevokeInternalSASToken",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "policyToRevoke",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Revokes sas policy for storage"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/storages/storagedatasets": {
      "get": {
        "tags": [
          "Storages"
        ],
        "summary": "Gets Storage DataSets by workspaceId",
        "operationId": "Storages_GetStorageDatasetsByWorkspaceId",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns DataSet Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCatalogReadDtoV2PaginatedResult"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/users/invite": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Invite user to workspace",
        "description": "Sample request for user invite:\r\n\r\n    POST workspaces/{workspaceId:guid}/users/invite\r\n    {\r\n        \u0022email\u0022: \u0022email\u0022,\r\n        \u0022role\u0022: \u0022reader\u0022 or \u0022administrator\u0022\r\n    }",
        "operationId": "Tenants_InviteUserToWorkspace",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInviteDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Return result of user invite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInviteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/users/roles": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get users with role scopes in specified workspace",
        "description": "Sample response for paginated result of user role scopes info:\r\n\r\n    {\r\n    \t\u0022result\u0022: [\r\n    \t\t{\r\n    \t\t\t\u0022userId\u0022: \u00223e4d0494-0bad-41fb-aa1f-0c2e53516171\u0022,\r\n    \t\t\t\u0022email\u0022: \u0022Nana.Ouyang@dnv.com\u0022,\r\n    \t\t\t\u0022name\u0022: \u0022Nana Ouyang\u0022,\r\n    \t\t\t\u0022isServicePrincipal\u0022: false,\r\n    \t\t\t\u0022roleScope\u0022: {\r\n    \t\t\t\t\u0022role\u0022: \u0022administrator\u0022,\r\n    \t\t\t\t\u0022scopeType\u0022: \u0022Workspace\u0022,\r\n    \t\t\t\t\u0022scopeRef\u0022: \u0022961a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022\r\n    \t\t\t}\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\u0022userId\u0022: \u0022cc4c079a-5411-6899-8dd4-b8783f9417a8\u0022,\r\n    \t\t\t\u0022email\u0022: \u0022Ina.Zhang@dnv.com\u0022,\r\n    \t\t\t\u0022name\u0022: \u0022Ina Zhang\u0022,\r\n    \t\t\t\u0022isServicePrincipal\u0022: false,\r\n    \t\t\t\u0022roleScope\u0022: {\r\n    \t\t\t\t\u0022role\u0022: \u0022reader\u0022,\r\n    \t\t\t\t\u0022scopeType\u0022: \u0022Workspace\u0022,\r\n    \t\t\t\t\u0022scopeRef\u0022: \u0022961a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022\r\n    \t\t\t}\r\n    \t\t}\r\n    \t],\r\n    \t\u0022pageIndex\u0022: 1,\r\n    \t\u0022pageSize\u0022: 2,\r\n    \t\u0022totalCount\u0022: 53,\r\n    \t\u0022totalPages\u0022: 27\r\n    }",
        "operationId": "Tenants_QueryWorkspaceUserRoleScopes",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id which you want to get user role scopes",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "Index of the current page (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns paginated result of users with role scopes"
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/users/{userId}/role": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create or update user role of workspace",
        "description": "Sample request:\r\n\r\n    {\r\n        \u0022role\u0022: \u0022reader\u0022    //\u0022reader\u0022 or \u0022administrator\u0022\r\n    }\r\n    \r\nSample response:\r\n\r\n    {\r\n         \u0022roleScopeId\u0022: \u002200c3a436-433b-45e6-ba2a-dbb44cfa4100\u0022,\r\n         \u0022userId\u0022: \u002200c3a436-433b-45e6-ba2a-dbb44cfa4100\u0022,      //Id of User\r\n         \u0022scopeRef\u0022: \u0022196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86\u0022,    //Id of workspace\r\n         \u0022scopeType\u0022: \u0022Workspace\u0022,\r\n         \u0022roleName\u0022: \u0022reader\u0022\r\n    }",
        "operationId": "Tenants_CreateOrUpdateWorkspaceUserRole",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id which you want to create or update user role",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateUserRoleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns updated user role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleScopeGetDto"
                }
              }
            }
          },
          "201": {
            "description": "Returns created user role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleScopeGetDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Revoke user access to a specified workspace",
        "operationId": "Tenants_RevokeWorkspaceUserRole",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The specified workspace id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id whose access rights will be removed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns http status code 200"
          },
          "400": {
            "description": "Failed"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true,
            "x-nullable": true
          },
          "entryPoint": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "location": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "escapedCodeBase": {
            "type": "string",
            "readOnly": true,
            "deprecated": true,
            "x-nullable": false
          },
          "manifestModule": {
            "$ref": "#/components/schemas/Module"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true,
            "x-nullable": false
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "x-nullable": false
          },
          "securityRuleSet": {
            "$ref": "#/components/schemas/SecurityRuleSet"
          }
        }
      },
      "CallingConventions": {
        "enum": [
          "Standard",
          "VarArgs",
          "Any",
          "HasThis",
          "ExplicitThis"
        ],
        "type": "string"
      },
      "ColumnDto": {
        "required": [
          "displayName",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "displayName": {
            "type": "string",
            "x-nullable": false
          },
          "type": {
            "$ref": "#/components/schemas/ColumnTypes"
          },
          "filterType": {
            "$ref": "#/components/schemas/FilterType"
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterType"
            },
            "x-nullable": false
          },
          "format": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "isSortable": {
            "type": "boolean",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "isFilterable": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          "isRequired": {
            "type": "boolean",
            "x-nullable": false
          },
          "validations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnValidationDto"
            },
            "nullable": true,
            "x-nullable": true
          },
          "metaType": {
            "$ref": "#/components/schemas/MetaType"
          }
        }
      },
      "ColumnTypes": {
        "enum": [
          "String",
          "Boolean",
          "Int32",
          "Decimal",
          "DateOnly",
          "DateTime",
          "Uri",
          "Int64",
          "Float",
          "Guid"
        ],
        "type": "string"
      },
      "ColumnValidationDto": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "validator": {
            "$ref": "#/components/schemas/ColumnValidatorBasicDto"
          }
        }
      },
      "ColumnValidationWriteDto": {
        "type": "object",
        "properties": {
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "validatorId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      },
      "ColumnValidatorBasicDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "notEmpty": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "dataFormat": {
            "$ref": "#/components/schemas/DataFormat"
          },
          "minimum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "x-nullable": true
          },
          "maximum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "x-nullable": true
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "minLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "pattern": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "x-nullable": true
            },
            "nullable": true,
            "x-nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "fallbackValue": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "ColumnValidatorReadDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "notEmpty": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "dataFormat": {
            "$ref": "#/components/schemas/DataFormat"
          },
          "minimum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "x-nullable": true
          },
          "maximum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "x-nullable": true
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "minLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "pattern": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "x-nullable": true
            },
            "nullable": true,
            "x-nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "fallbackValue": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          }
        }
      },
      "ColumnValidatorWriteDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "notEmpty": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "dataFormat": {
            "$ref": "#/components/schemas/DataFormat"
          },
          "minimum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "x-nullable": true
          },
          "maximum": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "x-nullable": true
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "minLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "pattern": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "x-nullable": true
            },
            "nullable": true,
            "x-nullable": true
          },
          "errorMessage": {
            "type": "string",
            "x-nullable": false
          },
          "fallbackValue": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "ColumnWriteDto": {
        "required": [
          "displayName",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "displayName": {
            "type": "string",
            "x-nullable": false
          },
          "type": {
            "$ref": "#/components/schemas/ColumnTypes"
          },
          "filterType": {
            "$ref": "#/components/schemas/FilterType"
          },
          "format": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "x-nullable": false
          },
          "validations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnValidationWriteDto"
            },
            "nullable": true,
            "x-nullable": true
          },
          "metaType": {
            "$ref": "#/components/schemas/MetaType"
          },
          "isSortable": {
            "type": "boolean",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "isFilterable": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterType"
            },
            "x-nullable": false
          }
        }
      },
      "ConnectionSettingsDTO": {
        "type": "object",
        "properties": {
          "containerName": {
            "type": "string",
            "x-nullable": false
          },
          "connectionString": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "ConstructorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          }
        }
      },
      "CreateOrUpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "$ref": "#/components/schemas/Type"
          },
          "constructor": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypedArgument"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeNamedArgument"
            },
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "typedValue": {
            "$ref": "#/components/schemas/CustomAttributeTypedArgument"
          },
          "memberName": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "isField": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "DataCatalogQueryDto": {
        "type": "object",
        "properties": {
          "isBaseDataset": {
            "type": "boolean",
            "nullable": true,
            "x-nullable": true
          },
          "pageIndex": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "sortColumn": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "sortDirection": {
            "$ref": "#/components/schemas/SortDirection"
          },
          "datasetName": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true,
            "x-nullable": true
          },
          "createdAfter": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "x-nullable": true
          },
          "createdBefore": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "x-nullable": true
          },
          "schemaVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "nullable": true,
              "x-nullable": true
            },
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "DataCatalogReadDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "x-nullable": false
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "connectionId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "schemaInfo": {
            "$ref": "#/components/schemas/SchemaInfoDto"
          },
          "queries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryFilter"
            },
            "x-nullable": false
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          },
          "isBaseDataset": {
            "type": "boolean",
            "x-nullable": false
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "DataCatalogReadDtoV2PaginatedResult": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "totalCount": {
            "type": "integer"
          },
          "totalPages": {
            "type": "integer"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataCatalogReadDtoV2"
            }
          }
        }
      },
      "DataFormat": {
        "enum": [
          "String",
          "Boolean",
          "Int32",
          "Int64",
          "Float",
          "Double",
          "DateTime"
        ],
        "type": "string"
      },
      "DocumentRefDTO": {
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "documentId": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "EventAttributes": {
        "enum": [
          "None",
          "SpecialName",
          "RTSpecialName"
        ],
        "type": "string"
      },
      "EventInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/EventAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "addMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "removeMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "raiseMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "isMulticast": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "eventHandlerType": {
            "$ref": "#/components/schemas/Type"
          }
        }
      },
      "ExecutionWriteDTO": {
        "type": "object",
        "properties": {
          "datasetIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          },
          "provider": {
            "type": "string",
            "x-nullable": false
          },
          "script": {
            "type": "string",
            "x-nullable": false
          },
          "outputDatasetName": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "FieldAttributes": {
        "enum": [
          "PrivateScope",
          "Private",
          "FamANDAssem",
          "Assembly",
          "Family",
          "FamORAssem",
          "Public",
          "FieldAccessMask",
          "Static",
          "InitOnly",
          "Literal",
          "NotSerialized",
          "HasFieldRVA",
          "SpecialName",
          "RTSpecialName",
          "HasFieldMarshal",
          "PinvokeImpl",
          "HasDefault",
          "ReservedMask"
        ],
        "type": "string"
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/FieldAttributes"
          },
          "fieldType": {
            "$ref": "#/components/schemas/Type"
          },
          "isInitOnly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isLiteral": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNotSerialized": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true,
            "x-nullable": false
          },
          "isPinvokeImpl": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "fieldHandle": {
            "$ref": "#/components/schemas/RuntimeFieldHandle"
          }
        }
      },
      "FilterType": {
        "enum": [
          "List",
          "From",
          "To",
          "Equals",
          "Greater",
          "GreaterOrEqual",
          "Less",
          "LessOrEqual",
          "NonFromList",
          "StringContains"
        ],
        "type": "string"
      },
      "GenericParameterAttributes": {
        "enum": [
          "None",
          "Covariant",
          "Contravariant",
          "VarianceMask",
          "ReferenceTypeConstraint",
          "NotNullableValueTypeConstraint",
          "DefaultConstructorConstraint",
          "SpecialConstraintMask"
        ],
        "type": "string"
      },
      "GetSasTokenForExternalDTO": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ConnectionSettingsDTO"
          },
          "filters": {
            "$ref": "#/components/schemas/StorageQueryDto"
          }
        }
      },
      "ICustomAttributeProvider": {
        "type": "object"
      },
      "IntPtr": {
        "type": "object"
      },
      "LayoutKind": {
        "enum": [
          "Sequential",
          "Explicit",
          "Auto"
        ],
        "type": "string"
      },
      "LedgerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-nullable": false
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "userName": {
            "type": "string",
            "x-nullable": false
          },
          "resource": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-nullable": false
          },
          "payload": {
            "x-nullable": false
          },
          "eventName": {
            "type": "string",
            "x-nullable": false
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          }
        }
      },
      "LedgerDtoPaginatedResult": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "totalCount": {
            "type": "integer"
          },
          "totalPages": {
            "type": "integer"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LedgerDto"
            }
          }
        }
      },
      "LogStatus": {
        "enum": [
          "Started",
          "Completed",
          "Failed",
          "StatusLogFileNotFound",
          "Pending"
        ],
        "type": "string"
      },
      "MemberInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "MemberTypes": {
        "enum": [
          "Constructor",
          "Event",
          "Field",
          "Method",
          "Property",
          "TypeInfo",
          "Custom",
          "NestedType",
          "All"
        ],
        "type": "string"
      },
      "MetaType": {
        "enum": [
          "Validation",
          "FallbackIndicator",
          "Timestamp"
        ],
        "type": "string"
      },
      "MethodAttributes": {
        "enum": [
          "PrivateScope",
          "Private",
          "FamANDAssem",
          "Assembly",
          "Family",
          "FamORAssem",
          "Public",
          "MemberAccessMask",
          "UnmanagedExport",
          "Static",
          "Final",
          "Virtual",
          "HideBySig",
          "NewSlot",
          "CheckAccessOnOverride",
          "Abstract",
          "SpecialName",
          "RTSpecialName",
          "PinvokeImpl",
          "HasSecurity",
          "RequireSecObject",
          "ReservedMask"
        ],
        "type": "string"
      },
      "MethodBase": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "MethodImplAttributes": {
        "enum": [
          "IL",
          "Native",
          "OPTIL",
          "CodeTypeMask",
          "ManagedMask",
          "NoInlining",
          "ForwardRef",
          "Synchronized",
          "NoOptimization",
          "PreserveSig",
          "AggressiveInlining",
          "AggressiveOptimization",
          "InternalCall",
          "MaxMethodImplVal"
        ],
        "type": "string"
      },
      "MethodInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "returnParameter": {
            "$ref": "#/components/schemas/ParameterInfo"
          },
          "returnType": {
            "$ref": "#/components/schemas/Type"
          },
          "returnTypeCustomAttributes": {
            "$ref": "#/components/schemas/ICustomAttributeProvider"
          }
        }
      },
      "Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "fullyQualifiedName": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "x-nullable": false
          },
          "scopeName": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "moduleHandle": {
            "$ref": "#/components/schemas/ModuleHandle"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "OrderReadDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "datasetName": {
            "type": "string",
            "x-nullable": false
          },
          "status": {
            "type": "string",
            "x-nullable": false
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderType"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "createdDatasetsId": {
            "type": "array",
            "items": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          },
          "properties": {
            "x-nullable": false
          }
        }
      },
      "OrderWriteDto": {
        "type": "object",
        "properties": {
          "datasetName": {
            "type": "string",
            "x-nullable": false
          },
          "providerType": {
            "$ref": "#/components/schemas/ProviderType"
          },
          "properties": {
            "x-nullable": false
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int64",
            "x-nullable": false
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "x-nullable": false
          },
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "x-nullable": false
          }
        }
      },
      "ParameterAttributes": {
        "enum": [
          "None",
          "In",
          "Out",
          "Lcid",
          "Retval",
          "Optional",
          "HasDefault",
          "HasFieldMarshal",
          "Reserved3",
          "Reserved4",
          "ReservedMask"
        ],
        "type": "string"
      },
      "ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ParameterAttributes"
          },
          "member": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "parameterType": {
            "$ref": "#/components/schemas/Type"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "x-nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PropertyAttributes": {
        "enum": [
          "None",
          "SpecialName",
          "RTSpecialName",
          "HasDefault",
          "Reserved2",
          "Reserved3",
          "Reserved4",
          "ReservedMask"
        ],
        "type": "string"
      },
      "PropertyInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "propertyType": {
            "$ref": "#/components/schemas/Type"
          },
          "attributes": {
            "$ref": "#/components/schemas/PropertyAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "canRead": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "getMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "setMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          }
        }
      },
      "ProviderType": {
        "enum": [
          "GPM"
        ],
        "type": "string"
      },
      "QueryData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "x-nullable": false
            },
            "x-nullable": false
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "QueryFilter": {
        "type": "object",
        "properties": {
          "column": {
            "type": "string",
            "x-nullable": false
          },
          "filterType": {
            "$ref": "#/components/schemas/QueryFilterType"
          },
          "filterValues": {
            "type": "array",
            "items": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          }
        }
      },
      "QueryFilterType": {
        "enum": [
          "List",
          "Equals",
          "Greater",
          "GreaterOrEqual",
          "Less",
          "LessOrEqual",
          "NonFromList",
          "StringContains"
        ],
        "type": "string"
      },
      "QuerySpecificationV2": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int64",
            "x-nullable": false
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          "queryFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryFilter"
            },
            "nullable": true,
            "x-nullable": true
          },
          "columnFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "x-nullable": true
            },
            "nullable": true,
            "x-nullable": true
          },
          "sorting": {
            "$ref": "#/components/schemas/Sorting"
          }
        }
      },
      "RevokeSasTokenExternalDTO": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ConnectionSettingsDTO"
          },
          "policyName": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "RoleScopeGetDto": {
        "type": "object",
        "properties": {
          "roleScopeId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "scopeRef": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          },
          "roleName": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "RowValidatorDto": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RowValidatorType"
          },
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "errorMessage": {
            "type": "string",
            "x-nullable": false
          },
          "columnsToCheck": {
            "type": "array",
            "items": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          },
          "columnsToAffect": {
            "type": "array",
            "items": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          },
          "isAffectedToAll": {
            "type": "boolean",
            "x-nullable": false
          },
          "checkParameter": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "RowValidatorType": {
        "enum": [
          "RequiredIfNotNull",
          "RequiredIfRegexMatch",
          "RequiredIfSumExceedsThreshold"
        ],
        "type": "string"
      },
      "RuntimeFieldHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        }
      },
      "RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        }
      },
      "RuntimeTypeHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        }
      },
      "SASType": {
        "enum": [
          "dfs",
          "blob"
        ],
        "type": "string"
      },
      "SasPolicyDTO": {
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "x-nullable": false
          },
          "policyPermissions": {
            "type": "array",
            "items": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          }
        }
      },
      "SasPolicyReadDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string",
              "x-nullable": false
            },
            "x-nullable": false
          }
        }
      },
      "SasTokenResultDTO": {
        "type": "object",
        "properties": {
          "sasToken": {
            "type": "string",
            "x-nullable": false
          },
          "policy": {
            "$ref": "#/components/schemas/SasPolicyDTO"
          }
        }
      },
      "SchemaInfoDto": {
        "type": "object",
        "properties": {
          "schemaVersionId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "schemaName": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "SchemaPatchDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "SchemaReadDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "shortName": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "schemaVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaVersionReadDto"
            },
            "x-nullable": false
          },
          "industry": {
            "type": "string",
            "x-nullable": false
          },
          "isPredefined": {
            "type": "boolean",
            "x-nullable": false
          },
          "avatarColor": {
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          }
        }
      },
      "SchemaVersionReadDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "schemaVersionName": {
            "type": "string",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnDto"
            },
            "x-nullable": false
          },
          "schemaId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          },
          "isDefault": {
            "type": "boolean",
            "x-nullable": false
          },
          "avatarColor": {
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          "versionNumber": {
            "type": "integer",
            "format": "int32",
            "x-nullable": false
          },
          "extensions": {
            "x-nullable": false
          },
          "rowValidators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowValidatorDto"
            },
            "x-nullable": false
          }
        }
      },
      "SchemaVersionUpdateDto": {
        "type": "object",
        "properties": {
          "tracingMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "schemaVersionName": {
            "type": "string",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnWriteDto"
            },
            "x-nullable": false
          },
          "rowValidators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowValidatorDto"
            },
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "SchemaVersionWriteDto": {
        "type": "object",
        "properties": {
          "schemaId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "schemaVersionName": {
            "type": "string",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnWriteDto"
            },
            "x-nullable": false
          },
          "rowValidators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowValidatorDto"
            },
            "nullable": true,
            "x-nullable": true
          },
          "extensions": {
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "SchemaWriteDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "shortName": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnWriteDto"
            },
            "x-nullable": false
          },
          "rowValidators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowValidatorDto"
            },
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "ScopeType": {
        "enum": [
          "Tenant",
          "Workspace",
          "Dataset"
        ],
        "type": "string"
      },
      "SecurityRuleSet": {
        "enum": [
          "None",
          "Level1",
          "Level2"
        ],
        "type": "string"
      },
      "Severity": {
        "enum": [
          "Error",
          "Warning",
          "Fallback"
        ],
        "type": "string"
      },
      "SharedByDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "x-nullable": true
          },
          "sharedByType": {
            "$ref": "#/components/schemas/SharedByTypesDTO"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "SharedByInfoResultDTO": {
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "x-nullable": true
          },
          "sharedBy": {
            "$ref": "#/components/schemas/SharedByDTO"
          }
        }
      },
      "SharedByTypesDTO": {
        "enum": [
          "User",
          "Workspace"
        ],
        "type": "string"
      },
      "SharedBysQueryDTO": {
        "type": "object",
        "properties": {
          "datasetIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "x-nullable": false
          }
        }
      },
      "SortDirection": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "Sorting": {
        "type": "object",
        "properties": {
          "column": {
            "type": "string",
            "x-nullable": false
          },
          "order": {
            "$ref": "#/components/schemas/SortingOrder"
          }
        }
      },
      "SortingOrder": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "StatusLogModel": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/LogStatus"
          },
          "correlationId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          },
          "message": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "fileName": {
            "type": "string",
            "x-nullable": false
          },
          "dataSetName": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "datasetId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "x-nullable": true
          }
        }
      },
      "StoragePermissionType": {
        "enum": [
          "Read",
          "Write"
        ],
        "type": "string"
      },
      "StorageQueryDto": {
        "type": "object",
        "properties": {
          "storageName": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "readOrWritePermission": {
            "$ref": "#/components/schemas/StoragePermissionType"
          },
          "startsOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "x-nullable": true
          },
          "expiresOn": {
            "type": "string",
            "format": "date-time",
            "x-nullable": false
          }
        }
      },
      "StructLayoutAttribute": {
        "type": "object",
        "properties": {
          "typeId": {
            "readOnly": true,
            "x-nullable": false
          },
          "value": {
            "$ref": "#/components/schemas/LayoutKind"
          }
        }
      },
      "Type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFunctionPointer": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isUnmanagedFunctionPointer": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "x-nullable": false
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true,
            "x-nullable": false
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "TypeAttributes": {
        "enum": [
          "NotPublic",
          "Public",
          "NestedPublic",
          "NestedPrivate",
          "NestedFamily",
          "NestedAssembly",
          "NestedFamANDAssem",
          "VisibilityMask",
          "SequentialLayout",
          "ExplicitLayout",
          "LayoutMask",
          "Interface",
          "Abstract",
          "Sealed",
          "SpecialName",
          "RTSpecialName",
          "Import",
          "Serializable",
          "WindowsRuntime",
          "UnicodeClass",
          "AutoClass",
          "StringFormatMask",
          "HasSecurity",
          "ReservedMask",
          "BeforeFieldInit",
          "CustomFormatMask"
        ],
        "type": "string"
      },
      "TypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "x-nullable": false
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "x-nullable": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isFunctionPointer": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isUnmanagedFunctionPointer": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "x-nullable": false
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "x-nullable": false
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true,
            "x-nullable": false
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true,
            "x-nullable": false
          },
          "genericTypeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "declaredConstructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstructorInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "declaredEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "declaredFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "declaredMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "declaredMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "declaredNestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "declaredProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInfo"
            },
            "readOnly": true,
            "x-nullable": false
          },
          "implementedInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "readOnly": true,
            "x-nullable": false
          }
        }
      },
      "UserInviteDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "x-nullable": false
          },
          "role": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "UserInviteResponseDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "x-nullable": false
          }
        }
      },
      "WorkspaceCreationDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "region": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "WorkspaceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-nullable": false
          },
          "name": {
            "type": "string",
            "x-nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "region": {
            "type": "string",
            "x-nullable": false
          }
        }
      },
      "WorkspacePatchDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "x-nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://logintest.veracity.com/ed815121-cdfa-4097-b524-e2b23cd36eb6/b2c_1a_signinwithadfsidp/oauth2/v2.0/authorize",
            "scopes": {
              "https://dnvglb2ctest.onmicrosoft.com/a4a8e726-c1cc-407c-83a0-4ce37f1ce130/user_impersonation": "Gateway"
            }
          }
        }
      },
      "Bearer": {
        "type": "http",
        "scheme": "Bearer"
      }
    }
  },
  "security": [
    {
      "OAuth2": []
    },
    {
      "Bearer": []
    }
  ]
}
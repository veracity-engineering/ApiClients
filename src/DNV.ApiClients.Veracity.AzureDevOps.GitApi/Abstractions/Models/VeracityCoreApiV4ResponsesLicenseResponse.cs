// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.AzureDevOps.GitApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    public partial class VeracityCoreApiV4ResponsesLicenseResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VeracityCoreApiV4ResponsesLicenseResponse class.
        /// </summary>
        public VeracityCoreApiV4ResponsesLicenseResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VeracityCoreApiV4ResponsesLicenseResponse class.
        /// </summary>
        /// <param name="objectId">The globally unique identifier (GUID) for
        /// the object¨. Profile id for profile licenses and the group id for
        /// group licenses</param>
        /// <param name="accessLevel">Indicates the accessLevel of the uses in
        /// the application instance, only applicable for applications with
        /// tenant wide roles. eg:  'owner', 'contributor', 'reader'.</param>
        /// <param name="isLocked">when the isLocked is true, the user cannot
        /// be removed from the application instance. The user is normally a
        /// service principal that comes with the application and is required
        /// for the application to work. This does not count towards the
        /// license count.</param>
        /// <param name="email">The email for profile licenses.</param>
        /// <param name="state">Possible values include: 'Pending',
        /// 'Active'</param>
        /// <param name="isServicePrincipal">Value indicating whether the user
        /// is a service principal.</param>
        /// <param name="userId">The user id as found in Veracity Identity for
        /// profile licenses and the group id for group licenses</param>
        /// <param name="licenseType">Possible values include: 'profile',
        /// 'userGroup'</param>
        /// <param name="isApplicationAdmin">Indicates that the user can add
        /// licenses to other users for this application.</param>
        /// <param name="applicationId">The ID of the application. This is the
        /// same as the serviceId in developer.</param>
        /// <param name="applicationInstanceId">The ID of the instance of an
        /// application in tenant.</param>
        /// <param name="accessHubProfileUrl">The url to the member profile
        /// page in access hub, this is only valid for profile licenses</param>
        /// <param name="accessHubGroupUrl">The url to the group page in access
        /// hub, only valid for group licenses</param>
        /// <param name="accessHubApplicationUrl">The url to the application
        /// page in access hub</param>
        /// <param name="name">The name of the tenant entity.</param>
        /// <param name="tenantId">The ID of the tenant.</param>
        /// <param name="properties">The extension properties of the tenant
        /// entity. extension properties are case sensitive and shall user
        /// {appPrefix}_{propertyName} format, appPrefixes are defined in
        /// developer.veracity.com.</param>
        /// <param name="accessHubTenantHomeUrl">get the url to the tenants
        /// home page in access hub</param>
        public VeracityCoreApiV4ResponsesLicenseResponse(System.Guid? objectId = default, string accessLevel = default, bool? isLocked = default, string email = default, VeracityCoreApiV4ResponsesLicenseStates? state = default, bool? isServicePrincipal = default, System.Guid? userId = default, VeracityCoreApiV4ResponsesEntityTypes? licenseType = default, bool? isApplicationAdmin = default, string applicationId = default, string applicationInstanceId = default, string accessHubProfileUrl = default, string accessHubGroupUrl = default, string accessHubApplicationUrl = default, string name = default, System.Guid? tenantId = default, VeracityCoreApiV4ResponsesMetadata metadata = default, IEnumerable<VeracityCoreApiV4ResponsesExtensionProperty> properties = default, string accessHubTenantHomeUrl = default)
        {
            ObjectId = objectId;
            AccessLevel = accessLevel;
            IsLocked = isLocked;
            Email = email;
            State = state;
            IsServicePrincipal = isServicePrincipal;
            UserId = userId;
            LicenseType = licenseType;
            IsApplicationAdmin = isApplicationAdmin;
            ApplicationId = applicationId;
            ApplicationInstanceId = applicationInstanceId;
            AccessHubProfileUrl = accessHubProfileUrl;
            AccessHubGroupUrl = accessHubGroupUrl;
            AccessHubApplicationUrl = accessHubApplicationUrl;
            Name = name;
            TenantId = tenantId;
            Metadata = metadata;
            Properties = properties;
            AccessHubTenantHomeUrl = accessHubTenantHomeUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the globally unique identifier (GUID) for the object¨.
        /// Profile id for profile licenses and the group id for group licenses
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public System.Guid? ObjectId { get; set; }

        /// <summary>
        /// Gets or sets indicates the accessLevel of the uses in the
        /// application instance, only applicable for applications with tenant
        /// wide roles. eg:  'owner', 'contributor', 'reader'.
        /// </summary>
        [JsonProperty(PropertyName = "accessLevel")]
        public string AccessLevel { get; set; }

        /// <summary>
        /// Gets or sets when the isLocked is true, the user cannot be removed
        /// from the application instance. The user is normally a service
        /// principal that comes with the application and is required for the
        /// application to work. This does not count towards the license count.
        /// </summary>
        [JsonProperty(PropertyName = "isLocked")]
        public bool? IsLocked { get; set; }

        /// <summary>
        /// Gets or sets the email for profile licenses.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Pending', 'Active'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public VeracityCoreApiV4ResponsesLicenseStates? State { get; set; }

        /// <summary>
        /// Gets or sets value indicating whether the user is a service
        /// principal.
        /// </summary>
        [JsonProperty(PropertyName = "isServicePrincipal")]
        public bool? IsServicePrincipal { get; set; }

        /// <summary>
        /// Gets or sets the user id as found in Veracity Identity for profile
        /// licenses and the group id for group licenses
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public System.Guid? UserId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'profile', 'userGroup'
        /// </summary>
        [JsonProperty(PropertyName = "licenseType")]
        public VeracityCoreApiV4ResponsesEntityTypes? LicenseType { get; set; }

        /// <summary>
        /// Gets or sets indicates that the user can add licenses to other
        /// users for this application.
        /// </summary>
        [JsonProperty(PropertyName = "isApplicationAdmin")]
        public bool? IsApplicationAdmin { get; set; }

        /// <summary>
        /// Gets or sets the ID of the application. This is the same as the
        /// serviceId in developer.
        /// </summary>
        [JsonProperty(PropertyName = "applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the ID of the instance of an application in tenant.
        /// </summary>
        [JsonProperty(PropertyName = "applicationInstanceId")]
        public string ApplicationInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the url to the member profile page in access hub, this
        /// is only valid for profile licenses
        /// </summary>
        [JsonProperty(PropertyName = "accessHubProfileUrl")]
        public string AccessHubProfileUrl { get; set; }

        /// <summary>
        /// Gets or sets the url to the group page in access hub, only valid
        /// for group licenses
        /// </summary>
        [JsonProperty(PropertyName = "accessHubGroupUrl")]
        public string AccessHubGroupUrl { get; set; }

        /// <summary>
        /// Gets or sets the url to the application page in access hub
        /// </summary>
        [JsonProperty(PropertyName = "accessHubApplicationUrl")]
        public string AccessHubApplicationUrl { get; set; }

        /// <summary>
        /// Gets or sets the name of the tenant entity.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ID of the tenant.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public System.Guid? TenantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public VeracityCoreApiV4ResponsesMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or sets the extension properties of the tenant entity.
        /// extension properties are case sensitive and shall user
        /// {appPrefix}_{propertyName} format, appPrefixes are defined in
        /// developer.veracity.com.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IEnumerable<VeracityCoreApiV4ResponsesExtensionProperty> Properties { get; set; }

        /// <summary>
        /// Gets or sets get the url to the tenants home page in access hub
        /// </summary>
        [JsonProperty(PropertyName = "accessHubTenantHomeUrl")]
        public string AccessHubTenantHomeUrl { get; set; }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.AzureDevOps.GitApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    /// <summary>
    /// Represents the response for an application.
    /// </summary>
    public partial class VeracityCoreApiV4ResponsesApplicationResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VeracityCoreApiV4ResponsesApplicationResponse class.
        /// </summary>
        public VeracityCoreApiV4ResponsesApplicationResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VeracityCoreApiV4ResponsesApplicationResponse class.
        /// </summary>
        /// <param name="installmentState">Possible values include: 'Pending',
        /// 'Active'</param>
        /// <param name="managementMode">Possible values include: 'Legacy',
        /// 'VeracityManaged', 'Hybrid', 'ServiceManaged'</param>
        /// <param name="orderNumber">The order number of the application. this
        /// is populated by the marketplace when the application is
        /// purchased.</param>
        /// <param name="accessLevels">Lists the available access levels for
        /// the application.</param>
        /// <param name="production">Value indicating whether the application
        /// is in production.</param>
        /// <param name="pricingTier">The pricing tier of the application. This
        /// is used by the marketplace to indicate variant, sku , or pricing
        /// tier, only used by the application itself.
        /// This is a free text field and can be used by the application to
        /// store any information about the pricing tier.</param>
        /// <param name="applicationId">The ID of the application. This is the
        /// same as the serviceId in developer.</param>
        /// <param name="applicationInstanceId">The globally unique identifier
        /// (GUID) for the application.</param>
        /// <param name="accessHubApplicationUrl">The url to the application
        /// page in access hub.</param>
        /// <param name="name">The name of the tenant entity.</param>
        /// <param name="tenantId">The ID of the tenant.</param>
        /// <param name="properties">The extension properties of the tenant
        /// entity. extension properties are case sensitive and shall user
        /// {appPrefix}_{propertyName} format, appPrefixes are defined in
        /// developer.veracity.com.</param>
        /// <param name="accessHubTenantHomeUrl">get the url to the tenants
        /// home page in access hub</param>
        public VeracityCoreApiV4ResponsesApplicationResponse(VeracityCoreApiV4ResponsesLicenseStates? installmentState = default, VeracityCoreApiV4ResponsesManagementModes? managementMode = default, string orderNumber = default, IEnumerable<string> accessLevels = default, bool? production = default, string pricingTier = default, System.Guid? applicationId = default, System.Guid? applicationInstanceId = default, string accessHubApplicationUrl = default, string name = default, System.Guid? tenantId = default, VeracityCoreApiV4ResponsesMetadata metadata = default, IEnumerable<VeracityCoreApiV4ResponsesExtensionProperty> properties = default, string accessHubTenantHomeUrl = default)
        {
            InstallmentState = installmentState;
            ManagementMode = managementMode;
            OrderNumber = orderNumber;
            AccessLevels = accessLevels;
            Production = production;
            PricingTier = pricingTier;
            ApplicationId = applicationId;
            ApplicationInstanceId = applicationInstanceId;
            AccessHubApplicationUrl = accessHubApplicationUrl;
            Name = name;
            TenantId = tenantId;
            Metadata = metadata;
            Properties = properties;
            AccessHubTenantHomeUrl = accessHubTenantHomeUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Pending', 'Active'
        /// </summary>
        [JsonProperty(PropertyName = "installmentState")]
        public VeracityCoreApiV4ResponsesLicenseStates? InstallmentState { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Legacy', 'VeracityManaged',
        /// 'Hybrid', 'ServiceManaged'
        /// </summary>
        [JsonProperty(PropertyName = "managementMode")]
        public VeracityCoreApiV4ResponsesManagementModes? ManagementMode { get; set; }

        /// <summary>
        /// Gets or sets the order number of the application. this is populated
        /// by the marketplace when the application is purchased.
        /// </summary>
        [JsonProperty(PropertyName = "orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Gets or sets lists the available access levels for the application.
        /// </summary>
        [JsonProperty(PropertyName = "accessLevels")]
        public IEnumerable<string> AccessLevels { get; set; }

        /// <summary>
        /// Gets or sets value indicating whether the application is in
        /// production.
        /// </summary>
        [JsonProperty(PropertyName = "production")]
        public bool? Production { get; set; }

        /// <summary>
        /// Gets or sets the pricing tier of the application. This is used by
        /// the marketplace to indicate variant, sku , or pricing tier, only
        /// used by the application itself.
        /// This is a free text field and can be used by the application to
        /// store any information about the pricing tier.
        /// </summary>
        [JsonProperty(PropertyName = "pricingTier")]
        public string PricingTier { get; set; }

        /// <summary>
        /// Gets or sets the ID of the application. This is the same as the
        /// serviceId in developer.
        /// </summary>
        [JsonProperty(PropertyName = "applicationId")]
        public System.Guid? ApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the globally unique identifier (GUID) for the
        /// application.
        /// </summary>
        [JsonProperty(PropertyName = "applicationInstanceId")]
        public System.Guid? ApplicationInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the url to the application page in access hub.
        /// </summary>
        [JsonProperty(PropertyName = "accessHubApplicationUrl")]
        public string AccessHubApplicationUrl { get; set; }

        /// <summary>
        /// Gets or sets the name of the tenant entity.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ID of the tenant.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public System.Guid? TenantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public VeracityCoreApiV4ResponsesMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or sets the extension properties of the tenant entity.
        /// extension properties are case sensitive and shall user
        /// {appPrefix}_{propertyName} format, appPrefixes are defined in
        /// developer.veracity.com.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IEnumerable<VeracityCoreApiV4ResponsesExtensionProperty> Properties { get; set; }

        /// <summary>
        /// Gets or sets get the url to the tenants home page in access hub
        /// </summary>
        [JsonProperty(PropertyName = "accessHubTenantHomeUrl")]
        public string AccessHubTenantHomeUrl { get; set; }

    }
}

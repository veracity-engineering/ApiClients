// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using System.Linq;
using DNV.ApiClients.Veracity.AzureDevOps.GitApi.Interfaces;

namespace DNV.ApiClients.Veracity.AzureDevOps.GitApi
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ### Documentation and scenarios
    ///
    /// #### Applications
    ///
    /// The `Applications` interface provides methods to interact with
    /// applications within a tenant. It supports retrieving applications,
    /// verifying user licenses, and managing user and group licenses.
    ///
    /// - **GetApplications** (`GET /tenants/{tenantId}/applications`):
    /// Retrieves applications installed in a tenant with support for OData
    /// query parameters.
    /// - **GetApplication** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}`): Retrieves a
    /// specific application by its public ID.
    /// - **GetLicenses** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`): Retrieves
    /// all direct users and groups with licenses for an application.
    /// - **VerifyUserLicense** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{userId}`):
    /// Verifies if a user has a license for an application.
    /// - **GetApplicationUsersExploded** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/users`): Retrieves all
    /// users, including those inherited from groups, with deduplication
    /// support.
    /// - **AddUserOrGroupLicense** (`POST
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`): Adds a
    /// user or group license to an application.
    /// - **SetAccessLevel** (`PUT
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}`):
    /// Sets access level on an existing subscription.
    /// - **UpdateLicense** (`PATCH
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}`):
    /// Updates license details using a JSON patch document.
    /// - **DeleteLicense** (`DELETE
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}`):
    /// Removes a subscription.
    /// - **GetTenantsForApplication** (`GET
    /// /applications/{applicationId}/tenants`): Retrieves all tenants where
    /// the application is installed.
    /// - **PatchApplication** (`PATCH
    /// /tenants/{tenantId}/applications/{applicationId}`): Updates application
    /// extension properties using a JSON patch document.
    /// - **GetAdministrators** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/administrators`):
    /// Lists application administrators.
    /// - **AddAdministrator** (`POST
    /// /tenants/{tenantId}/applications/{applicationId}/administrators/{userId}`):
    /// Adds a user as an application administrator.
    /// - **DeleteAdministrator** (`DELETE
    /// /tenants/{tenantId}/applications/{applicationId}/administrators/{userId}`):
    /// Removes an application administrator.
    ///
    /// #### Groups
    ///
    /// The `Groups` interface provides methods to manage groups and their
    /// members within a tenant. It supports retrieving groups, group members,
    /// and updating group properties.
    ///
    /// - **GetGroups** (`GET /tenants/{tenantId}/groups`): Retrieves groups in
    /// a tenant with support for OData query parameters.
    /// - **GetGroup** (`GET /tenants/{tenantId}/groups/{groupId}`): Retrieves
    /// a specific group by its ID.
    /// - **GetGroupMembers** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/members`): Retrieves all direct
    /// users and groups within a group.
    /// - **GetMembersExploded** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/members/exploded`): Retrieves all
    /// users, including those inherited from groups.
    /// - **PatchMember** (`PATCH
    /// /tenants/{tenantId}/groups/{groupId}/members/{memberId}`): Updates
    /// member properties using a JSON patch document.
    /// - **PatchGroup** (`PATCH /tenants/{tenantId}/groups/{groupId}`):
    /// Updates group properties using a JSON patch document.
    /// - **GetMemberOf** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/memberOf`): Lists all groups a
    /// specific group is a member of.
    /// - **GetApplications** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/applications`) Get the
    /// applications licensed for the group
    ///
    /// #### Me
    ///
    /// The `Me` interface provides methods to retrieve information about the
    /// logged-on user, including their applications, groups, and tenants.
    ///
    /// - **GetMyInfo** (`GET /me`): Retrieves details for the logged-on user.
    /// - **GetMyApplications** (`GET /me/applications`): Retrieves all
    /// applications the user has access to.
    /// - **GetMyTenantApplications** (`GET
    /// /me/tenants/{tenantId}/applications`): Retrieves all applications in a
    /// tenant the user has access to.
    /// - **GetMyGroups** (`GET /me/tenants/{tenantId}/groups`): Retrieves the
    /// groups the logged-on user belongs to.
    /// - **GetMyTenants** (`GET /me/tenants`): Retrieves all tenants the
    /// logged-on user is a member of.
    /// - **GetMyTenantsWithApplication** (`GET
    /// /me/applications/{applicationId}/tenants`): Retrieves all tenants the
    /// logged-on user is a member of and has access to a specific application.
    /// - **VerifyUserPolicy** (`GET
    /// /me/applications/{applicationId}/.policy()`): Verifies Veracity user
    /// policies and returns appropriate responses based on policy compliance.
    ///
    /// #### Tenants
    ///
    /// The `Tenants` interface provides methods to interact with tenants,
    /// including retrieving tenant details and managing tenant administrators.
    ///
    /// - **GetTenant** (`GET /tenants/{tenantId}`): Retrieves a tenant by its
    /// ID.
    /// - **GetTenants** (`GET /tenants`): Retrieves a list of tenants linked
    /// to a specific service.
    /// - **GetAdmin** (`GET /tenants/{tenantId}/admins/{userId}`): Retrieves
    /// admin details for a user by their ID.
    /// - **GetAdmins** (`GET /tenants/{tenantId}/admins`): Retrieves all
    /// admins of a tenant, both global and local.
    ///
    /// #### Users
    ///
    ///
    /// The `Users` interface provides methods to manage users within a tenant,
    /// including retrieving user details, groups, and applications.
    ///
    /// - **GetUserByEmail** (`GET /tenants/{tenantId}/users/.email({email})`):
    /// Retrieves a user by their email address.
    /// - **GetUser** (`GET /users/{userId}`): Retrieves a user by their ID.
    /// - **ListUsers** (`GET /tenants/{tenantId}/users`): Retrieves a list of
    /// users in a tenant with support for OData query parameters.
    /// - **GetUserInTenant** (`GET /tenants/{tenantId}/users/{userId}`):
    /// Retrieves the details of a user in a tenant.
    /// - **GetGroupsForUser** (`GET
    /// /tenants/{tenantId}/users/{userId}/groups`): Retrieves the groups
    /// associated with a user.
    /// - **GetApplicationsForUser** (`GET
    /// /tenants/{tenantId}/users/{userId}/applications`): Retrieves the
    /// applications associated with a user.
    /// - **GetTenantsForUser** (`GET /users/{userId}/tenants`): Retrieves the
    /// tenants a user is a member of.
    /// - **ResolveUsers** (`POST /tenants/{tenantId}/users`): Retrieves full
    /// user details for a list of user IDs.
    /// - **UpdateUserProperties** (`PATCH
    /// /tenants/{tenantId}/users/{userId}`): Updates the extension properties
    /// for a user using a JSON patch document.
    ///
    /// ### According JsonPatch
    ///
    /// The api uses jsonPatch to update data within the graph. Common use-case
    /// for updating an entity in the graph is to add/update or remove
    /// extension properties. Here are some sample updates:
    ///
    /// Let's say we start out with this properties collection:
    /// ```JSON
    /// "properties": [
    /// {
    /// "name": "vtmd2_allowedVessels",
    /// "value": ""
    /// }
    /// ]
    /// ```
    ///
    /// Update a user to indicate the vessels the user can see in the app and
    /// mark the new application user as seeb by an admin.
    ///
    /// ```JSON
    /// [
    /// {
    /// "value": {
    /// "Name": "vtmd2_allowedVessels",
    /// "Value": "7911545;7911533"
    /// },
    /// "path": "/properties/-",
    /// "op": "replace"
    /// },
    /// {
    /// "value": {
    /// "Name": "vtmd2_isSeen",
    /// "Value": "true"
    /// },
    /// "path": "/properties/-",
    /// "op": "add"
    /// }
    /// ]
    /// ```
    ///
    /// This result in the following properties:
    /// ```json
    /// "properties": [
    /// {
    /// "name": "vtmd2_allowedVessels",
    /// "value": "7911545;7911533"
    /// },
    /// {
    /// "name": "vtmd2_isSeen",
    /// "value": "true"
    /// }
    /// ]
    /// ```
    ///
    /// Let's say we want remove the allowedVessels list and reset the isSeen
    /// flag. We remove the the  vtmd2_allowedVessels property by it's index
    /// and then do other operations. This is due to the fact that the order of
    /// elements can change when we do other operations, and remove does not
    /// support removing by name.
    ///
    /// The same type of operations can be performed on any entity or
    /// relationship in the graph.
    ///
    /// ```JSON
    /// [
    /// "path": "/properties/0",
    /// "op": "remove"
    /// },
    /// {
    /// "value": {
    /// "Name": "vtmd2_isSeen",
    /// "Value": "false"
    /// },
    /// "path": "/properties/-",
    /// "op": "replace"
    /// }
    /// ]
    /// ```
    ///
    /// This result in the following properties:
    /// ```json
    /// "properties": [
    /// {
    /// "name": "vtmd2_isSeen",
    /// "value": "false"
    /// }
    /// ]
    /// ```
    ///
    /// the nuget packages Veracity provides does have helper methods to
    /// construct these queries and run tem directly against the api.
    ///
    /// ```CS
    /// user.MakeJsonPatch()
    /// .AddOrUpdateProperty("allowedVessels", "7911545;7911533")
    /// .AddOrUpdateProperty("isSeen", "true")
    /// .ExecutePatchUserAsync();
    /// ```
    ///
    /// ### Scenario Usage
    ///
    /// #### common to all
    /// - **Policy**: use `POST /me/applications/{applicationId}/.policy()` to
    /// check that all user policies are fulfilled, usually called right after
    /// the token is aquired
    ///
    /// #### Seating Tracker for Hot Seating Workplaces (simple and
    /// intermediate applications )
    ///
    /// This application type leverages Veracity Access hub to assign license
    /// and roles to the users.
    ///
    /// - **Multi-tenant application**: Use `GET
    /// /me/applications/{applicationId}/tenants` to retrieve tenants the user
    /// has access to and the application is installed in, used to present the
    /// tenant selector screen.
    /// - **Access levels and permissions**: Use `GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`to list all
    /// users and `GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{userId}` to
    /// manage and verify user licenses and the accessLevel.
    ///
    ///
    /// #### Health and Safety Tracker Application (simple authorization model
    /// for most users, but advanced for some)
    ///
    /// This application type leverages Veracity Access Hub to assign the least
    /// privilege to the users, while advanced rights must be granted within
    /// the application's admin module.
    ///
    /// - **Detailed permissions**: Use `GET /tenants/{tenantId}/groups` and
    /// `GET /tenants/{tenantId}/groups/{groupId}/members` to manage
    /// group-based permissions.
    /// - **Local copy for performance**: Use `GET
    /// /tenants/{tenantId}/applications/{applicationId}/users` to retrieve all
    /// users (direct and indirect) and manage local copies for performance.
    ///
    /// #### Applications with no clear least privilege and a complex
    /// authorization model
    ///
    /// This category includes applications with row or entity level security.
    /// The authorization requirements are based on data stored in the
    /// application and that is not know to Veracity Access Hub.
    ///
    /// - **Complex authorization**: Use `GET /tenants/{tenantId}/groups` and
    /// `GET /tenants/{tenantId}/groups/{groupId}/members` to manage
    /// group-based permissions.
    /// - **inform veracity about application license**: Use  `POST
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`this will
    /// show the tile in myServices and make sure that Veracity can count
    /// licenses (and enforce cap if applicable) in the tenant.
    ///
    ///
    /// #### Additional Information
    ///
    /// These interfaces and methods provide a comprehensive way to manage
    /// multi-tenant applications, user permissions, and group memberships,
    /// aligning with the scenarios described.
    ///
    /// All applications can leverage the Veracity domain events to replicate
    /// data locally to improve performance and remove single points of
    /// failure. This is not recommended for simple applications or
    /// applications with limited budgets or developers since the complexity of
    /// nested groups can make it too costly to implement.
    ///
    /// There is a NuGet package available on nuget.org that plugs into the
    /// other packages Veracity provides: Veracity.Core.Api.V4
    ///
    /// &gt; Service build version 20241015.1 - Environment: Test
    /// </summary>
    public partial class AzureDevOpsGitApiClient : ServiceClient<AzureDevOpsGitApiClient>, IAzureDevOpsGitApiClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AzureDevOpsGitApiClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        public AzureDevOpsGitApiClient(HttpClient httpClient) : base(httpClient, true)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDevOpsGitApiClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AzureDevOpsGitApiClient.Dispose(). False: will not dispose provided httpClient</param>
        public AzureDevOpsGitApiClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDevOpsGitApiClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public AzureDevOpsGitApiClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDevOpsGitApiClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public AzureDevOpsGitApiClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDevOpsGitApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AzureDevOpsGitApiClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AzureDevOpsGitApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AzureDevOpsGitApiClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BaseUri = new System.Uri("https://api-v4-ica5dyfal6qp2-test.azurewebsites.net");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <summary>
        /// Get applications installed in the tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/applications?$filter=serviceId
        /// eq
        /// '88dd8fdc-c6db-49d4-89f5-76bc4e7c8d57'&amp;$top=1&amp;$skip=0&amp;search=Interface&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesApplicationResponse>> ApplicationsApiControllerGetApplicationsGET2WithHttpMessagesAsync(string tenantId, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            IList<string> _queryParameters = new List<string>();
            if (odata != null)
            {
                _queryParameters.Add(string.Format("odata={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(odata, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesApplicationResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesApplicationResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get applications installed in the tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/applications?$filter=serviceId
        /// eq
        /// '88dd8fdc-c6db-49d4-89f5-76bc4e7c8d57'&amp;$top=1&amp;$skip=0&amp;search=Interface&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesApplicationResponse> ApplicationsApiControllerGetApplicationsGET2Async(string tenantId, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerGetApplicationsGET2WithHttpMessagesAsync(tenantId, odata, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get application by public id&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesApplicationResponse>> ApplicationsApiControllerGetApplicationGET2WithHttpMessagesAsync(string tenantId, System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesApplicationResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesApplicationResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get application by public id&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesApplicationResponse> ApplicationsApiControllerGetApplicationGET2Async(string tenantId, System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerGetApplicationGET2WithHttpMessagesAsync(tenantId, applicationId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update extension properties for a group. Extension properties have the name
        /// format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesApplicationResponse>> ApplicationsApiControllerPatchApplicationPATCH3WithHttpMessagesAsync(string tenantId, System.Guid applicationId, IEnumerable<Operation> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PATCH");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesApplicationResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesApplicationResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Update extension properties for a group. Extension properties have the name
        /// format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesApplicationResponse> ApplicationsApiControllerPatchApplicationPATCH3Async(string tenantId, System.Guid applicationId, IEnumerable<Operation> body = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerPatchApplicationPATCH3WithHttpMessagesAsync(tenantId, applicationId, body, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all direct users and/or groups. LicenseType values - profile: personal
        /// licenses, userGroup: license given to a group or empty string: get both
        /// personal and group licenses&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesLicenseResponse>>> ApplicationsApiControllerGetLicensesGET3WithHttpMessagesAsync(string tenantId, System.Guid applicationId, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/licenses").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (licenseType != null)
            {
                _queryParameters.Add(string.Format("licenseType={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(licenseType, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesLicenseResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesLicenseResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all direct users and/or groups. LicenseType values - profile: personal
        /// licenses, userGroup: license given to a group or empty string: get both
        /// personal and group licenses&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesLicenseResponse>> ApplicationsApiControllerGetLicensesGET3Async(string tenantId, System.Guid applicationId, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerGetLicensesGET3WithHttpMessagesAsync(tenantId, applicationId, licenseType, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Add user or group license to application&lt;br/&gt;tenantId can be the guid
        /// or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>> ApplicationsApiControllerAddLicensePOST3WithHttpMessagesAsync(string tenantId, System.Guid applicationId, VeracityCoreApiV4RequestsLicenseRequest body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (body != null)
            {
                body.Validate();
            }
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/licenses").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesLicenseResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Add user or group license to application&lt;br/&gt;tenantId can be the guid
        /// or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesLicenseResponse> ApplicationsApiControllerAddLicensePOST3Async(string tenantId, System.Guid applicationId, VeracityCoreApiV4RequestsLicenseRequest body = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerAddLicensePOST3WithHttpMessagesAsync(tenantId, applicationId, body, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Verify user license&lt;br/&gt;tenantId can be the guid or the dnvCustomerId
        /// for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>> ApplicationsApiControllerVerifyUserLicenseGET3WithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/licenses/{userId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesLicenseResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Verify user license&lt;br/&gt;tenantId can be the guid or the dnvCustomerId
        /// for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesLicenseResponse> ApplicationsApiControllerVerifyUserLicenseGET3Async(string tenantId, System.Guid applicationId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerVerifyUserLicenseGET3WithHttpMessagesAsync(tenantId, applicationId, userId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// All users, both direct and inherited
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all users including inherited from groups, deduplication is by default
        /// in effect. disable deduplication to detect users with multiple paths to the
        /// application in the tenant.&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='deduplicate'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserLicenseResponse>>> ApplicationsApiControllerGetApplicationUsersExplodedGET3WithHttpMessagesAsync(string tenantId, System.Guid applicationId, bool? deduplicate = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/users").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (deduplicate != null)
            {
                _queryParameters.Add(string.Format("deduplicate={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(deduplicate, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserLicenseResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesUserLicenseResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// All users, both direct and inherited
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all users including inherited from groups, deduplication is by default
        /// in effect. disable deduplication to detect users with multiple paths to the
        /// application in the tenant.&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='deduplicate'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesUserLicenseResponse>> ApplicationsApiControllerGetApplicationUsersExplodedGET3Async(string tenantId, System.Guid applicationId, bool? deduplicate = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerGetApplicationUsersExplodedGET3WithHttpMessagesAsync(tenantId, applicationId, deduplicate, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Only applicable for applications with access levels
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Set access level on an existing subscription. entityId is the id of the
        /// group or the person, and licenseType (profile,userGroup) indicates which
        /// type of license you are updating&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>> ApplicationsApiControllerSetAccessLevelPUT5WithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid entityId, string body = default, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{entityId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(entityId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (licenseType != null)
            {
                _queryParameters.Add(string.Format("licenseType={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(licenseType, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesLicenseResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Only applicable for applications with access levels
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Set access level on an existing subscription. entityId is the id of the
        /// group or the person, and licenseType (profile,userGroup) indicates which
        /// type of license you are updating&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesLicenseResponse> ApplicationsApiControllerSetAccessLevelPUT5Async(string tenantId, System.Guid applicationId, System.Guid entityId, string body = default, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerSetAccessLevelPUT5WithHttpMessagesAsync(tenantId, applicationId, entityId, body, licenseType, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// You can only update extension properties.
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update license details. Extension properties have the name format
        /// {prefix}_property name. Prefixes are registered in developer.veracity.com.
        /// EntityId is the id of the group or the person, and entityType
        /// (profile,userGroup) indicates which type of license you are
        /// updating&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>> ApplicationsApiControllerUpdateLicensePATCH5WithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid entityId, IEnumerable<Operation> body = default, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{entityId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(entityId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (licenseType != null)
            {
                _queryParameters.Add(string.Format("licenseType={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(licenseType, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PATCH");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesLicenseResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesLicenseResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// You can only update extension properties.
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update license details. Extension properties have the name format
        /// {prefix}_property name. Prefixes are registered in developer.veracity.com.
        /// EntityId is the id of the group or the person, and entityType
        /// (profile,userGroup) indicates which type of license you are
        /// updating&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesLicenseResponse> ApplicationsApiControllerUpdateLicensePATCH5Async(string tenantId, System.Guid applicationId, System.Guid entityId, IEnumerable<Operation> body = default, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerUpdateLicensePATCH5WithHttpMessagesAsync(tenantId, applicationId, entityId, body, licenseType, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Remove subscription. EntityId is the id of the group or the person, and
        /// licenseType (profile,userGroup) indicates which type of license you are
        /// removing&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> ApplicationsApiControllerDeleteLicenseDELETE4WithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid entityId, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{entityId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(entityId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (licenseType != null)
            {
                _queryParameters.Add(string.Format("licenseType={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(licenseType, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            return _result;
        }
        /// <summary>
        /// Remove subscription. EntityId is the id of the group or the person, and
        /// licenseType (profile,userGroup) indicates which type of license you are
        /// removing&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ApplicationsApiControllerDeleteLicenseDELETE4Async(string tenantId, System.Guid applicationId, System.Guid entityId, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            (await ApplicationsApiControllerDeleteLicenseDELETE4WithHttpMessagesAsync(tenantId, applicationId, entityId, licenseType, requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get all tenants where application is installed&lt;br/&gt;tenantId can be
        /// the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>> ApplicationsApiControllerGetTenantsForApplicationGET1WithHttpMessagesAsync(System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "applications/{applicationId}/tenants").ToString();
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all tenants where application is installed&lt;br/&gt;tenantId can be
        /// the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>> ApplicationsApiControllerGetTenantsForApplicationGET1Async(System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerGetTenantsForApplicationGET1WithHttpMessagesAsync(applicationId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// List application administrators&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesAdminUser>>> ApplicationsApiControllerGetAdministratorsGET2WithHttpMessagesAsync(string tenantId, System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/administrators").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesAdminUser>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesAdminUser>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// List application administrators&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesAdminUser>> ApplicationsApiControllerGetAdministratorsGET2Async(string tenantId, System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await ApplicationsApiControllerGetAdministratorsGET2WithHttpMessagesAsync(tenantId, applicationId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Add user as application administrator, this is only used by hybrid and
        /// service managed applications. If the application has access levels defined,
        /// this must be provided if the user doesn't have a license from
        /// before.&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='accessLevel'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> ApplicationsApiControllerAddAdministratorPOST4WithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, string accessLevel = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/administrators/{userId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (accessLevel != null)
            {
                _queryParameters.Add(string.Format("accessLevel={0}", System.Uri.EscapeDataString(accessLevel)));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            return _result;
        }
        /// <summary>
        /// Add user as application administrator, this is only used by hybrid and
        /// service managed applications. If the application has access levels defined,
        /// this must be provided if the user doesn't have a license from
        /// before.&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='accessLevel'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ApplicationsApiControllerAddAdministratorPOST4Async(string tenantId, System.Guid applicationId, System.Guid userId, string accessLevel = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            (await ApplicationsApiControllerAddAdministratorPOST4WithHttpMessagesAsync(tenantId, applicationId, userId, accessLevel, requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Remove application administrator, this is only used by hybrid and service
        /// managed applications&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='removeLicense'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> ApplicationsApiControllerDeleteAdministratorDELETE4WithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, bool? removeLicense = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/applications/{applicationId}/administrators/{userId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (removeLicense != null)
            {
                _queryParameters.Add(string.Format("removeLicense={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(removeLicense, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            return _result;
        }
        /// <summary>
        /// Remove application administrator, this is only used by hybrid and service
        /// managed applications&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='removeLicense'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ApplicationsApiControllerDeleteAdministratorDELETE4Async(string tenantId, System.Guid applicationId, System.Guid userId, bool? removeLicense = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            (await ApplicationsApiControllerDeleteAdministratorDELETE4WithHttpMessagesAsync(tenantId, applicationId, userId, removeLicense, requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get groups in the tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/groups?$filter=name eq
        /// 'AN_Techleads'&amp;$top=1&amp;$skip=0&lt;br/&gt;Retrieve groups and group
        /// members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesGroupResponse>> GroupsApiControllerGetGroupsGET2WithHttpMessagesAsync(string tenantId, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            IList<string> _queryParameters = new List<string>();
            if (odata != null)
            {
                _queryParameters.Add(string.Format("odata={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(odata, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesGroupResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesGroupResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get groups in the tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/groups?$filter=name eq
        /// 'AN_Techleads'&amp;$top=1&amp;$skip=0&lt;br/&gt;Retrieve groups and group
        /// members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesGroupResponse> GroupsApiControllerGetGroupsGET2Async(string tenantId, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerGetGroupsGET2WithHttpMessagesAsync(tenantId, odata, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get group by id&lt;br/&gt;Retrieve groups and group members to determine
        /// access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesGroupResponse>> GroupsApiControllerGetGroupGET2WithHttpMessagesAsync(string tenantId, System.Guid groupId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups/{groupId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{groupId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesGroupResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesGroupResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get group by id&lt;br/&gt;Retrieve groups and group members to determine
        /// access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesGroupResponse> GroupsApiControllerGetGroupGET2Async(string tenantId, System.Guid groupId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerGetGroupGET2WithHttpMessagesAsync(tenantId, groupId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update extension properties for a group. Extension properties have the name
        /// format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com. Pleas note that the order of operations can impact
        /// the result&lt;br/&gt;Retrieve groups and group members to determine access
        /// rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesGroupResponse>> GroupsApiControllerPatchGroupPATCH3WithHttpMessagesAsync(string tenantId, System.Guid groupId, IEnumerable<Operation> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups/{groupId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{groupId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PATCH");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesGroupResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesGroupResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Update extension properties for a group. Extension properties have the name
        /// format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com. Pleas note that the order of operations can impact
        /// the result&lt;br/&gt;Retrieve groups and group members to determine access
        /// rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesGroupResponse> GroupsApiControllerPatchGroupPATCH3Async(string tenantId, System.Guid groupId, IEnumerable<Operation> body = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerPatchGroupPATCH3WithHttpMessagesAsync(tenantId, groupId, body, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all direct users and groups&lt;br/&gt;Retrieve groups and group members
        /// to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='memberType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesMemberResponse>>> GroupsApiControllerGetGroupMembersGET3WithHttpMessagesAsync(string tenantId, System.Guid groupId, string memberType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups/{groupId}/members").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{groupId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (memberType != null)
            {
                _queryParameters.Add(string.Format("memberType={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(memberType, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesMemberResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesMemberResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all direct users and groups&lt;br/&gt;Retrieve groups and group members
        /// to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='memberType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesMemberResponse>> GroupsApiControllerGetGroupMembersGET3Async(string tenantId, System.Guid groupId, string memberType = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerGetGroupMembersGET3WithHttpMessagesAsync(tenantId, groupId, memberType, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all users including inherited from groups&lt;br/&gt;Retrieve groups and
        /// group members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserResponse>>> GroupsApiControllerGetMembersExplodedGET2WithHttpMessagesAsync(string tenantId, System.Guid groupId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups/{groupId}/users/exploded").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{groupId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesUserResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all users including inherited from groups&lt;br/&gt;Retrieve groups and
        /// group members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesUserResponse>> GroupsApiControllerGetMembersExplodedGET2Async(string tenantId, System.Guid groupId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerGetMembersExplodedGET2WithHttpMessagesAsync(tenantId, groupId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update extension properties  for a group membership. extension properties
        /// have the name format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;Retrieve groups and group members to
        /// determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='entityType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesMemberResponse>> GroupsApiControllerPatchMemberPATCH5WithHttpMessagesAsync(string tenantId, System.Guid groupId, System.Guid entityId, IEnumerable<Operation> body = default, string entityType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups/{groupId}/members/{entityId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{groupId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupId, SerializationSettings).Trim('"')));
            _url = _url.Replace("{entityId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(entityId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (entityType != null)
            {
                _queryParameters.Add(string.Format("entityType={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(entityType, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PATCH");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesMemberResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesMemberResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Update extension properties  for a group membership. extension properties
        /// have the name format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;Retrieve groups and group members to
        /// determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='entityType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesMemberResponse> GroupsApiControllerPatchMemberPATCH5Async(string tenantId, System.Guid groupId, System.Guid entityId, IEnumerable<Operation> body = default, string entityType = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerPatchMemberPATCH5WithHttpMessagesAsync(tenantId, groupId, entityId, body, entityType, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// List all groups this group is a member of&lt;br/&gt;Retrieve groups and
        /// group members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>> GroupsApiControllerGetMemberOfGET2WithHttpMessagesAsync(string tenantId, System.Guid groupId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups/{groupId}/memberOf").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{groupId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// List all groups this group is a member of&lt;br/&gt;Retrieve groups and
        /// group members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>> GroupsApiControllerGetMemberOfGET2Async(string tenantId, System.Guid groupId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerGetMemberOfGET2WithHttpMessagesAsync(tenantId, groupId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all applications this group has a license for&lt;br/&gt;Retrieve groups
        /// and group members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationResponse>>> GroupsApiControllerGetApplicationsGET2WithHttpMessagesAsync(string tenantId, System.Guid groupId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/groups/{groupId}/applications").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{groupId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(groupId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesApplicationResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all applications this group has a license for&lt;br/&gt;Retrieve groups
        /// and group members to determine access rights within your application
        ///
        /// tenantId can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='groupId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesApplicationResponse>> GroupsApiControllerGetApplicationsGET2Async(string tenantId, System.Guid groupId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GroupsApiControllerGetApplicationsGET2WithHttpMessagesAsync(tenantId, groupId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get details for the logged on user&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetails2Response>> MeControllerGetMyInfoGET0WithHttpMessagesAsync(string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "me").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetails2Response>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesUserDetails2Response>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get details for the logged on user&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesUserDetails2Response> MeControllerGetMyInfoGET0Async(string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await MeControllerGetMyInfoGET0WithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all applications the user has access to&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>> MeControllerGetMyApplicationsGET0WithHttpMessagesAsync(string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "me/applications").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all applications the user has access to&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>> MeControllerGetMyApplicationsGET0Async(string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await MeControllerGetMyApplicationsGET0WithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all applications in a tenant the user has access to&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>> MeControllerGetMyTenantApplicationsGET1WithHttpMessagesAsync(string tenantId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "me/tenants/{tenantId}/applications").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all applications in a tenant the user has access to&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>> MeControllerGetMyTenantApplicationsGET1Async(string tenantId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await MeControllerGetMyTenantApplicationsGET1WithHttpMessagesAsync(tenantId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the groups the logged on user belongs to&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>> MeControllerGetMyGroupsGET1WithHttpMessagesAsync(string tenantId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "me/tenants/{tenantId}/groups").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get the groups the logged on user belongs to&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>> MeControllerGetMyGroupsGET1Async(string tenantId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await MeControllerGetMyGroupsGET1WithHttpMessagesAsync(tenantId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all tenants the logged on user is a member of&lt;br/&gt;tenantId can be
        /// the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>>> MeControllerGetMyTenantsGET0WithHttpMessagesAsync(string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "me/tenants").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all tenants the logged on user is a member of&lt;br/&gt;tenantId can be
        /// the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>> MeControllerGetMyTenantsGET0Async(string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await MeControllerGetMyTenantsGET0WithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all tenants the logged on user is a member of and has access to the
        /// application&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>> MeControllerGetMyTenantsWithApplicationGET1WithHttpMessagesAsync(System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "me/applications/{applicationId}/tenants").ToString();
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all tenants the logged on user is a member of and has access to the
        /// application&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>> MeControllerGetMyTenantsWithApplicationGET1Async(System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await MeControllerGetMyTenantsWithApplicationGET1WithHttpMessagesAsync(applicationId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// ! This endpoint will ensure that federated users are properly enrolled !
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Verify Veracity user policies, returns an empty 202 response if all
        /// policies are ok, 406 with an error response that contains the url to send
        /// the user to correct the policy issue&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='returnUrl'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> MeControllerVerifyUserPolicyPOST2WithHttpMessagesAsync(System.Guid applicationId, string returnUrl = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "me/applications/{applicationId}/.policy()").ToString();
            _url = _url.Replace("{applicationId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(applicationId, SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (returnUrl != null)
            {
                _queryParameters.Add(string.Format("returnUrl={0}", System.Uri.EscapeDataString(returnUrl)));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            return _result;
        }
        /// <summary>
        /// ! This endpoint will ensure that federated users are properly enrolled !
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Verify Veracity user policies, returns an empty 202 response if all
        /// policies are ok, 406 with an error response that contains the url to send
        /// the user to correct the policy issue&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='returnUrl'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task MeControllerVerifyUserPolicyPOST2Async(System.Guid applicationId, string returnUrl = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            (await MeControllerVerifyUserPolicyPOST2WithHttpMessagesAsync(applicationId, returnUrl, requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Returns 200 when all dependencies are ok, 424 if there are some non
        /// essential dependency failures and 500 when essential dependencies are
        /// unreachable or the service is down&lt;br/&gt;
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCommonHealthStatusApiHealthStatus>> StatusServiceControllerGetServiceHealthStatusGET0WithHttpMessagesAsync(string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "health").ToString();
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCommonHealthStatusApiHealthStatus>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCommonHealthStatusApiHealthStatus>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Returns 200 when all dependencies are ok, 424 if there are some non
        /// essential dependency failures and 500 when essential dependencies are
        /// unreachable or the service is down&lt;br/&gt;
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCommonHealthStatusApiHealthStatus> StatusServiceControllerGetServiceHealthStatusGET0Async(string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await StatusServiceControllerGetServiceHealthStatusGET0WithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get tenant by id, tenantId can be the guid or the dnvCustomerId for the
        /// tenant&lt;br/&gt;
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesTenantResponse>> TenantsApiControllerGetTenantGET1WithHttpMessagesAsync(string tenantId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesTenantResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesTenantResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get tenant by id, tenantId can be the guid or the dnvCustomerId for the
        /// tenant&lt;br/&gt;
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesTenantResponse> TenantsApiControllerGetTenantGET1Async(string tenantId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await TenantsApiControllerGetTenantGET1WithHttpMessagesAsync(tenantId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get list of tenants linked to your service&lt;br/&gt;
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>> TenantsApiControllerGetTenantsGET1WithHttpMessagesAsync(string applicationId = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants").ToString();
            IList<string> _queryParameters = new List<string>();
            if (applicationId != null)
            {
                _queryParameters.Add(string.Format("applicationId={0}", System.Uri.EscapeDataString(applicationId)));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get list of tenants linked to your service&lt;br/&gt;
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesTenantResponse>> TenantsApiControllerGetTenantsGET1Async(string applicationId = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await TenantsApiControllerGetTenantsGET1WithHttpMessagesAsync(applicationId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the admin details for a user by their id&lt;br/&gt;
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesUserRoles>> TenantsApiControllerGetAdminGET2WithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/Administrators/{userId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesUserRoles>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesUserRoles>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get the admin details for a user by their id&lt;br/&gt;
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesUserRoles> TenantsApiControllerGetAdminGET2Async(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await TenantsApiControllerGetAdminGET2WithHttpMessagesAsync(tenantId, userId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all admins of the tenant, both global and local.&lt;br/&gt;
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserRoles>>> TenantsApiControllerGetAdminsGET1WithHttpMessagesAsync(string tenantId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/Administrators").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserRoles>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesUserRoles>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all admins of the tenant, both global and local.&lt;br/&gt;
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesUserRoles>> TenantsApiControllerGetAdminsGET1Async(string tenantId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await TenantsApiControllerGetAdminsGET1WithHttpMessagesAsync(tenantId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Retrieves a user by their email address&lt;br/&gt;tenantId can be the guid
        /// or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='email'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetailsResponse>> UsersApiControllerGetUserByEmailGET2WithHttpMessagesAsync(string tenantId, string email, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            if (email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "email");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/users/.email({email})").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{email}", System.Uri.EscapeDataString(email));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetailsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesUserDetailsResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Retrieves a user by their email address&lt;br/&gt;tenantId can be the guid
        /// or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='email'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesUserDetailsResponse> UsersApiControllerGetUserByEmailGET2Async(string tenantId, string email, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerGetUserByEmailGET2WithHttpMessagesAsync(tenantId, email, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get user by id&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for
        /// the tenant
        /// </summary>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetails2Response>> UsersApiControllerGetUserGET1WithHttpMessagesAsync(System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "users/{userId}").ToString();
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetails2Response>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesUserDetails2Response>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get user by id&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for
        /// the tenant
        /// </summary>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesUserDetails2Response> UsersApiControllerGetUserGET1Async(System.Guid userId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerGetUserGET1WithHttpMessagesAsync(userId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// List users in a tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/users?$filter=name eq
        /// 'Normann, Ola'&amp;$top=1&amp;$skip=0&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesUserResponse>> UsersApiControllerListUsersGET2WithHttpMessagesAsync(string tenantId, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/users").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            IList<string> _queryParameters = new List<string>();
            if (odata != null)
            {
                _queryParameters.Add(string.Format("odata={0}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(odata, SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesUserResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesUserResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// List users in a tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/users?$filter=name eq
        /// 'Normann, Ola'&amp;$top=1&amp;$skip=0&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesPagedList1VeracityCoreApiV4ResponsesUserResponse> UsersApiControllerListUsersGET2Async(string tenantId, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerListUsersGET2WithHttpMessagesAsync(tenantId, odata, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get full user details for a list of user ids&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserDetails2Response>>> UsersApiControllerResolveUsersPOST2WithHttpMessagesAsync(string tenantId, IEnumerable<System.Guid?> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/users").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesUserDetails2Response>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesUserDetails2Response>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get full user details for a list of user ids&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesUserDetails2Response>> UsersApiControllerResolveUsersPOST2Async(string tenantId, IEnumerable<System.Guid?> body = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerResolveUsersPOST2WithHttpMessagesAsync(tenantId, body, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get user details&lt;br/&gt;tenantId can be the guid or the dnvCustomerId
        /// for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetailsResponse>> UsersApiControllerGetUserInTenantGET2WithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/users/{userId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetailsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesUserDetailsResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get user details&lt;br/&gt;tenantId can be the guid or the dnvCustomerId
        /// for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesUserDetailsResponse> UsersApiControllerGetUserInTenantGET2Async(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerGetUserInTenantGET2WithHttpMessagesAsync(tenantId, userId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Update extension properties  for a user. Extension properties have the name
        /// format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetailsResponse>> UsersApiControllerPatchUserPATCH3WithHttpMessagesAsync(string tenantId, System.Guid userId, IEnumerable<Operation> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/users/{userId}").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PATCH");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 202)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<VeracityCoreApiV4ResponsesUserDetailsResponse>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 202)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<VeracityCoreApiV4ResponsesUserDetailsResponse>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Update extension properties  for a user. Extension properties have the name
        /// format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<VeracityCoreApiV4ResponsesUserDetailsResponse> UsersApiControllerPatchUserPATCH3Async(string tenantId, System.Guid userId, IEnumerable<Operation> body = default, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerPatchUserPATCH3WithHttpMessagesAsync(tenantId, userId, body, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get user details&lt;br/&gt;tenantId can be the guid or the dnvCustomerId
        /// for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>> UsersApiControllerGetGroupsForUserGET2WithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/users/{userId}/groups").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get user details&lt;br/&gt;tenantId can be the guid or the dnvCustomerId
        /// for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesGroupResponse>> UsersApiControllerGetGroupsForUserGET2Async(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerGetGroupsForUserGET2WithHttpMessagesAsync(tenantId, userId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get all applications in a tenant the user has access to&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>> UsersApiControllerGetApplicationsForUserGET2WithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (tenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tenantId");
            }
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "tenants/{tenantId}/users/{userId}/applications").ToString();
            _url = _url.Replace("{tenantId}", System.Uri.EscapeDataString(tenantId));
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get all applications in a tenant the user has access to&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesApplicationLicenseResponse>> UsersApiControllerGetApplicationsForUserGET2Async(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerGetApplicationsForUserGET2WithHttpMessagesAsync(tenantId, userId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get the tenants a user is member of&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>>> UsersApiControllerGetTenantsForUserGET1WithHttpMessagesAsync(System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = HttpClient.BaseAddress?.AbsoluteUri ?? BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "users/{userId}/tenants").ToString();
            _url = _url.Replace("{userId}", System.Uri.EscapeDataString(SafeJsonConvert.SerializeObject(userId, SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (requestId != null)
            {
                if (_httpRequest.Headers.Contains("request-id"))
                {
                    _httpRequest.Headers.Remove("request-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("request-id", requestId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get the tenants a user is member of&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IEnumerable<VeracityCoreApiV4ResponsesTenantResponseEx>> UsersApiControllerGetTenantsForUserGET1Async(System.Guid userId, string requestId = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await UsersApiControllerGetTenantsForUserGET1WithHttpMessagesAsync(userId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}

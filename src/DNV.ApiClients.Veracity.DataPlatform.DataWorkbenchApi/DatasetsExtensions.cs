// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Datasets.
    /// </summary>
    public static partial class DatasetsExtensions
    {
            /// <summary>
            /// Get all data sets for a specific workspace. Supports pagination, filtering
            /// and sorting.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='sortDirection'>
            /// Possible values include: 'Ascending', 'Descending'
            /// </param>
            /// <param name='isBaseDataset'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='sortColumn'>
            /// </param>
            /// <param name='datasetName'>
            /// Case insensitive and uses contains logic
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static DataCatalogReadDTOV2PaginatedResult GetDataCatalogs(this IDatasets operations, System.Guid workspaceId, string sortDirection, bool? isBaseDataset = default, int? pageIndex = default, int? pageSize = default, string sortColumn = default, string datasetName = default)
            {
                return operations.GetDataCatalogsAsync(workspaceId, sortDirection, isBaseDataset, pageIndex, pageSize, sortColumn, datasetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all data sets for a specific workspace. Supports pagination, filtering
            /// and sorting.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='sortDirection'>
            /// Possible values include: 'Ascending', 'Descending'
            /// </param>
            /// <param name='isBaseDataset'>
            /// </param>
            /// <param name='pageIndex'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='sortColumn'>
            /// </param>
            /// <param name='datasetName'>
            /// Case insensitive and uses contains logic
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<DataCatalogReadDTOV2PaginatedResult> GetDataCatalogsAsync(this IDatasets operations, System.Guid workspaceId, string sortDirection, bool? isBaseDataset = default, int? pageIndex = default, int? pageSize = default, string sortColumn = default, string datasetName = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetDataCatalogsWithHttpMessagesAsync(workspaceId, sortDirection, isBaseDataset, pageIndex, pageSize, sortColumn, datasetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific data set by Workspace Id and DataSet Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static DataCatalogReadDTOV2 GetDataCatalogById(this IDatasets operations, System.Guid workspaceId, System.Guid datasetId)
            {
                return operations.GetDataCatalogByIdAsync(workspaceId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific data set by Workspace Id and DataSet Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCatalogReadDTOV2> GetDataCatalogByIdAsync(this IDatasets operations, System.Guid workspaceId, System.Guid datasetId, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetDataCatalogByIdWithHttpMessagesAsync(workspaceId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for data by Workspace Id and DataSet Id with optional filters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static QueryData QueryDataSet(this IDatasets operations, QuerySpecificationV2 body, System.Guid workspaceId, System.Guid datasetId)
            {
                return operations.QueryDataSetAsync(body, workspaceId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for data by Workspace Id and DataSet Id with optional filters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryData> QueryDataSetAsync(this IDatasets operations, QuerySpecificationV2 body, System.Guid workspaceId, System.Guid datasetId, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.QueryDataSetWithHttpMessagesAsync(body, workspaceId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all data sets for a specific workspace. Supports pagination, filtering
            /// and sorting.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            public static DataCatalogReadDTOV2PaginatedResult GetDataCatalogsQuery(this IDatasets operations, DataCatalogQueryDTO body, System.Guid workspaceId)
            {
                return operations.GetDataCatalogsQueryAsync(body, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all data sets for a specific workspace. Supports pagination, filtering
            /// and sorting.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCatalogReadDTOV2PaginatedResult> GetDataCatalogsQueryAsync(this IDatasets operations, DataCatalogQueryDTO body, System.Guid workspaceId, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetDataCatalogsQueryWithHttpMessagesAsync(body, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

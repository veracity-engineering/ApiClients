// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataOrders.
    /// </summary>
    public static partial class DataOrdersExtensions
    {
            /// <summary>
            /// Create Data Order
            /// </summary>
            /// <remarks>
            /// Sample request For GPM Provider:
            ///
            /// POST {workspaceId}/DataOrder
            /// {
            /// "datasetName":"string",
            /// "providerType":"GPM",
            /// "properties":{
            /// "portfolioId" : "b259ccb2-5c07-46f8-afa2-ed0f21d912e4",
            /// "siteId": "EnergySite",
            /// "deviceParameters": [
            /// {
            /// "deviceIds": [
            /// "97c65480-9512-4067-8c2a-ef64a0ebb7db",
            /// "b1c80fc9-f548-47c7-a8a0-d41c635f6949"
            /// ],
            /// "parameters": [
            /// {
            /// "Name": "Energy",
            /// "Aggregation": "DEFAULT"
            /// },
            /// {
            /// "Name": "Power",
            /// "Aggregation": "LAST"
            /// }
            /// ]
            /// }
            /// ],
            /// "granularity": 1,
            /// "granularityUnit": "Hour",
            /// "interval": {
            /// "start": "2023-01-01T15:00:00",
            /// "end": "2023-01-01T20:00:00"
            /// }
            /// }
            /// }
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            public static OrderReadDTO CreateOrder(this IDataOrders operations, OrderWriteDTO body, System.Guid workspaceId)
            {
                return operations.CreateOrderAsync(body, workspaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Data Order
            /// </summary>
            /// <remarks>
            /// Sample request For GPM Provider:
            ///
            /// POST {workspaceId}/DataOrder
            /// {
            /// "datasetName":"string",
            /// "providerType":"GPM",
            /// "properties":{
            /// "portfolioId" : "b259ccb2-5c07-46f8-afa2-ed0f21d912e4",
            /// "siteId": "EnergySite",
            /// "deviceParameters": [
            /// {
            /// "deviceIds": [
            /// "97c65480-9512-4067-8c2a-ef64a0ebb7db",
            /// "b1c80fc9-f548-47c7-a8a0-d41c635f6949"
            /// ],
            /// "parameters": [
            /// {
            /// "Name": "Energy",
            /// "Aggregation": "DEFAULT"
            /// },
            /// {
            /// "Name": "Power",
            /// "Aggregation": "LAST"
            /// }
            /// ]
            /// }
            /// ],
            /// "granularity": 1,
            /// "granularityUnit": "Hour",
            /// "interval": {
            /// "start": "2023-01-01T15:00:00",
            /// "end": "2023-01-01T20:00:00"
            /// }
            /// }
            /// }
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderReadDTO> CreateOrderAsync(this IDataOrders operations, OrderWriteDTO body, System.Guid workspaceId, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.CreateOrderWithHttpMessagesAsync(body, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Order By Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            public static OrderReadDTO GetOrder(this IDataOrders operations, System.Guid workspaceId, System.Guid orderId)
            {
                return operations.GetOrderAsync(workspaceId, orderId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Order By Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrderReadDTO> GetOrderAsync(this IDataOrders operations, System.Guid workspaceId, System.Guid orderId, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetOrderWithHttpMessagesAsync(workspaceId, orderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using DNV.ApiClients.Veracity.Identity.ServicesApiV3.Interfaces;

namespace DNV.ApiClients.Veracity.Identity.ServicesApiV3
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UsersDirectory.
    /// </summary>
    public static partial class UsersDirectoryExtensions
    {
            /// <summary>
            /// Gets a list of users with a given email address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<UserReference> GetUsersByEmail(this IUsersDirectory operations, string email, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUsersByEmailAsync(email, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of users with a given email address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<UserReference>> GetUsersByEmailAsync(this IUsersDirectory operations, string email, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersByEmailWithHttpMessagesAsync(email, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the full profile for the user with the provided id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UserInfo GetUser(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserAsync(userid, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the full profile for the user with the provided id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfo> GetUserAsync(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(userid, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Only to be used by DNV GL Maritime
            /// </summary>
            /// <remarks>
            /// Delete user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryDeleteUserHeaders DeleteUser(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.DeleteUserAsync(userid, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Only to be used by DNV GL Maritime
            /// </summary>
            /// <remarks>
            /// Delete user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryDeleteUserHeaders> DeleteUserAsync(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.DeleteUserWithHttpMessagesAsync(userid, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Read multiple users profile
            /// </summary>
            /// <remarks>
            /// Get full user profiles for a list of userid's
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<UserInfo> GetUsersIn(this IUsersDirectory operations, IEnumerable<string> ids, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUsersInAsync(ids, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read multiple users profile
            /// </summary>
            /// <remarks>
            /// Get full user profiles for a list of userid's
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<UserInfo>> GetUsersInAsync(this IUsersDirectory operations, IEnumerable<string> ids, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersInWithHttpMessagesAsync(ids, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of companies tied to a spescified user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<CompanyReference> GetUserCompanies(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserCompaniesAsync(userid, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of companies tied to a spescified user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<CompanyReference>> GetUserCompaniesAsync(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserCompaniesWithHttpMessagesAsync(userid, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of the users servcies in the tenant if provided, or it will use
            /// system tenant. Paged query: uses 0 based page index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static IEnumerable<ServiceReference> GetUserServices(this IUsersDirectory operations, string userid, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetUserServicesAsync(userid, page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of the users servcies in the tenant if provided, or it will use
            /// system tenant. Paged query: uses 0 based page index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ServiceReference>> GetUserServicesAsync(this IUsersDirectory operations, string userid, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserServicesWithHttpMessagesAsync(userid, page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the subscription state for a user with respect to the service provided
            /// in the tenant if provided, or it will use system tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static SubscriptionDetails GetUserSubscriptionDetails(this IUsersDirectory operations, string userid, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetUserSubscriptionDetailsAsync(userid, serviceId, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the subscription state for a user with respect to the service provided
            /// in the tenant if provided, or it will use system tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionDetails> GetUserSubscriptionDetailsAsync(this IUsersDirectory operations, string userid, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserSubscriptionDetailsWithHttpMessagesAsync(userid, serviceId, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Update the profile for the logged in user. This cannot be used to edit a
            /// random user, you need to have a valid user token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryUpdateCurrentUserHeaders UpdateCurrentUser(this IUsersDirectory operations, UserInfoUpdate request, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.UpdateCurrentUserAsync(request, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Update the profile for the logged in user. This cannot be used to edit a
            /// random user, you need to have a valid user token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryUpdateCurrentUserHeaders> UpdateCurrentUserAsync(this IUsersDirectory operations, UserInfoUpdate request, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateCurrentUserWithHttpMessagesAsync(request, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Changes the password for the logged in user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryUpdateCurrentUsersPasswordHeaders UpdateCurrentUsersPassword(this IUsersDirectory operations, ChangePasswordRequest request, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.UpdateCurrentUsersPasswordAsync(request, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Changes the password for the logged in user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryUpdateCurrentUsersPasswordHeaders> UpdateCurrentUsersPasswordAsync(this IUsersDirectory operations, ChangePasswordRequest request, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateCurrentUsersPasswordWithHttpMessagesAsync(request, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// change and validate phone or email. The type parameter can be email or
            /// phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            public static string UpdateCurrentUsersEmailOrPhone(this IUsersDirectory operations, ChangeAddressRequest request, string type, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default)
            {
                return operations.UpdateCurrentUsersEmailOrPhoneAsync(request, type, xSupportCode, ocpApimSubscriptionKey, authToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// change and validate phone or email. The type parameter can be email or
            /// phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateCurrentUsersEmailOrPhoneAsync(this IUsersDirectory operations, ChangeAddressRequest request, string type, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateCurrentUsersEmailOrPhoneWithHttpMessagesAsync(request, type, xSupportCode, ocpApimSubscriptionKey, authToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Activates a user by providing the activation token obtained in
            /// 'me/exchange/otp'
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            public static UsersDirectoryActivateUserAccountHeaders ActivateUserAccount(this IUsersDirectory operations, ActivationRequest request, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default)
            {
                return operations.ActivateUserAccountAsync(request, xSupportCode, ocpApimSubscriptionKey, authToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Activates a user by providing the activation token obtained in
            /// 'me/exchange/otp'
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryActivateUserAccountHeaders> ActivateUserAccountAsync(this IUsersDirectory operations, ActivationRequest request, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ActivateUserAccountWithHttpMessagesAsync(request, xSupportCode, ocpApimSubscriptionKey, authToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Get the data currently registered on the new user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            public static UserInfo GetPendingUserActivation(this IUsersDirectory operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default, string emailAddress = default)
            {
                return operations.GetPendingUserActivationAsync(xSupportCode, ocpApimSubscriptionKey, authToken, emailAddress).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Get the data currently registered on the new user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfo> GetPendingUserActivationAsync(this IUsersDirectory operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default, string emailAddress = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetPendingUserActivationWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, authToken, emailAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Exchange the otp code with an activation token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='otpAuthCode'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            public static TokenWrapper ExchangeOtpCode(this IUsersDirectory operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string otpAuthCode = default, string emailAddress = default)
            {
                return operations.ExchangeOtpCodeAsync(xSupportCode, ocpApimSubscriptionKey, otpAuthCode, emailAddress).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Exchange the otp code with an activation token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='otpAuthCode'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TokenWrapper> ExchangeOtpCodeAsync(this IUsersDirectory operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string otpAuthCode = default, string emailAddress = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ExchangeOtpCodeWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, otpAuthCode, emailAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Verify that the user is the rightfull owner of the email/phone. The type
            /// parameter can be email or phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            public static UsersDirectoryValidateEmailOrPhoneHeaders ValidateEmailOrPhone(this IUsersDirectory operations, ConfirmationRequest request, string type, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default)
            {
                return operations.ValidateEmailOrPhoneAsync(request, type, xSupportCode, ocpApimSubscriptionKey, authToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Verify that the user is the rightfull owner of the email/phone. The type
            /// parameter can be email or phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryValidateEmailOrPhoneHeaders> ValidateEmailOrPhoneAsync(this IUsersDirectory operations, ConfirmationRequest request, string type, string xSupportCode = default, string ocpApimSubscriptionKey = default, string authToken = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ValidateEmailOrPhoneWithHttpMessagesAsync(request, type, xSupportCode, ocpApimSubscriptionKey, authToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Accept the service and platform terms on behalf of the logged in user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryAcceptTermsHeaders AcceptTerms(this IUsersDirectory operations, AcceptPlatformTermsRequest request, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.AcceptTermsAsync(request, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Not for common use
            /// </summary>
            /// <remarks>
            /// Accept the service and platform terms on behalf of the logged in user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryAcceptTermsHeaders> AcceptTermsAsync(this IUsersDirectory operations, AcceptPlatformTermsRequest request, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.AcceptTermsWithHttpMessagesAsync(request, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Only to be used by DNV GL Maritime
            /// </summary>
            /// <remarks>
            /// Change email address for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryUpdateUserEmailHeaders UpdateUserEmail(this IUsersDirectory operations, ChangeAddressRequest request, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.UpdateUserEmailAsync(request, userId, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Only to be used by DNV GL Maritime
            /// </summary>
            /// <remarks>
            /// Change email address for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryUpdateUserEmailHeaders> UpdateUserEmailAsync(this IUsersDirectory operations, ChangeAddressRequest request, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateUserEmailWithHttpMessagesAsync(request, userId, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Internal service for syncing company and services for a user
            /// </summary>
            /// <remarks>
            /// Change email address for a users in the tenant if provided, or it will use
            /// system tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static UserReferences GetUserResyncData(this IUsersDirectory operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetUserResyncDataAsync(userId, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Internal service for syncing company and services for a user
            /// </summary>
            /// <remarks>
            /// Change email address for a users in the tenant if provided, or it will use
            /// system tenant
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserReferences> GetUserResyncDataAsync(this IUsersDirectory operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserResyncDataWithHttpMessagesAsync(userId, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using DNV.ApiClients.Veracity.Identity.ServicesApiV3.Interfaces;

namespace DNV.ApiClients.Veracity.Identity.ServicesApiV3
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for My.
    /// </summary>
    public static partial class MyExtensions
    {
            /// <summary>
            /// Retreives the profile of the current logged in user. Note that we will
            /// remove the company node from the result in the future
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static MyUserInfo Info(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.InfoAsync(xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retreives the profile of the current logged in user. Note that we will
            /// remove the company node from the result in the future
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MyUserInfo> InfoAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retreives the profile picture of the current logegd in user if one is set,
            /// otherwise a 404 is returned
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static ProfilePicture ProfilePictureMethod(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.ProfilePictureMethodAsync(xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retreives the profile picture of the current logegd in user if one is set,
            /// otherwise a 404 is returned
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfilePicture> ProfilePictureMethodAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ProfilePictureMethodWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the current loged in users unread messages count
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static int? GetMessageCount(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetMessageCountAsync(xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the current loged in users unread messages count
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetMessageCountAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetMessageCountWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Read the users messages. All: include read messages. ImportantOnly: only
            /// include important messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='all'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='importantOnly'>
            /// </param>
            public static IEnumerable<MessageReference> GetMessagesAsync(this IMy operations, bool all, string xSupportCode = default, string ocpApimSubscriptionKey = default, string importantOnly = default)
            {
                return operations.GetMessagesAsyncAsync(all, xSupportCode, ocpApimSubscriptionKey, importantOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read the users messages. All: include read messages. ImportantOnly: only
            /// include important messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='all'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='importantOnly'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MessageReference>> GetMessagesAsyncAsync(this IMy operations, bool all, string xSupportCode = default, string ocpApimSubscriptionKey = default, string importantOnly = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetMessagesAsyncWithHttpMessagesAsync(all, xSupportCode, ocpApimSubscriptionKey, importantOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marks all unread messages as read. ImportantOnly: only mark important
            /// messages as read
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='importantOnly'>
            /// </param>
            public static MyMarkAllMessagesAsReadHeaders MarkAllMessagesAsRead(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string importantOnly = default)
            {
                return operations.MarkAllMessagesAsReadAsync(xSupportCode, ocpApimSubscriptionKey, importantOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks all unread messages as read. ImportantOnly: only mark important
            /// messages as read
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='importantOnly'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MyMarkAllMessagesAsReadHeaders> MarkAllMessagesAsReadAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string importantOnly = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.MarkAllMessagesAsReadWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, importantOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get all companies related to the current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<CompanyReference> GetMyCompanies(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetMyCompaniesAsync(xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all companies related to the current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<CompanyReference>> GetMyCompaniesAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetMyCompaniesWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates all myDnvgl policies and returns a list of the policies that
            /// needs attention
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='skipSubscriptionCheck'>
            /// </param>
            public static MyValidatePolicyHeaders ValidatePolicy(this IMy operations, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string returnUrl = default, string skipSubscriptionCheck = default)
            {
                return operations.ValidatePolicyAsync(serviceId, xSupportCode, ocpApimSubscriptionKey, returnUrl, skipSubscriptionCheck).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates all myDnvgl policies and returns a list of the policies that
            /// needs attention
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='skipSubscriptionCheck'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MyValidatePolicyHeaders> ValidatePolicyAsync(this IMy operations, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string returnUrl = default, string skipSubscriptionCheck = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ValidatePolicyWithHttpMessagesAsync(serviceId, xSupportCode, ocpApimSubscriptionKey, returnUrl, skipSubscriptionCheck, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Validates all myDnvgl policies and returns a list of the policies that
            /// needs attention
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            public static MyValidatePoliciesHeaders ValidatePolicies(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string returnUrl = default)
            {
                return operations.ValidatePoliciesAsync(xSupportCode, ocpApimSubscriptionKey, returnUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates all myDnvgl policies and returns a list of the policies that
            /// needs attention
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MyValidatePoliciesHeaders> ValidatePoliciesAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string returnUrl = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ValidatePoliciesWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, returnUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Returns all services for the user inside the tenant with id:tenantId.
            /// System tenant id is Guid.empty. if tenantId is null, it will return all
            /// services from all tenants include system tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static IEnumerable<MyServiceReference> MyServices(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.MyServicesAsync(xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all services for the user inside the tenant with id:tenantId.
            /// System tenant id is Guid.empty. if tenantId is null, it will return all
            /// services from all tenants include system tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MyServiceReference>> MyServicesAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.MyServicesWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all widgets for the user inside the tenant with id:tenantId. System
            /// tenant id is Guid.empty. if tenantId is null, it will return all widgets
            /// from all tenants include system tenant. Mainly intended to be used by the
            /// Veracity Mobile app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static IEnumerable<Widget> GetMyWidgets(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetMyWidgetsAsync(xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all widgets for the user inside the tenant with id:tenantId. System
            /// tenant id is Guid.empty. if tenantId is null, it will return all widgets
            /// from all tenants include system tenant. Mainly intended to be used by the
            /// Veracity Mobile app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Widget>> GetMyWidgetsAsync(this IMy operations, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetMyWidgetsWithHttpMessagesAsync(xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

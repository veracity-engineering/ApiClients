// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using DNV.ApiClients.Veracity.Identity.ServicesApiV3.Interfaces;

namespace DNV.ApiClients.Veracity.Identity.ServicesApiV3
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ThisModel.
    /// </summary>
    public static partial class ThisModelExtensions
    {
            /// <summary>
            /// Get all services the service principal has access to. Currently not 100%
            /// accurate. Paged query: uses 0 based page index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<ServiceReference> GetServices(this IThisModel operations, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetServicesAsync(page, pageSize, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all services the service principal has access to. Currently not 100%
            /// accurate. Paged query: uses 0 based page index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ServiceReference>> GetServicesAsync(this IThisModel operations, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetServicesWithHttpMessagesAsync(page, pageSize, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all users with a subscription to this service in the tenant if
            /// provided, or it will get from system tenant. Paged query: uses 0 based page
            /// index .Warning: returns http 300 Ambiguous if service account is linked to
            /// multiple services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static IEnumerable<UserReference> GetUsers(this IThisModel operations, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetUsersAsync(page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all users with a subscription to this service in the tenant if
            /// provided, or it will get from system tenant. Paged query: uses 0 based page
            /// index .Warning: returns http 300 Ambiguous if service account is linked to
            /// multiple services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<UserReference>> GetUsersAsync(this IThisModel operations, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all subscriptions to the user in the tenant if provided, or it will get
            /// from system tenant.Warning: returns http 300 Ambiguous if service account
            /// is linked to multiple services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static SubscriptionReference GetServiceUser(this IThisModel operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetServiceUserAsync(userId, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all subscriptions to the user in the tenant if provided, or it will get
            /// from system tenant.Warning: returns http 300 Ambiguous if service account
            /// is linked to multiple services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionReference> GetServiceUserAsync(this IThisModel operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetServiceUserWithHttpMessagesAsync(userId, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a user subscription to the service in the tenant if provided, or it
            /// will use system tenant.Warning: returns http 300 Ambiguous if service
            /// account is linked to multiple services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='options'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static ThisAddUserAsyncHeaders AddUserAsync(this IThisModel operations, SubscriptionOptions options, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.AddUserAsyncAsync(options, userId, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a user subscription to the service in the tenant if provided, or it
            /// will use system tenant.Warning: returns http 300 Ambiguous if service
            /// account is linked to multiple services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='options'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThisAddUserAsyncHeaders> AddUserAsyncAsync(this IThisModel operations, SubscriptionOptions options, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.AddUserAsyncWithHttpMessagesAsync(options, userId, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Warning: returns http 300 Ambiguous if service account is linked to
            /// multiple services
            /// </summary>
            /// <remarks>
            /// Remove servive subscription for the user from this service in the tenant if
            /// provided, or it will use system tenant.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static ThisRemoveUserHeaders RemoveUser(this IThisModel operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.RemoveUserAsync(userId, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Warning: returns http 300 Ambiguous if service account is linked to
            /// multiple services
            /// </summary>
            /// <remarks>
            /// Remove servive subscription for the user from this service in the tenant if
            /// provided, or it will use system tenant.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThisRemoveUserHeaders> RemoveUserAsync(this IThisModel operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.RemoveUserWithHttpMessagesAsync(userId, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Checks if a user has a subscription to the service and the access level if
            /// any in the tenant if provided, or it will get from system tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static SubscriptionReference GetUserForService(this IThisModel operations, string serviceId, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetUserForServiceAsync(serviceId, userId, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if a user has a subscription to the service and the access level if
            /// any in the tenant if provided, or it will get from system tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionReference> GetUserForServiceAsync(this IThisModel operations, string serviceId, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserForServiceWithHttpMessagesAsync(serviceId, userId, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a user subscription to the service with the provided id in the tenant
            /// if provided, or it will use system tenant. Only available for the root
            /// service for nested services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='options'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static ThisAddServiceUserHeaders AddServiceUser(this IThisModel operations, SubscriptionOptions options, string userId, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.AddServiceUserAsync(options, userId, serviceId, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a user subscription to the service with the provided id in the tenant
            /// if provided, or it will use system tenant. Only available for the root
            /// service for nested services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='options'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThisAddServiceUserHeaders> AddServiceUserAsync(this IThisModel operations, SubscriptionOptions options, string userId, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.AddServiceUserWithHttpMessagesAsync(options, userId, serviceId, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Remove servive subscription from the user in the tenant if provided, or it
            /// will use system tenant. Only available for the root service for nested
            /// services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='suppressNotification'>
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static ThisRemoveServiceUserHeaders RemoveServiceUser(this IThisModel operations, string userId, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string suppressNotification = default, string tenantId = default)
            {
                return operations.RemoveServiceUserAsync(userId, serviceId, xSupportCode, ocpApimSubscriptionKey, suppressNotification, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove servive subscription from the user in the tenant if provided, or it
            /// will use system tenant. Only available for the root service for nested
            /// services
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='suppressNotification'>
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThisRemoveServiceUserHeaders> RemoveServiceUserAsync(this IThisModel operations, string userId, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string suppressNotification = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.RemoveServiceUserWithHttpMessagesAsync(userId, serviceId, xSupportCode, ocpApimSubscriptionKey, suppressNotification, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets the profile picture of the user if there is a subscription and the
            /// user has uploaded a profile picture to veracity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static ProfilePicture GetUserProfilePicture(this IThisModel operations, string serviceId, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserProfilePictureAsync(serviceId, userId, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the profile picture of the user if there is a subscription and the
            /// user has uploaded a profile picture to veracity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfilePicture> GetUserProfilePictureAsync(this IThisModel operations, string serviceId, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserProfilePictureWithHttpMessagesAsync(serviceId, userId, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all users with a subscription to this service in the tenant if
            /// provided, or it will get from system tenant. Paged query: uses 0 based page
            /// index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static IEnumerable<UserReference> GetUsersForService(this IThisModel operations, string serviceId, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetUsersForServiceAsync(serviceId, page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all users with a subscription to this service in the tenant if
            /// provided, or it will get from system tenant. Paged query: uses 0 based page
            /// index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<UserReference>> GetUsersForServiceAsync(this IThisModel operations, string serviceId, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersForServiceWithHttpMessagesAsync(serviceId, page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the user id from the email address. Note that an email address may be
            /// connected to more than one user account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<UserReference> ResolveUser(this IThisModel operations, string email, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.ResolveUserAsync(email, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the user id from the email address. Note that an email address may be
            /// connected to more than one user account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<UserReference>> ResolveUserAsync(this IThisModel operations, string email, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ResolveUserWithHttpMessagesAsync(email, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a user in Veracity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UserCreationReference CreateUser(this IThisModel operations, UserRegistration user, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.CreateUserAsync(user, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a user in Veracity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserCreationReference> CreateUserAsync(this IThisModel operations, UserRegistration user, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(user, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a users in Veracity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<UserCreationReference> CreateUsers(this IThisModel operations, IEnumerable<UserRegistration> user, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.CreateUsersAsync(user, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a users in Veracity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<UserCreationReference>> CreateUsersAsync(this IThisModel operations, IEnumerable<UserRegistration> user, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.CreateUsersWithHttpMessagesAsync(user, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Send notification to your users through the Veracity notification service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='channelId'>
            /// </param>
            public static ThisNotifyUsersHeaders NotifyUsers(this IThisModel operations, NotificationMessage message, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string channelId = default)
            {
                return operations.NotifyUsersAsync(message, serviceId, xSupportCode, ocpApimSubscriptionKey, channelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send notification to your users through the Veracity notification service
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThisNotifyUsersHeaders> NotifyUsersAsync(this IThisModel operations, NotificationMessage message, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string channelId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.NotifyUsersWithHttpMessagesAsync(message, serviceId, xSupportCode, ocpApimSubscriptionKey, channelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='skipSubscriptionCheck'>
            /// </param>
            public static ThisVerifySubscriberPolicyHeaders VerifySubscriberPolicy(this IThisModel operations, string serviceId, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string returnUrl = default, string skipSubscriptionCheck = default)
            {
                return operations.VerifySubscriberPolicyAsync(serviceId, userId, xSupportCode, ocpApimSubscriptionKey, returnUrl, skipSubscriptionCheck).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='returnUrl'>
            /// </param>
            /// <param name='skipSubscriptionCheck'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThisVerifySubscriberPolicyHeaders> VerifySubscriberPolicyAsync(this IThisModel operations, string serviceId, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, string returnUrl = default, string skipSubscriptionCheck = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.VerifySubscriberPolicyWithHttpMessagesAsync(serviceId, userId, xSupportCode, ocpApimSubscriptionKey, returnUrl, skipSubscriptionCheck, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}

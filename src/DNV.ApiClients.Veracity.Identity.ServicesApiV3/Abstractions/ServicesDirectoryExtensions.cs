// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using DNV.ApiClients.Veracity.Identity.ServicesApiV3.Interfaces;

namespace DNV.ApiClients.Veracity.Identity.ServicesApiV3
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServicesDirectory.
    /// </summary>
    public static partial class ServicesDirectoryExtensions
    {
            /// <summary>
            /// Get the detailed service description by the provided id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static ServiceInfo GetServiceById(this IServicesDirectory operations, string id, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetServiceByIdAsync(id, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the detailed service description by the provided id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceInfo> GetServiceByIdAsync(this IServicesDirectory operations, string id, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetServiceByIdWithHttpMessagesAsync(id, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of users subscribing to the service. Paged query: uses 0 based
            /// page index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static IEnumerable<UserReference> GetUsers(this IServicesDirectory operations, string id, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default)
            {
                return operations.GetUsersAsync(id, page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of users subscribing to the service. Paged query: uses 0 based
            /// page index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<UserReference>> GetUsersAsync(this IServicesDirectory operations, string id, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, string tenantId = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(id, page, pageSize, xSupportCode, ocpApimSubscriptionKey, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static bool? IsAdmin(this IServicesDirectory operations, string userId, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.IsAdminAsync(userId, serviceId, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsAdminAsync(this IServicesDirectory operations, string userId, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.IsAdminWithHttpMessagesAsync(userId, serviceId, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='pageNo'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static IEnumerable<SubscriptionDetails> GetServiceSubscriptions(this IServicesDirectory operations, string id, string filter, int pageNo, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetServiceSubscriptionsAsync(id, filter, pageNo, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='pageNo'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<SubscriptionDetails>> GetServiceSubscriptionsAsync(this IServicesDirectory operations, string id, string filter, int pageNo, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetServiceSubscriptionsWithHttpMessagesAsync(id, filter, pageNo, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using DNV.ApiClients.Veracity.Identity.ServicesApiV3.Interfaces;

namespace DNV.ApiClients.Veracity.Identity.ServicesApiV3
{
    using Microsoft.Extensions;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// &lt;p&gt;The Veracity Services API provides information about the
    /// currently logged in user (&lt;code&gt;my&lt;/code&gt;) and your
    /// application in general (&lt;code&gt;this&lt;/code&gt;).
    /// To call these APIs you need to have an &lt;strong&gt;access
    /// token&lt;/strong&gt; for the current user as well as a
    /// &lt;strong&gt;subscription key&lt;/strong&gt;.
    /// The former can be retrieved once a user authenticates with your
    /// application while the latter can be found in the Veracity for
    /// Developers resource portal.
    /// Head over to &lt;a
    /// href=\"https://developer.veracity.com/projects\"&gt;https://developer.veracity.com/projects&lt;/a&gt;
    /// and create an Application resource there to create a subscription key
    /// for your application.
    /// You can read more about how to authenticate users from your application
    /// in the &lt;a
    /// href=\"https://developer.veracity.com/docs/section/identity/identity\"&gt;Identity
    /// documentation&lt;/a&gt;.&lt;/p&gt;
    /// &lt;h2&gt;Grouping&lt;/h2&gt;
    /// &lt;p&gt;The API is grouped into 3 distinct sections, each with their
    /// own intent.&lt;/p&gt;
    /// &lt;ul&gt;
    /// &lt;li&gt;&lt;strong&gt;My&lt;/strong&gt;: Return information about the
    /// currently logged in used as defined by their access token.&lt;/li&gt;
    /// &lt;li&gt;&lt;strong&gt;This&lt;/strong&gt;: Return information about
    /// your application.&lt;/li&gt;
    /// &lt;li&gt;&lt;strong&gt;Options&lt;/strong&gt;: These endpoints are for
    /// maintenance purposes. Do not use.&lt;/li&gt;
    /// &lt;/ul&gt;
    /// &lt;p&gt;As the API requires the use of an access token unique to a
    /// user many of the endpoints will include information specific to that
    /// user.
    /// E.g.: the &lt;code&gt;/my/profile&lt;/code&gt; endpoint will return
    /// profile information for that user without any additional query
    /// parameters as the users is identified by their access token.&lt;/p&gt;
    /// &lt;h2&gt;Multiple root urls&lt;/h2&gt;
    /// &lt;p&gt;The API is versioned in order to provide a consistent contract
    /// for your application to call. You can decide yourself if you want to
    /// use one or the other.
    /// The APIs describe on this page will always be the latest
    /// version.&lt;/p&gt;
    /// &lt;ul&gt;
    /// &lt;li&gt;&lt;code&gt;https://api.veracity.com/veracity/services/v3&lt;/code&gt;&lt;/li&gt;
    /// &lt;/ul&gt;
    /// &lt;p&gt;Veracity commits to actively support the latest version of the
    /// API as well as the next previous version. This currently means
    /// &lt;strong&gt;v3 and v2&lt;/strong&gt; of the Veracity Services
    /// API.&lt;/p&gt;
    /// </summary>
    public partial class ServicesApiV3Client : ServiceClient<ServicesApiV3Client>, IServicesApiV3Client
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the ICompaniesDirectory.
        /// </summary>
        public virtual ICompaniesDirectory CompaniesDirectory { get; private set; }

        /// <summary>
        /// Gets the IDataContainerService.
        /// </summary>
        public virtual IDataContainerService DataContainerService { get; private set; }

        /// <summary>
        /// Gets the IMy.
        /// </summary>
        public virtual IMy My { get; private set; }

        /// <summary>
        /// Gets the IOptions.
        /// </summary>
        public virtual IOptions Options { get; private set; }

        /// <summary>
        /// Gets the IServicesDirectory.
        /// </summary>
        public virtual IServicesDirectory ServicesDirectory { get; private set; }

        /// <summary>
        /// Gets the IStatusService.
        /// </summary>
        public virtual IStatusService StatusService { get; private set; }

        /// <summary>
        /// Gets the IThisModel.
        /// </summary>
        public virtual IThisModel ThisModel { get; private set; }

        /// <summary>
        /// Gets the IUsersDirectory.
        /// </summary>
        public virtual IUsersDirectory UsersDirectory { get; private set; }

        /// <summary>
        /// Initializes a new instance of the ServicesApiV3Client class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        [Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructor]
        public ServicesApiV3Client(HttpClient httpClient) : base(httpClient, true)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ServicesApiV3Client class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ServicesApiV3Client.Dispose(). False: will not dispose provided httpClient</param>
        public ServicesApiV3Client(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ServicesApiV3Client class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public ServicesApiV3Client(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ServicesApiV3Client class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public ServicesApiV3Client(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ServicesApiV3Client class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ServicesApiV3Client(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the ServicesApiV3Client class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ServicesApiV3Client(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            CompaniesDirectory = new CompaniesDirectory(this);
            DataContainerService = new DataContainerService(this);
            My = new My(this);
            Options = new Options(this);
            ServicesDirectory = new ServicesDirectory(this);
            StatusService = new StatusService(this);
            ThisModel = new ThisModel(this);
            UsersDirectory = new UsersDirectory(this);
            BaseUri = new System.Uri("https://myapiv3.dnvgl.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}

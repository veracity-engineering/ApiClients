// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataValidatorApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkerFunctions.
    /// </summary>
    public static partial class WorkerFunctionsExtensions
    {
            /// <summary>
            /// Gets container info and schema details by container Id
            /// </summary>
            /// <remarks>
            /// Gets container info and schema details by container Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containerId'>
            /// Format - uuid.
            /// </param>
            public static MinimalSchemaDefinitionForWorkerDto GetSchemaDefinition(this IWorkerFunctions operations, string containerId)
            {
                return operations.GetSchemaDefinitionAsync(containerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets container info and schema details by container Id
            /// </summary>
            /// <remarks>
            /// Gets container info and schema details by container Id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containerId'>
            /// Format - uuid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MinimalSchemaDefinitionForWorkerDto> GetSchemaDefinitionAsync(this IWorkerFunctions operations, string containerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemaDefinitionWithHttpMessagesAsync(containerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Save Validation Summary of uploaded file on source container
            /// </summary>
            /// <remarks>
            /// Save Validation Summary of uploaded file on source container
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containerId'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static System.Guid? AddValidationSummary(this IWorkerFunctions operations, string containerId, ValidationSummaryWriteDTO body = default(ValidationSummaryWriteDTO))
            {
                return operations.AddValidationSummaryAsync(containerId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Save Validation Summary of uploaded file on source container
            /// </summary>
            /// <remarks>
            /// Save Validation Summary of uploaded file on source container
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containerId'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Guid?> AddValidationSummaryAsync(this IWorkerFunctions operations, string containerId, ValidationSummaryWriteDTO body = default(ValidationSummaryWriteDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddValidationSummaryWithHttpMessagesAsync(containerId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets basic container set info and schema info
            /// </summary>
            /// <remarks>
            /// Gets basic container set info and schema info
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containerId'>
            /// Format - uuid.
            /// </param>
            public static ContainerSetWithSchemaInfoReadDTO GetContainerSetByContainerId(this IWorkerFunctions operations, string containerId)
            {
                return operations.GetContainerSetByContainerIdAsync(containerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets basic container set info and schema info
            /// </summary>
            /// <remarks>
            /// Gets basic container set info and schema info
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='containerId'>
            /// Format - uuid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContainerSetWithSchemaInfoReadDTO> GetContainerSetByContainerIdAsync(this IWorkerFunctions operations, string containerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContainerSetByContainerIdWithHttpMessagesAsync(containerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.Identity.ServicesApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    public partial class AdminInfo
    {
        /// <summary>
        /// Initializes a new instance of the AdminInfo class.
        /// </summary>
        public AdminInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AdminInfo class.
        /// </summary>
        /// <param name="verifiedEmail">true if email is verified by the user;
        /// otherwise, false.</param>
        /// <param name="managedAccount">Indicates if the account is managed by
        /// direct integration with the customer's domain</param>
        /// <param name="roles">Contains the administrator roles a user has for
        /// a given resource.</param>
        /// <param name="name">Contains the users formatted name: {lastName},
        /// {firstName}. the id token contains the discrete values in the
        /// givenName and surname claims.</param>
        /// <param name="email">The users registered email address. if
        /// verifiedEmail is true this can be used to contact the user.</param>
        /// <param name="language">Contains the perfered language for the user.
        /// If your service support multi-language use this.
        /// [Deprecated]</param>
        /// <param name="identity">The relative path to the resource
        /// details</param>
        /// <param name="servicesUrl">Gets the relative url to the users
        /// service lits</param>
        /// <param name="companiesUrl">Gets the relative url to the users
        /// companies lits</param>
        public AdminInfo(int companies, bool verifiedEmail, bool verifiedPhone, bool managedAccount, bool activated, IEnumerable<RoleReference> roles = default, string name = default, string email = default, string id = default, string language = default, string identity = default, string phone = default, string servicesUrl = default, string companiesUrl = default, string firstName = default, string lastName = default, string countryCode = default)
        {
            Roles = roles;
            Name = name;
            Email = email;
            Id = id;
            Companies = companies;
            VerifiedEmail = verifiedEmail;
            Language = language;
            Identity = identity;
            Phone = phone;
            VerifiedPhone = verifiedPhone;
            ServicesUrl = servicesUrl;
            CompaniesUrl = companiesUrl;
            FirstName = firstName;
            LastName = lastName;
            CountryCode = countryCode;
            ManagedAccount = managedAccount;
            Activated = activated;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets contains the administrator roles a user has for a
        /// given resource.
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IEnumerable<RoleReference> Roles { get; set; }

        /// <summary>
        /// Gets or sets contains the users formatted name: {lastName},
        /// {firstName}. the id token contains the discrete values in the
        /// givenName and surname claims.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the users registered email address. if verifiedEmail
        /// is true this can be used to contact the user.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "#companies")]
        public int Companies { get; set; }

        /// <summary>
        /// Gets or sets true if email is verified by the user; otherwise,
        /// false.
        /// </summary>
        [JsonProperty(PropertyName = "verifiedEmail")]
        public bool VerifiedEmail { get; set; }

        /// <summary>
        /// Gets or sets contains the perfered language for the user. If your
        /// service support multi-language use this. [Deprecated]
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the relative path to the resource details
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public string Identity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "verifiedPhone")]
        public bool VerifiedPhone { get; set; }

        /// <summary>
        /// Gets the relative url to the users service lits
        /// </summary>
        [JsonProperty(PropertyName = "servicesUrl")]
        public string ServicesUrl { get; private set; }

        /// <summary>
        /// Gets the relative url to the users companies lits
        /// </summary>
        [JsonProperty(PropertyName = "companiesUrl")]
        public string CompaniesUrl { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or sets indicates if the account is managed by direct
        /// integration with the customer's domain
        /// </summary>
        [JsonProperty(PropertyName = "managedAccount")]
        public bool ManagedAccount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activated")]
        public bool Activated { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}

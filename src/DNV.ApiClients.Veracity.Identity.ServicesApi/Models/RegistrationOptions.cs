// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.Identity.ServicesApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    public partial class RegistrationOptions
    {
        /// <summary>
        /// Initializes a new instance of the RegistrationOptions class.
        /// </summary>
        public RegistrationOptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegistrationOptions class.
        /// </summary>
        /// <param name="sendMail">Set this to false to take responsibillity of
        /// sending the registration email to the user. Default: true</param>
        /// <param name="createSubscription">Make the service create a default
        /// subscription for the newly created user</param>
        /// <param name="serviceId">The service id to create subscription
        /// for</param>
        /// <param name="role">Specify the accessLevel/role the user should
        /// have with the new subscription. Optional</param>
        /// <param name="subscriptions">Add multiple subscriptions during user
        /// creation. Note: If this is used the serviceId and role properties
        /// will not be evaluated</param>
        /// <param name="returnUrl">Specify the location to send the newly
        /// created user to after the registration process is completed</param>
        /// <param name="contactEmail">The email address of the user or service
        /// that creates the new user account</param>
        /// <param name="contactName">The Name of the user or service that
        /// creates the new user account</param>
        /// <param name="activationType">Only for mobile app usage. Default is
        /// emailLink. Possible values include: 'emailLink', 'otp'</param>
        /// <param name="userCreationOptions">Possible values include: 'all',
        /// 'onlyInvited', 'onlyNew'</param>
        public RegistrationOptions(bool? sendMail = default, bool? createSubscription = default, string serviceId = default, string role = default, IEnumerable<SubscriptionRequest> subscriptions = default, string returnUrl = default, string contactEmail = default, string contactName = default, ActivationTypes? activationType = default, UserCreationOptionTypes? userCreationOptions = default, string inviteMessage = default)
        {
            SendMail = sendMail;
            CreateSubscription = createSubscription;
            ServiceId = serviceId;
            Role = role;
            Subscriptions = subscriptions;
            ReturnUrl = returnUrl;
            ContactEmail = contactEmail;
            ContactName = contactName;
            ActivationType = activationType;
            UserCreationOptions = userCreationOptions;
            InviteMessage = inviteMessage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets set this to false to take responsibillity of sending
        /// the registration email to the user. Default: true
        /// </summary>
        [JsonProperty(PropertyName = "sendMail")]
        public bool? SendMail { get; set; }

        /// <summary>
        /// Gets or sets make the service create a default subscription for the
        /// newly created user
        /// </summary>
        [JsonProperty(PropertyName = "createSubscription")]
        public bool? CreateSubscription { get; set; }

        /// <summary>
        /// Gets or sets the service id to create subscription for
        /// </summary>
        [JsonProperty(PropertyName = "serviceId")]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or sets specify the accessLevel/role the user should have with
        /// the new subscription. Optional
        /// </summary>
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets or sets add multiple subscriptions during user creation. Note:
        /// If this is used the serviceId and role properties will not be
        /// evaluated
        /// </summary>
        [JsonProperty(PropertyName = "subscriptions")]
        public IEnumerable<SubscriptionRequest> Subscriptions { get; set; }

        /// <summary>
        /// Gets or sets specify the location to send the newly created user to
        /// after the registration process is completed
        /// </summary>
        [JsonProperty(PropertyName = "returnUrl")]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user or service that creates
        /// the new user account
        /// </summary>
        [JsonProperty(PropertyName = "contactEmail")]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or sets the Name of the user or service that creates the new
        /// user account
        /// </summary>
        [JsonProperty(PropertyName = "contactName")]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or sets only for mobile app usage. Default is emailLink.
        /// Possible values include: 'emailLink', 'otp'
        /// </summary>
        [JsonProperty(PropertyName = "activationType")]
        public ActivationTypes? ActivationType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'all', 'onlyInvited',
        /// 'onlyNew'
        /// </summary>
        [JsonProperty(PropertyName = "userCreationOptions")]
        public UserCreationOptionTypes? UserCreationOptions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inviteMessage")]
        public string InviteMessage { get; set; }

    }
}

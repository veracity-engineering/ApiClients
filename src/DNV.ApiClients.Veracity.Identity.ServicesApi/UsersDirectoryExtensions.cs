// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.Identity.ServicesApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UsersDirectory.
    /// </summary>
    public static partial class UsersDirectoryExtensions
    {
            /// <summary>
            /// UsersDirectory_GetUsersByEmail
            /// </summary>
            /// <remarks>
            /// Gets a list of users with a given email address
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetUsersByEmail(this IUsersDirectory operations, string email, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUsersByEmailAsync(email, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetUsersByEmail
            /// </summary>
            /// <remarks>
            /// Gets a list of users with a given email address
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUsersByEmailAsync(this IUsersDirectory operations, string email, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersByEmailWithHttpMessagesAsync(email, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_GetUser
            /// </summary>
            /// <remarks>
            /// Returns the full profile for the user with the provided id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetUser(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserAsync(userid, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetUser
            /// </summary>
            /// <remarks>
            /// Returns the full profile for the user with the provided id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserAsync(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(userid, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_DeleteUser
            /// </summary>
            /// <remarks>
            /// Delete user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryDeleteUserHeaders DeleteUser(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.DeleteUserAsync(userid, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_DeleteUser
            /// </summary>
            /// <remarks>
            /// Delete user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryDeleteUserHeaders> DeleteUserAsync(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.DeleteUserWithHttpMessagesAsync(userid, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// UsersDirectory_GetUsersIn
            /// </summary>
            /// <remarks>
            /// Get full user profiles for a list of userid's
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetUsersIn(this IUsersDirectory operations, IList<string> body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUsersInAsync(body, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetUsersIn
            /// </summary>
            /// <remarks>
            /// Get full user profiles for a list of userid's
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUsersInAsync(this IUsersDirectory operations, IList<string> body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUsersInWithHttpMessagesAsync(body, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_GetUserCompanies
            /// </summary>
            /// <remarks>
            /// Returns a list of companies tied to a spescified user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetUserCompanies(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserCompaniesAsync(userid, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetUserCompanies
            /// </summary>
            /// <remarks>
            /// Returns a list of companies tied to a spescified user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserCompaniesAsync(this IUsersDirectory operations, string userid, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserCompaniesWithHttpMessagesAsync(userid, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_GetUserServices
            /// </summary>
            /// <remarks>
            /// Get a list of the users servcies. Paged query: uses 0 based page index
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='page'>
            /// Format - int32.
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetUserServices(this IUsersDirectory operations, string userid, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserServicesAsync(userid, page, pageSize, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetUserServices
            /// </summary>
            /// <remarks>
            /// Get a list of the users servcies. Paged query: uses 0 based page index
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='page'>
            /// Format - int32.
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32.
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserServicesAsync(this IUsersDirectory operations, string userid, int page, int pageSize, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserServicesWithHttpMessagesAsync(userid, page, pageSize, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_GetUserSubscriptionDetails
            /// </summary>
            /// <remarks>
            /// Gets the subscription state for a user with respect to the service
            /// provided.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetUserSubscriptionDetails(this IUsersDirectory operations, string userid, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserSubscriptionDetailsAsync(userid, serviceId, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetUserSubscriptionDetails
            /// </summary>
            /// <remarks>
            /// Gets the subscription state for a user with respect to the service
            /// provided.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userid'>
            /// </param>
            /// <param name='serviceId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserSubscriptionDetailsAsync(this IUsersDirectory operations, string userid, string serviceId, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserSubscriptionDetailsWithHttpMessagesAsync(userid, serviceId, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_UpdateCurrentUser
            /// </summary>
            /// <remarks>
            /// Update the profile for the logged in user. This cannot be used to edit a
            /// random user, you need to have a valid user token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryUpdateCurrentUserHeaders UpdateCurrentUser(this IUsersDirectory operations, UserInfoUpdate body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.UpdateCurrentUserAsync(body, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_UpdateCurrentUser
            /// </summary>
            /// <remarks>
            /// Update the profile for the logged in user. This cannot be used to edit a
            /// random user, you need to have a valid user token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryUpdateCurrentUserHeaders> UpdateCurrentUserAsync(this IUsersDirectory operations, UserInfoUpdate body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateCurrentUserWithHttpMessagesAsync(body, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// UsersDirectory_UpdateCurrentUsersPassword
            /// </summary>
            /// <remarks>
            /// Changes the password for the logged in user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryUpdateCurrentUsersPasswordHeaders UpdateCurrentUsersPassword(this IUsersDirectory operations, ChangePasswordRequest body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.UpdateCurrentUsersPasswordAsync(body, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_UpdateCurrentUsersPassword
            /// </summary>
            /// <remarks>
            /// Changes the password for the logged in user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryUpdateCurrentUsersPasswordHeaders> UpdateCurrentUsersPasswordAsync(this IUsersDirectory operations, ChangePasswordRequest body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateCurrentUsersPasswordWithHttpMessagesAsync(body, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// UsersDirectory_UpdateCurrentUsersEmailOrPhone
            /// </summary>
            /// <remarks>
            /// change and validate phone or email. The type parameter can be email or
            /// phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object UpdateCurrentUsersEmailOrPhone(this IUsersDirectory operations, string type, ChangeAddressRequest body = default, string authToken = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.UpdateCurrentUsersEmailOrPhoneAsync(type, body, authToken, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_UpdateCurrentUsersEmailOrPhone
            /// </summary>
            /// <remarks>
            /// change and validate phone or email. The type parameter can be email or
            /// phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCurrentUsersEmailOrPhoneAsync(this IUsersDirectory operations, string type, ChangeAddressRequest body = default, string authToken = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateCurrentUsersEmailOrPhoneWithHttpMessagesAsync(type, body, authToken, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_ActivateUserAccount
            /// </summary>
            /// <remarks>
            /// Activates a user by providing the activation token obtained in
            /// 'me/exchange/otp'
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryActivateUserAccountHeaders ActivateUserAccount(this IUsersDirectory operations, ActivationRequest body = default, string authToken = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.ActivateUserAccountAsync(body, authToken, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_ActivateUserAccount
            /// </summary>
            /// <remarks>
            /// Activates a user by providing the activation token obtained in
            /// 'me/exchange/otp'
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryActivateUserAccountHeaders> ActivateUserAccountAsync(this IUsersDirectory operations, ActivationRequest body = default, string authToken = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ActivateUserAccountWithHttpMessagesAsync(body, authToken, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// UsersDirectory_GetPendingUserActivation
            /// </summary>
            /// <remarks>
            /// Get the data currently registered on the new user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetPendingUserActivation(this IUsersDirectory operations, string authToken = default, string emailAddress = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetPendingUserActivationAsync(authToken, emailAddress, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetPendingUserActivation
            /// </summary>
            /// <remarks>
            /// Get the data currently registered on the new user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPendingUserActivationAsync(this IUsersDirectory operations, string authToken = default, string emailAddress = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetPendingUserActivationWithHttpMessagesAsync(authToken, emailAddress, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_ExchangeOtpCode
            /// </summary>
            /// <remarks>
            /// Exchange the otp code with an activation token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='otpAuthCode'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object ExchangeOtpCode(this IUsersDirectory operations, string otpAuthCode = default, string emailAddress = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.ExchangeOtpCodeAsync(otpAuthCode, emailAddress, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_ExchangeOtpCode
            /// </summary>
            /// <remarks>
            /// Exchange the otp code with an activation token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='otpAuthCode'>
            /// </param>
            /// <param name='emailAddress'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExchangeOtpCodeAsync(this IUsersDirectory operations, string otpAuthCode = default, string emailAddress = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ExchangeOtpCodeWithHttpMessagesAsync(otpAuthCode, emailAddress, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UsersDirectory_ValidateEmailOrPhone
            /// </summary>
            /// <remarks>
            /// Verify that the user is the rightfull owner of the email/phone. The type
            /// parameter can be email or phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryValidateEmailOrPhoneHeaders ValidateEmailOrPhone(this IUsersDirectory operations, string type, ConfirmationRequest body = default, string authToken = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.ValidateEmailOrPhoneAsync(type, body, authToken, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_ValidateEmailOrPhone
            /// </summary>
            /// <remarks>
            /// Verify that the user is the rightfull owner of the email/phone. The type
            /// parameter can be email or phone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='authToken'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryValidateEmailOrPhoneHeaders> ValidateEmailOrPhoneAsync(this IUsersDirectory operations, string type, ConfirmationRequest body = default, string authToken = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.ValidateEmailOrPhoneWithHttpMessagesAsync(type, body, authToken, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// UsersDirectory_AcceptTerms
            /// </summary>
            /// <remarks>
            /// Accept the service and platform terms on behalf of the logged in user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryAcceptTermsHeaders AcceptTerms(this IUsersDirectory operations, AcceptPlatformTermsRequest body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.AcceptTermsAsync(body, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_AcceptTerms
            /// </summary>
            /// <remarks>
            /// Accept the service and platform terms on behalf of the logged in user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryAcceptTermsHeaders> AcceptTermsAsync(this IUsersDirectory operations, AcceptPlatformTermsRequest body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.AcceptTermsWithHttpMessagesAsync(body, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// UsersDirectory_UpdateUserEmail
            /// </summary>
            /// <remarks>
            /// Change email address for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static UsersDirectoryUpdateUserEmailHeaders UpdateUserEmail(this IUsersDirectory operations, string userId, ChangeAddressRequest body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.UpdateUserEmailAsync(userId, body, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_UpdateUserEmail
            /// </summary>
            /// <remarks>
            /// Change email address for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsersDirectoryUpdateUserEmailHeaders> UpdateUserEmailAsync(this IUsersDirectory operations, string userId, ChangeAddressRequest body = default, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.UpdateUserEmailWithHttpMessagesAsync(userId, body, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// UsersDirectory_GetUserResyncData
            /// </summary>
            /// <remarks>
            /// Change email address for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            public static object GetUserResyncData(this IUsersDirectory operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default)
            {
                return operations.GetUserResyncDataAsync(userId, xSupportCode, ocpApimSubscriptionKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// UsersDirectory_GetUserResyncData
            /// </summary>
            /// <remarks>
            /// Change email address for a user
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='xSupportCode'>
            /// Provide a correlation token for log lookup. This is optional.
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// Veracity api management subscription key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUserResyncDataAsync(this IUsersDirectory operations, string userId, string xSupportCode = default, string ocpApimSubscriptionKey = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserResyncDataWithHttpMessagesAsync(userId, xSupportCode, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

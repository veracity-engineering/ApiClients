// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    public partial class ColumnDto
    {
        /// <summary>
        /// Initializes a new instance of the ColumnDto class.
        /// </summary>
        public ColumnDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ColumnDto class.
        /// </summary>
        /// <param name="type">Possible values include: 'String', 'Boolean',
        /// 'Int32', 'Decimal', 'DateOnly', 'DateTime', 'Uri', 'Int64',
        /// 'Float', 'Guid'</param>
        /// <param name="filterType">Possible values include: 'List', 'From',
        /// 'To', 'Equals', 'Greater', 'GreaterOrEqual', 'Less', 'LessOrEqual',
        /// 'NonFromList', 'StringContains'</param>
        public ColumnDto(string name = default, string displayName = default, ColumnTypes? type = default, string description = default, bool? isFilterable = default, FilterType? filterType = default, IEnumerable<FilterType?> filterTypes = default, string format = default, bool isSortable = default, int order = default)
        {
            Name = name;
            DisplayName = displayName;
            Type = type;
            Description = description;
            IsFilterable = isFilterable;
            FilterType = filterType;
            FilterTypes = filterTypes;
            Format = format;
            IsSortable = isSortable;
            Order = order;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'String', 'Boolean', 'Int32',
        /// 'Decimal', 'DateOnly', 'DateTime', 'Uri', 'Int64', 'Float', 'Guid'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ColumnTypes? Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFilterable")]
        public bool? IsFilterable { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'List', 'From', 'To',
        /// 'Equals', 'Greater', 'GreaterOrEqual', 'Less', 'LessOrEqual',
        /// 'NonFromList', 'StringContains'
        /// </summary>
        [JsonProperty(PropertyName = "filterType")]
        public FilterType? FilterType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filterTypes")]
        public IEnumerable<FilterType?> FilterTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        public string Format { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSortable")]
        public bool IsSortable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "order")]
        public int Order { get; set; }

    }
}

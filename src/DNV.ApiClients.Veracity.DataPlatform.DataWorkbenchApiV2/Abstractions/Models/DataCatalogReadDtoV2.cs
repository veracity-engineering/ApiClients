// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    public partial class DataCatalogReadDtoV2
    {
        /// <summary>
        /// Initializes a new instance of the DataCatalogReadDtoV2 class.
        /// </summary>
        public DataCatalogReadDtoV2()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataCatalogReadDtoV2 class.
        /// </summary>
        public DataCatalogReadDtoV2(System.Guid id = default, string name = default, string description = default, System.Guid workspaceId = default, System.Guid connectionId = default, System.Guid createdBy = default, System.DateTime createdOn = default, System.Guid lastModifiedBy = default, System.DateTime lastModifiedOn = default, SchemaInfoDto schemaInfo = default, IEnumerable<QueryFilter> queries = default, IEnumerable<string> columns = default, bool isBaseDataset = default, IDictionary<string, IEnumerable<string>> tags = default)
        {
            Id = id;
            Name = name;
            Description = description;
            WorkspaceId = workspaceId;
            ConnectionId = connectionId;
            CreatedBy = createdBy;
            CreatedOn = createdOn;
            LastModifiedBy = lastModifiedBy;
            LastModifiedOn = lastModifiedOn;
            SchemaInfo = schemaInfo;
            Queries = queries;
            Columns = columns;
            IsBaseDataset = isBaseDataset;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "workspaceId")]
        public System.Guid WorkspaceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectionId")]
        public System.Guid ConnectionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public System.Guid CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdOn")]
        public System.DateTime CreatedOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedBy")]
        public System.Guid LastModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedOn")]
        public System.DateTime LastModifiedOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schemaInfo")]
        public SchemaInfoDto SchemaInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "queries")]
        public IEnumerable<QueryFilter> Queries { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "columns")]
        public IEnumerable<string> Columns { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isBaseDataset")]
        public bool IsBaseDataset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, IEnumerable<string>> Tags { get; set; }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for DataFormat.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DataFormat
    {
        [EnumMember(Value = "String")]
        String,
        [EnumMember(Value = "Boolean")]
        Boolean,
        [EnumMember(Value = "Int32")]
        Int32,
        [EnumMember(Value = "Int64")]
        Int64,
        [EnumMember(Value = "Float")]
        Float,
        [EnumMember(Value = "Double")]
        Double,
        [EnumMember(Value = "DateTime")]
        DateTime,
        [EnumMember(Value = "DateOnly")]
        DateOnly,
        [EnumMember(Value = "TimeOnly")]
        TimeOnly
    }
    internal static class DataFormatEnumExtension
    {
        internal static string ToSerializedValue(this DataFormat? value)
        {
            return value == null ? null : ((DataFormat)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this DataFormat value)
        {
            switch( value )
            {
                case DataFormat.String:
                    return "String";
                case DataFormat.Boolean:
                    return "Boolean";
                case DataFormat.Int32:
                    return "Int32";
                case DataFormat.Int64:
                    return "Int64";
                case DataFormat.Float:
                    return "Float";
                case DataFormat.Double:
                    return "Double";
                case DataFormat.DateTime:
                    return "DateTime";
                case DataFormat.DateOnly:
                    return "DateOnly";
                case DataFormat.TimeOnly:
                    return "TimeOnly";
            }
            return null;
        }

        internal static DataFormat? ParseDataFormat(this string value)
        {
            switch( value )
            {
                case "String":
                    return DataFormat.String;
                case "Boolean":
                    return DataFormat.Boolean;
                case "Int32":
                    return DataFormat.Int32;
                case "Int64":
                    return DataFormat.Int64;
                case "Float":
                    return DataFormat.Float;
                case "Double":
                    return DataFormat.Double;
                case "DateTime":
                    return DataFormat.DateTime;
                case "DateOnly":
                    return DataFormat.DateOnly;
                case "TimeOnly":
                    return DataFormat.TimeOnly;
            }
            return null;
        }
    }
}

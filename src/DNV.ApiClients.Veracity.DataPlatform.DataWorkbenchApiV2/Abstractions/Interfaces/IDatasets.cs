// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Datasets operations.
    /// </summary>
    public partial interface IDatasets
    {
        /// <summary>
        /// Download Statement of Compliance PDF file based on workspaceId,
        /// datasetId and documentId
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> SocDownloadWithHttpMessagesAsync(DocumentRefDTO body, System.Guid workspaceId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Statement of Compliance PDF file based on workspaceId,
        /// datasetId and documentId
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task SocDownloadAsync(DocumentRefDTO body, System.Guid workspaceId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all data sets for a specific workspace. Supports pagination,
        /// enhanced filtering and sorting.
        /// </summary>
        /// <remarks>
        /// Sample request:
        ///
        /// {
        /// "isBaseDataset": false,
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "sortColumn": "IMO",
        /// "sortDirection": "Ascending",
        /// "datasetName": "Share test (3)",
        /// "tags": { "t1": ["v1"] },
        /// "createdAfter": "2020-01-28T08:55:05.975Z",
        /// "createdBefore": "2025-04-28T08:55:05.975Z",
        /// "schemaId": "07961ff0-5bbd-4ef1-8ea3-7b5d9907ee62"    // Get
        /// datasets belongs to all schema versions of the given schema
        /// }
        ///
        /// Sample response:
        ///
        /// {
        /// "result": [
        /// {
        /// "id": "0d8ac9e1-a3ce-4a43-aa6f-12a02192dbe0",
        /// "name": "Share test (3)",
        /// "description": "Share desc",
        /// "workspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "connectionId": "41f00188-407e-4efa-a546-a13b47ff6717",
        /// "createdBy": "36f17b7f-3829-4e61-8106-d9047bd04dc4",
        /// "createdOn": "2025-04-21T01:42:22.5358667Z",
        /// "lastModifiedBy": "36f17b7f-3829-4e61-8106-d9047bd04dc4",
        /// "lastModifiedOn": "2025-04-21T01:42:22.535868Z",
        /// "schemaInfo": {
        /// "schemaVersionId": "a4276640-ab83-4ebd-a745-67bef52ac34a",
        /// "schemaName": "Monthly emissions summary V1"
        /// },
        /// "queries": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "0001016",
        /// "1111111"
        /// ]
        /// }
        /// ],
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "isBaseDataset": false,
        /// "tags": {
        /// "t1": [
        /// "v1",
        /// "v2"
        /// ]
        /// },
        /// "sharedBy": {
        /// "id": "258f29e2-769e-4841-b08c-fff3026c2f93",
        /// "sharedByType": "Workspace",
        /// "name": "BoolTenant, WS_Bool"
        /// }
        /// }
        /// ],
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "totalCount": 1,
        /// "totalPages": 1
        /// }
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<DataCatalogReadDtoV2PaginatedResult>> GetDataCatalogsQueryWithHttpMessagesAsync(System.Guid workspaceId, DataCatalogQueryDto body = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all data sets for a specific workspace. Supports pagination,
        /// enhanced filtering and sorting.
        /// </summary>
        /// <remarks>
        /// Sample request:
        ///
        /// {
        /// "isBaseDataset": false,
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "sortColumn": "IMO",
        /// "sortDirection": "Ascending",
        /// "datasetName": "Share test (3)",
        /// "tags": { "t1": ["v1"] },
        /// "createdAfter": "2020-01-28T08:55:05.975Z",
        /// "createdBefore": "2025-04-28T08:55:05.975Z",
        /// "schemaId": "07961ff0-5bbd-4ef1-8ea3-7b5d9907ee62"    // Get
        /// datasets belongs to all schema versions of the given schema
        /// }
        ///
        /// Sample response:
        ///
        /// {
        /// "result": [
        /// {
        /// "id": "0d8ac9e1-a3ce-4a43-aa6f-12a02192dbe0",
        /// "name": "Share test (3)",
        /// "description": "Share desc",
        /// "workspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "connectionId": "41f00188-407e-4efa-a546-a13b47ff6717",
        /// "createdBy": "36f17b7f-3829-4e61-8106-d9047bd04dc4",
        /// "createdOn": "2025-04-21T01:42:22.5358667Z",
        /// "lastModifiedBy": "36f17b7f-3829-4e61-8106-d9047bd04dc4",
        /// "lastModifiedOn": "2025-04-21T01:42:22.535868Z",
        /// "schemaInfo": {
        /// "schemaVersionId": "a4276640-ab83-4ebd-a745-67bef52ac34a",
        /// "schemaName": "Monthly emissions summary V1"
        /// },
        /// "queries": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "0001016",
        /// "1111111"
        /// ]
        /// }
        /// ],
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "isBaseDataset": false,
        /// "tags": {
        /// "t1": [
        /// "v1",
        /// "v2"
        /// ]
        /// },
        /// "sharedBy": {
        /// "id": "258f29e2-769e-4841-b08c-fff3026c2f93",
        /// "sharedByType": "Workspace",
        /// "name": "BoolTenant, WS_Bool"
        /// }
        /// }
        /// ],
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "totalCount": 1,
        /// "totalPages": 1
        /// }
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DataCatalogReadDtoV2PaginatedResult> GetDataCatalogsQueryAsync(System.Guid workspaceId, DataCatalogQueryDto body = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific data set by Workspace Id and DataSet Id
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<DataCatalogReadDtoV2>> GetDataCatalogByIdV2WithHttpMessagesAsync(System.Guid workspaceId, System.Guid datasetId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific data set by Workspace Id and DataSet Id
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DataCatalogReadDtoV2> GetDataCatalogByIdV2Async(System.Guid workspaceId, System.Guid datasetId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific dataset by Workspace Id and DataSet Id
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> DeleteDatasetWithHttpMessagesAsync(System.Guid workspaceId, System.Guid datasetId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific dataset by Workspace Id and DataSet Id
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DeleteDatasetAsync(System.Guid workspaceId, System.Guid datasetId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets Dataset Ledger based on workspaceId and datasetId
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='pageIndex'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<LedgerDtoPaginatedResult>> GetDataCatalogLedgerWithHttpMessagesAsync(System.Guid workspaceId, System.Guid datasetId, int? pageSize = default, int? pageIndex = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets Dataset Ledger based on workspaceId and datasetId
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='pageIndex'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LedgerDtoPaginatedResult> GetDataCatalogLedgerAsync(System.Guid workspaceId, System.Guid datasetId, int? pageSize = default, int? pageIndex = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Query for data by Workspace Id and DataSet Id with optional filters
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<QueryData>> QueryDataSetWithHttpMessagesAsync(System.Guid workspaceId, System.Guid datasetId, QuerySpecificationV2 body = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Query for data by Workspace Id and DataSet Id with optional filters
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<QueryData> QueryDataSetAsync(System.Guid workspaceId, System.Guid datasetId, QuerySpecificationV2 body = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a readonly SAS token for a given workspace dataset
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='durationInMinutes'>
        /// </param>
        /// <param name='type'>
        /// Possible values include: 'dfs', 'blob'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<string>> GetDatasetFolderReadonlyTokenWithHttpMessagesAsync(System.Guid workspaceId, System.Guid datasetId, int durationInMinutes, string type, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a readonly SAS token for a given workspace dataset
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='durationInMinutes'>
        /// </param>
        /// <param name='type'>
        /// Possible values include: 'dfs', 'blob'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<string> GetDatasetFolderReadonlyTokenAsync(System.Guid workspaceId, System.Guid datasetId, int durationInMinutes, string type, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke multiple SAS policies for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='policiesToRevoke'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> RevokeSasPoliciesForContainerWithHttpMessagesAsync(System.Guid workspaceId, IEnumerable<string> policiesToRevoke, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke multiple SAS policies for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='policiesToRevoke'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task RevokeSasPoliciesForContainerAsync(System.Guid workspaceId, IEnumerable<string> policiesToRevoke, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke all SAS policies for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> RevokeAllSasTokensForContainerWithHttpMessagesAsync(System.Guid workspaceId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke all SAS policies for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task RevokeAllSasTokensForContainerAsync(System.Guid workspaceId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke a SAS token for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='policyName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
        Task<HttpOperationResponse> RevokeSasTokenForContainerWithHttpMessagesAsync(System.Guid workspaceId, string policyName, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke a SAS token for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='policyName'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
        Task RevokeSasTokenForContainerAsync(System.Guid workspaceId, string policyName, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SAS policies for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<SasPolicyReadDTO>>> GetSasPoliciesForContainerWithHttpMessagesAsync(System.Guid workspaceId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get SAS policies for the workspace container
        /// </summary>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<SasPolicyReadDTO>> GetSasPoliciesForContainerAsync(System.Guid workspaceId, CancellationToken cancellationToken = default);

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using System.Linq;
using DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2.Interfaces;

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// # What is Data Workbench?
    /// Data Workbench allows you to:
    /// * Get access to external data from different sources, f.ex. emission
    /// data, that can be used in your applications.
    /// * Securely share your data and use data shared by others.
    /// * Monitor who uses your data, limit how long it is available, and
    /// revoke access to it.
    /// * Build dashboards and reports on top of the data.
    /// * Work with scalable data streams and self-defined non-time-series data
    /// streams.
    ///
    /// For details, see [Data Workbench on
    /// Marketplace](https://store.veracity.com/b692-2dd3fb6b0225-workbench).
    ///
    /// ## Tenants and workspaces
    /// Each company or a B2C customer has one tenant in Data Workbench. A
    /// tenant can have multiple workspaces. Each workspace has members.
    /// Workspace members can be admins or readers.
    ///
    /// ## Data sets
    /// To see data sets available in your workspace, go to the **Data
    /// Catalogue** tab.
    ///
    /// The **Predefined data sets** tab shows data sets that are queried by
    /// connections from their corresponding source systems. These data sets
    /// are inherited, and you cannot modify them. However, you can use them to
    /// create new data sets.
    ///
    /// The **Created data sets** tab shows the data sets that workspace
    /// members created.
    ///
    /// Each data set has:
    /// * Title and description.
    /// * Column picker – show or hide table columns.
    /// * Filters - filter data.
    /// * Save option – save your changes.
    /// * Share option – share a data set with a user, and set for how long you
    /// grant them access.
    ///
    /// To see data sets you can use, go to [My
    /// data](https://data.veracity.com/containers).
    /// To see how to manage your data on Data Fabric, go
    /// [here](https://help-center.veracity.com/en/collections/2429587-managing-your-data-on-data-fabric).
    /// </summary>
    public partial class DataWorkbenchApiV2Client : ServiceClient<DataWorkbenchApiV2Client>, IDataWorkbenchApiV2Client
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the ITenants.
        /// </summary>
        public virtual ITenants Tenants { get; private set; }

        /// <summary>
        /// Gets the IAnalysis.
        /// </summary>
        public virtual IAnalysis Analysis { get; private set; }

        /// <summary>
        /// Gets the IDataOrders.
        /// </summary>
        public virtual IDataOrders DataOrders { get; private set; }

        /// <summary>
        /// Gets the IDatasets.
        /// </summary>
        public virtual IDatasets Datasets { get; private set; }

        /// <summary>
        /// Gets the IIngest.
        /// </summary>
        public virtual IIngest Ingest { get; private set; }

        /// <summary>
        /// Gets the ILedger.
        /// </summary>
        public virtual ILedger Ledger { get; private set; }

        /// <summary>
        /// Gets the ISchemas.
        /// </summary>
        public virtual ISchemas Schemas { get; private set; }

        /// <summary>
        /// Gets the IStorages.
        /// </summary>
        public virtual IStorages Storages { get; private set; }

        /// <summary>
        /// Gets the IShares.
        /// </summary>
        public virtual IShares Shares { get; private set; }

        /// <summary>
        /// Initializes a new instance of the DataWorkbenchApiV2Client class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        public DataWorkbenchApiV2Client(HttpClient httpClient) : base(httpClient, true)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DataWorkbenchApiV2Client class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DataWorkbenchApiV2Client.Dispose(). False: will not dispose provided httpClient</param>
        public DataWorkbenchApiV2Client(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DataWorkbenchApiV2Client class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public DataWorkbenchApiV2Client(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DataWorkbenchApiV2Client class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public DataWorkbenchApiV2Client(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DataWorkbenchApiV2Client class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DataWorkbenchApiV2Client(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DataWorkbenchApiV2Client class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DataWorkbenchApiV2Client(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Tenants = new Tenants(this);
            Analysis = new Analysis(this);
            DataOrders = new DataOrders(this);
            Datasets = new Datasets(this);
            Ingest = new Ingest(this);
            Ledger = new Ledger(this);
            Schemas = new Schemas(this);
            Storages = new Storages(this);
            Shares = new Shares(this);
            BaseUri = new System.Uri("https://localhost:7135/gateway/api/v2");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;
using System.IO;
using Microsoft.Rest;
using DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2.Interfaces;

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Ingest operations.
    /// </summary>
    public partial class Ingest : IServiceOperations<DataWorkbenchApiV2Client>, IIngest
    {
        /// <summary>
        /// Initializes a new instance of the Ingest class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public Ingest(DataWorkbenchApiV2Client client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            Client = client;
        }

        /// <summary>
        /// Gets a reference to the DataWorkbenchApiV2Client
        /// </summary>
        public DataWorkbenchApiV2Client Client { get; private set; }

        /// <summary>
        /// Get data ingest endpoint for current workspace
        /// </summary>
        /// <remarks>
        /// Sample request
        ///
        /// dfs:
        /// POST {workspaceId}/Ingest?type=dfs
        /// POST
        /// {workspaceId}/Ingest?datasetId=be072260-78d9-4e14-ac16-942284026577&amp;type=dfs
        /// blob:
        /// POST {workspaceId}/Ingest?type=blob
        /// POST
        /// {workspaceId}/Ingest?datasetId=be072260-78d9-4e14-ac16-942284026577&amp;type=blob
        ///
        /// Sample response
        ///
        /// dfs:
        /// https://{domain}.dfs.core.windows.net/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/a16d1d0d-2b92-4e71-b2a1-2931ce61c863/Raw?sv=2023-11-03&amp;spr=https&amp;st=2024-07-12T01%3A55%3A12Z&amp;se=2024-07-12T02%3A10%3A12Z&amp;sr=d&amp;sp=cw&amp;sdd=2&amp;sig=%2BaxD8B250vI0bJn9u8KHRv7duvLjqXlhOfVBOCi5Cqo%3D
        /// blob:
        /// https://{domain}.blob.core.windows.net/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/f5a0ef4c-e76f-4d1c-9b0d-947c8b7923ff/Raw?sv=2023-11-03&amp;spr=https&amp;st=2024-07-12T01%3A56%3A01Z&amp;se=2024-07-12T02%3A11%3A01Z&amp;sr=d&amp;sp=cw&amp;sdd=2&amp;sig=EzfaySpQ5hAN2eLEAPp4vhRIyvMUDikD4iFKDmagpKM%3D
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='type'>
        /// Possible values include: 'dfs', 'blob'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<string>> GenerateByodStorageWithHttpMessagesAsync(System.Guid workspaceId, System.Guid? datasetId = default, string type = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = Client.HttpClient.BaseAddress?.AbsoluteUri ?? Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "workspaces/{workspaceId}/ingest").ToString();
            _url = _url.Replace("{workspaceId}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(workspaceId, Client.SerializationSettings).Trim('"')));
            IList<string> _queryParameters = new List<string>();
            if (datasetId != null)
            {
                _queryParameters.Add(string.Format("datasetId={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(datasetId, Client.SerializationSettings).Trim('"'))));
            }
            if (type != null)
            {
                _queryParameters.Add(string.Format("type={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(type, Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Any())
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<string>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<string>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get data ingest endpoint for current workspace
        /// </summary>
        /// <remarks>
        /// Sample request
        ///
        /// dfs:
        /// POST {workspaceId}/Ingest?type=dfs
        /// POST
        /// {workspaceId}/Ingest?datasetId=be072260-78d9-4e14-ac16-942284026577&amp;type=dfs
        /// blob:
        /// POST {workspaceId}/Ingest?type=blob
        /// POST
        /// {workspaceId}/Ingest?datasetId=be072260-78d9-4e14-ac16-942284026577&amp;type=blob
        ///
        /// Sample response
        ///
        /// dfs:
        /// https://{domain}.dfs.core.windows.net/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/a16d1d0d-2b92-4e71-b2a1-2931ce61c863/Raw?sv=2023-11-03&amp;spr=https&amp;st=2024-07-12T01%3A55%3A12Z&amp;se=2024-07-12T02%3A10%3A12Z&amp;sr=d&amp;sp=cw&amp;sdd=2&amp;sig=%2BaxD8B250vI0bJn9u8KHRv7duvLjqXlhOfVBOCi5Cqo%3D
        /// blob:
        /// https://{domain}.blob.core.windows.net/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/f5a0ef4c-e76f-4d1c-9b0d-947c8b7923ff/Raw?sv=2023-11-03&amp;spr=https&amp;st=2024-07-12T01%3A56%3A01Z&amp;se=2024-07-12T02%3A11%3A01Z&amp;sr=d&amp;sp=cw&amp;sdd=2&amp;sig=EzfaySpQ5hAN2eLEAPp4vhRIyvMUDikD4iFKDmagpKM%3D
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='datasetId'>
        /// </param>
        /// <param name='type'>
        /// Possible values include: 'dfs', 'blob'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<string> GenerateByodStorageAsync(System.Guid workspaceId, System.Guid? datasetId = default, string type = default, CancellationToken cancellationToken = default)
        {
            using (var _result = await GenerateByodStorageWithHttpMessagesAsync(workspaceId, datasetId, type, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Retrieve the content of the BYOD status file
        /// </summary>
        /// <remarks>
        /// Sample Response
        ///
        /// {
        /// "status": "Started",
        /// "correlationId": "203bfa0b-86c3-4467-a3b0-d2eb415a96cc",
        /// "fileName": "TestUpload.csv"
        /// }
        ///
        /// {
        /// "status": "Completed",
        /// "correlationId": "203bfa0b-86c3-4467-a3b0-d2eb415a96cc",
        /// "fileName": "TestUpload.csv",
        /// "dataSetName": "TestUploadLILN"
        /// }
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='requestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<StatusLogModel>> GetStatusLogWithHttpMessagesAsync(System.Guid workspaceId, System.Guid requestId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = Client.HttpClient.BaseAddress?.AbsoluteUri ?? Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "workspaces/{workspaceId}/ingest/{requestId}/status").ToString();
            _url = _url.Replace("{workspaceId}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(workspaceId, Client.SerializationSettings).Trim('"')));
            _url = _url.Replace("{requestId}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(requestId, Client.SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<StatusLogModel>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<StatusLogModel>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Retrieve the content of the BYOD status file
        /// </summary>
        /// <remarks>
        /// Sample Response
        ///
        /// {
        /// "status": "Started",
        /// "correlationId": "203bfa0b-86c3-4467-a3b0-d2eb415a96cc",
        /// "fileName": "TestUpload.csv"
        /// }
        ///
        /// {
        /// "status": "Completed",
        /// "correlationId": "203bfa0b-86c3-4467-a3b0-d2eb415a96cc",
        /// "fileName": "TestUpload.csv",
        /// "dataSetName": "TestUploadLILN"
        /// }
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='requestId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<StatusLogModel> GetStatusLogAsync(System.Guid workspaceId, System.Guid requestId, CancellationToken cancellationToken = default)
        {
            using (var _result = await GetStatusLogWithHttpMessagesAsync(workspaceId, requestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}

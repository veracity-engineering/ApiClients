// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;
using System.IO;
using Microsoft.Rest;
using DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2.Interfaces;

namespace DNV.ApiClients.Veracity.DataPlatform.DataWorkbenchApiV2
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ShareRequests operations.
    /// </summary>
    public partial class ShareRequests : IServiceOperations<DataWorkbenchApiV2Client>, IShareRequests
    {
        /// <summary>
        /// Initializes a new instance of the ShareRequests class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ShareRequests(DataWorkbenchApiV2Client client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            Client = client;
        }

        /// <summary>
        /// Gets a reference to the DataWorkbenchApiV2Client
        /// </summary>
        public DataWorkbenchApiV2Client Client { get; private set; }

        /// <summary>
        /// Create a share request
        /// </summary>
        /// <remarks>
        /// Sample request:
        ///
        /// {
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "notes": "Test notes"
        /// }
        ///
        /// Sample response:
        ///
        /// {
        /// "id": "1a940e6a-2e2e-4cc9-894d-807cb2d90d5f",
        /// "requestorWorkspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "datasetRequestId": "6113fcaa-a29e-4804-b9a9-dac331676ee8",
        /// "schemaId": "28c9e18d-8beb-44a4-92c1-7cea2587977b",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "notes": "Test notes",
        /// "status": "New",
        /// "createdBy": "55da50ee-20af-4bf1-aa7f-b5a64e72f09d",
        /// "createdOn": "2025-02-26T10:13:08.4101697Z"
        /// }
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ShareRequestDto>> CreateShareRequestWithHttpMessagesAsync(ShareRequestCreationDto body, System.Guid workspaceId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            // Construct URL
            var _baseUrl = Client.HttpClient.BaseAddress?.AbsoluteUri ?? Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "workspaces/{workspaceId}/sharerequests").ToString();
            _url = _url.Replace("{workspaceId}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(workspaceId, Client.SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(body, Client.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ShareRequestDto>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 201)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ShareRequestDto>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Create a share request
        /// </summary>
        /// <remarks>
        /// Sample request:
        ///
        /// {
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "notes": "Test notes"
        /// }
        ///
        /// Sample response:
        ///
        /// {
        /// "id": "1a940e6a-2e2e-4cc9-894d-807cb2d90d5f",
        /// "requestorWorkspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "datasetRequestId": "6113fcaa-a29e-4804-b9a9-dac331676ee8",
        /// "schemaId": "28c9e18d-8beb-44a4-92c1-7cea2587977b",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "notes": "Test notes",
        /// "status": "New",
        /// "createdBy": "55da50ee-20af-4bf1-aa7f-b5a64e72f09d",
        /// "createdOn": "2025-02-26T10:13:08.4101697Z"
        /// }
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ShareRequestDto> CreateShareRequestAsync(ShareRequestCreationDto body, System.Guid workspaceId, CancellationToken cancellationToken = default)
        {
            using (var _result = await CreateShareRequestWithHttpMessagesAsync(body, workspaceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Retrieves all share requests requested from the workspace or share requests
        /// requested to the workspace
        /// </summary>
        /// <remarks>
        /// Sample request(following parameters are optional except pageIndex):
        ///
        /// {
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "sortColumn": "Status",
        /// "sortDirection": "Ascending",
        /// "isRequestor": true,
        /// "schemaIds": [
        /// "28c9e18d-8beb-44a4-92c1-7cea2587977b"
        /// ],
        /// "schemaVersionIds": [
        /// "75ef9474-089f-4f77-9bcf-63cf9658387e"
        /// ],
        /// "workspaceIds": [
        /// "a33060fe-de8f-469c-8cb2-864753f46d64"
        /// ],
        /// "statuses": [
        /// "New"
        /// ]
        /// }
        ///
        /// Sample response:
        ///
        /// {
        /// "result": [
        /// {
        /// "id": "1a940e6a-2e2e-4cc9-894d-807cb2d90d5f",
        /// "requestorWorkspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "datasetRequestId": "5faf4e0a-0a12-4eb9-a82f-a71d076ebc33",
        /// "schemaId": "28c9e18d-8beb-44a4-92c1-7cea2587977b",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "associatedShareId": "6f9d46bd-76b4-4b79-95fa-a2c5abd2bec7",
        /// "notes": "Test notes",
        /// "status": "New",
        /// "createdBy": "55da50ee-20af-4bf1-aa7f-b5a64e72f09d",
        /// "createdOn": "2025-02-26T10:13:08.4101697Z"
        /// }
        /// ],
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "totalCount": 1,
        /// "totalPages": 1
        /// }
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// Id of workspace(It can be a requestor workspace or a receiver workspace
        /// based on 'IsRequestor' query parameter)
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ShareRequestDtoPaginatedResult>> QueryShareRequestsWithHttpMessagesAsync(QueryShareRequestDto body, System.Guid workspaceId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "body");
            }
            // Construct URL
            var _baseUrl = Client.HttpClient.BaseAddress?.AbsoluteUri ?? Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "workspaces/{workspaceId}/sharerequests/query").ToString();
            _url = _url.Replace("{workspaceId}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(workspaceId, Client.SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(body, Client.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ShareRequestDtoPaginatedResult>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ShareRequestDtoPaginatedResult>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Retrieves all share requests requested from the workspace or share requests
        /// requested to the workspace
        /// </summary>
        /// <remarks>
        /// Sample request(following parameters are optional except pageIndex):
        ///
        /// {
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "sortColumn": "Status",
        /// "sortDirection": "Ascending",
        /// "isRequestor": true,
        /// "schemaIds": [
        /// "28c9e18d-8beb-44a4-92c1-7cea2587977b"
        /// ],
        /// "schemaVersionIds": [
        /// "75ef9474-089f-4f77-9bcf-63cf9658387e"
        /// ],
        /// "workspaceIds": [
        /// "a33060fe-de8f-469c-8cb2-864753f46d64"
        /// ],
        /// "statuses": [
        /// "New"
        /// ]
        /// }
        ///
        /// Sample response:
        ///
        /// {
        /// "result": [
        /// {
        /// "id": "1a940e6a-2e2e-4cc9-894d-807cb2d90d5f",
        /// "requestorWorkspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "datasetRequestId": "5faf4e0a-0a12-4eb9-a82f-a71d076ebc33",
        /// "schemaId": "28c9e18d-8beb-44a4-92c1-7cea2587977b",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "associatedShareId": "6f9d46bd-76b4-4b79-95fa-a2c5abd2bec7",
        /// "notes": "Test notes",
        /// "status": "New",
        /// "createdBy": "55da50ee-20af-4bf1-aa7f-b5a64e72f09d",
        /// "createdOn": "2025-02-26T10:13:08.4101697Z"
        /// }
        /// ],
        /// "pageIndex": 1,
        /// "pageSize": 10,
        /// "totalCount": 1,
        /// "totalPages": 1
        /// }
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='workspaceId'>
        /// Id of workspace(It can be a requestor workspace or a receiver workspace
        /// based on 'IsRequestor' query parameter)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ShareRequestDtoPaginatedResult> QueryShareRequestsAsync(QueryShareRequestDto body, System.Guid workspaceId, CancellationToken cancellationToken = default)
        {
            using (var _result = await QueryShareRequestsWithHttpMessagesAsync(body, workspaceId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get share request
        /// </summary>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/v2/{workspaceId}/shareRequests/{shareRequestId}
        /// /api/v2/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/shareRequests/348b5dcf-edff-415b-9259-384b20932fc0
        ///
        /// Sample response:
        ///
        /// {
        /// "id": "1a940e6a-2e2e-4cc9-894d-807cb2d90d5f",
        /// "requestorWorkspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "datasetRequestId": "6113fcaa-a29e-4804-b9a9-dac331676ee8",
        /// "schemaId": "28c9e18d-8beb-44a4-92c1-7cea2587977b",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "associatedShareId": "4c46787e-946a-4265-9574-aaa1a1e4d2f0",
        /// "notes": "Test notes",
        /// "status": "New",
        /// "createdBy": "55da50ee-20af-4bf1-aa7f-b5a64e72f09d",
        /// "createdOn": "2025-02-26T10:13:08.4101697Z"
        /// }
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='shareRequestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<ShareRequestDto>> GetShareRequestWithHttpMessagesAsync(System.Guid workspaceId, System.Guid shareRequestId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default)
        {
            // Construct URL
            var _baseUrl = Client.HttpClient.BaseAddress?.AbsoluteUri ?? Client.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "workspaces/{workspaceId}/sharerequests/{shareRequestId}").ToString();
            _url = _url.Replace("{workspaceId}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(workspaceId, Client.SerializationSettings).Trim('"')));
            _url = _url.Replace("{shareRequestId}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(shareRequestId, Client.SerializationSettings).Trim('"')));
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<ShareRequestDto>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ShareRequestDto>(_responseContent, Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            return _result;
        }
        /// <summary>
        /// Get share request
        /// </summary>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/v2/{workspaceId}/shareRequests/{shareRequestId}
        /// /api/v2/196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86/shareRequests/348b5dcf-edff-415b-9259-384b20932fc0
        ///
        /// Sample response:
        ///
        /// {
        /// "id": "1a940e6a-2e2e-4cc9-894d-807cb2d90d5f",
        /// "requestorWorkspaceId": "196a8ff4-dfbc-4ee7-ae08-4f38b84d9c86",
        /// "receiverWorkspaceId": "a33060fe-de8f-469c-8cb2-864753f46d64",
        /// "datasetRequestId": "6113fcaa-a29e-4804-b9a9-dac331676ee8",
        /// "schemaId": "28c9e18d-8beb-44a4-92c1-7cea2587977b",
        /// "schemaVersionId": "75ef9474-089f-4f77-9bcf-63cf9658387e",
        /// "columns": [
        /// "IMO",
        /// "Vessel_Name"
        /// ],
        /// "queryFilters": [
        /// {
        /// "column": "IMO",
        /// "filterType": "List",
        /// "filterValues": [
        /// "9226425",
        /// "9626053"
        /// ]
        /// }
        /// ],
        /// "associatedShareId": "4c46787e-946a-4265-9574-aaa1a1e4d2f0",
        /// "notes": "Test notes",
        /// "status": "New",
        /// "createdBy": "55da50ee-20af-4bf1-aa7f-b5a64e72f09d",
        /// "createdOn": "2025-02-26T10:13:08.4101697Z"
        /// }
        /// </remarks>
        /// <param name='workspaceId'>
        /// </param>
        /// <param name='shareRequestId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ShareRequestDto> GetShareRequestAsync(System.Guid workspaceId, System.Guid shareRequestId, CancellationToken cancellationToken = default)
        {
            using (var _result = await GetShareRequestWithHttpMessagesAsync(workspaceId, shareRequestId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}

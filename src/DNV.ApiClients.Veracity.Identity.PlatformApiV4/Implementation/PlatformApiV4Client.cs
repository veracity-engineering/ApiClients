// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using System.Linq;
using DNV.ApiClients.Veracity.Identity.PlatformApiV4.Interfaces;

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// This document outlines the capabilities of the **Veracity Platform API
    /// V4**. This powerful, RESTful API provides a comprehensive suite of
    /// tools for managing resources within the Veracity ecosystem. It allows
    /// developers to programmatically interact with core Veracity concepts
    /// such as **Tenants**, **Applications**, **Users**, and **Groups**.
    ///
    /// The API is structured around a clear and logical resource hierarchy,
    /// making it intuitive to use. A key feature is the extensive use of OData
    /// query options, allowing for powerful filtering, searching, and
    /// pagination of results, which is essential for managing large sets of
    /// data efficiently.
    ///
    /// ## Key Concepts
    ///
    /// * **Tenants**: A tenant represents a customer or an organization within
    /// Veracity. It is the top-level container for users, groups, and
    /// application subscriptions.
    /// * **Applications**: These are the services or tools that are installed
    /// within a tenant. The API provides endpoints to manage application
    /// subscriptions, licenses, and administrators.
    /// * **Users**: These are the individual accounts within a tenant that can
    /// be granted access to applications and resources.
    /// * **Groups**: Groups are collections of users, used to simplify access
    /// management. Assigning a license or a permission to a group grants it to
    /// all members of that group.
    /// * **Application Elements**: A flexible feature that allows applications
    /// to create and manage their own hierarchical data structures (elements)
    /// within a tenant, complete with their own access control.
    ///
    /// ## Understanding Identifiers in the Veracity Platform API
    ///
    /// The Veracity API uses several types of identifiers (IDs) to reference
    /// resources. Understanding the scope and context of each ID is crucial
    /// for using the API correctly.
    ///
    /// | Identifier | Scope | Description | Example Usage |
    /// | :--- | :--- | :--- | :--- |
    /// | `tenantId` | Tenant | A unique identifier for a tenant, which
    /// represents a customer or organization. | `GET /tenants/{tenantId}` |
    /// | `applicationId` | Global | A unique identifier for an application,
    /// corresponding to the **Service ID** in the developer portal. This ID is
    /// the same across all tenants. | `GET
    /// /applications/{applicationId}/manifest` |
    /// | `applicationInstanceId` | Tenant-Specific | A unique identifier for a
    /// specific *installation* or *subscription* of an application within a
    /// tenant. | Returned in the body of `GET
    /// /tenants/{tenantId}/applications/{applicationId}` |
    /// | `profileId` | Tenant-Specific | A unique identifier for a user
    /// account *within a specific tenant*. | `GET
    /// /tenants/{tenantId}/users/{userId}` |
    /// | `userId` | Global | A globally unique identifier (GUID) for a user's
    /// core identity across the entire Veracity platform, independent of any
    /// tenant. | Returned in the body of `GET
    /// /tenants/{tenantId}/users/{userId}` |
    /// | `groupId` | Tenant-Specific | A unique identifier for a group of
    /// users *within a specific tenant*. | `GET
    /// /tenants/{tenantId}/groups/{groupId}` |
    /// | `elementId` | Veracity assigned | A unique identifier for an
    /// Application Element, which is a custom resource created and managed by
    /// an application. | `GET
    /// /tenants/{tenantId}/applications/{applicationId}/elements/{elementId}`
    /// |
    /// | `elementExternalId` | Application assigned | A unique identifier for
    /// an Application Element, which allows you to create a connection between
    /// an element and a resource in your application. | `GET
    /// /tenants/{tenantId}/applications/{applicationId}/elements/{elementId}`
    /// |
    /// | `entityId` | Polymorphic | A placeholder for an ID that can be either
    /// a `userId` or a `groupId`. The context is determined by the
    /// `licenseType` or `memberType` query parameter. | `DELETE
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}?licenseType=profile`
    /// |
    /// | `objectId` | Polymorphic | A generic identifier returned in response
    /// bodies. It typically represents a `userId` for users or a `groupId` for
    /// groups, depending on the context of the license or membership. |
    /// Returned in the body of `GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses` |
    ///
    /// ## Core Functionalities
    ///
    /// ### Tenants
    ///
    /// The API provides endpoints to manage and query tenant information.
    ///
    /// * **Get Tenant Information**: Retrieve detailed information about a
    /// specific tenant using its ID.
    /// * **List Tenants for an Application**: Find all tenants where a
    /// specific application is installed.
    /// * **Manage Tenant Administrators**: List administrators for a tenant
    /// and get details about a specific administrator's roles.
    /// * **List Users and Groups**: Get a combined list of all users and
    /// groups within a specific tenant.
    /// * **Update Tenant Properties**: Modify custom extension properties
    /// associated with a tenant.
    ///
    /// ### Applications
    ///
    /// Endpoints for managing application subscriptions and access within a
    /// tenant.
    ///
    /// * **List and Get Applications**: Retrieve a list of all applications
    /// installed in a tenant or get details for a single application.
    /// * **Manage Licenses**:
    /// * List all licenses (both user and group) for an application.
    /// * Add or remove user/group licenses.
    /// * Verify if a specific user has a license.
    /// * Update license details, including custom extension properties.
    /// * Set specific access levels for a subscription.
    /// * **Manage Administrators**:
    /// * List all administrators for an application.
    /// * Add or remove a user as an application administrator.
    /// * **List All Users**: Get a comprehensive list of all users with access
    /// to an application, including those with inherited access from groups.
    /// * **Application Manifest**: Retrieve the application's manifest, which
    /// contains settings and configurations defined in the developer portal.
    ///
    /// ### Users
    ///
    /// A set of endpoints for user management and querying user-related
    /// information.
    ///
    /// * **List and Get Users**: List all users within a tenant or retrieve
    /// detailed information for a specific user by their ID or email address.
    /// * **Resolve Multiple Users**: Fetch detailed information for a list of
    /// user IDs in a single request.
    /// * **Manage User Properties**: Update custom extension properties for a
    /// user.
    /// * **User's Groups**:
    /// * List the groups a user is a direct member of.
    /// * List all groups a user belongs to, including through nested group
    /// memberships.
    /// * **User's Applications**: Get a list of all applications a user has
    /// access to within a specific tenant.
    /// * **User's Tenants**: Retrieve a list of all tenants a user is a member
    /// of.
    ///
    /// ### Groups
    ///
    /// Functionality for managing user groups and their memberships.
    ///
    /// * **List and Get Groups**: List all groups within a tenant or get
    /// detailed information for a specific group.
    /// * **Manage Group Members**:
    /// * List all direct members (users and other groups) of a group.
    /// * Get a "flat" list of all users in a group, including members of any
    /// nested groups.
    /// * Check if a specific user is a member of a group (directly or
    /// indirectly).
    /// * **Manage Group Properties**: Update custom extension properties for a
    /// group or for a specific membership.
    /// * **Group's Applications**: List all applications for which a group has
    /// a license.
    ///
    /// ### Me (Current User)
    ///
    /// These endpoints provide a convenient way for the authenticated user to
    /// query their own permissions and resources without needing to know their
    /// own user ID.
    ///
    /// * **Get My Information**: Retrieve details for the currently logged-in
    /// user.
    /// * **Get My Applications**: List all applications the user has access to
    /// across all their tenants or within a specific tenant.
    /// * **Get My Tenants**: List all tenants the user is a member of.
    /// * **Get My Groups**: List all groups the user is a member of within a
    /// specific tenant.
    /// * **Verify Policies**: An endpoint to ensure the user has accepted all
    /// required Veracity policies for a given application.
    ///
    /// ### Application Elements
    ///
    /// This advanced feature allows applications to define and manage their
    /// own resources within the Veracity platform.
    ///
    /// * **Create and Manage Elements**: Create, retrieve, update (patch), and
    /// delete hierarchical application elements.
    /// * **Manage Element Rights**:
    /// * Assign and manage access rights for users and groups to specific
    /// elements.
    /// * Control access levels for fine-grained permission models.
    /// * **Query User Access**:
    /// * Get a tree view of all elements a user has access to.
    /// * Check the effective rights a specific user has on a particular
    /// element.
    ///
    /// &gt; Service build version __BUILD_NUMBER__ - Environment: Test
    /// </summary>
    public partial class PlatformApiV4Client : ServiceClient<PlatformApiV4Client>, IPlatformApiV4Client
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the IApplications.
        /// </summary>
        public virtual IApplications Applications { get; private set; }

        /// <summary>
        /// Gets the IElements.
        /// </summary>
        public virtual IElements Elements { get; private set; }

        /// <summary>
        /// Gets the IGroups.
        /// </summary>
        public virtual IGroups Groups { get; private set; }

        /// <summary>
        /// Gets the IMe.
        /// </summary>
        public virtual IMe Me { get; private set; }

        /// <summary>
        /// Gets the IStatusService.
        /// </summary>
        public virtual IStatusService StatusService { get; private set; }

        /// <summary>
        /// Gets the ITenants.
        /// </summary>
        public virtual ITenants Tenants { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Initializes a new instance of the PlatformApiV4Client class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        public PlatformApiV4Client(HttpClient httpClient) : base(httpClient, true)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PlatformApiV4Client class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling PlatformApiV4Client.Dispose(). False: will not dispose provided httpClient</param>
        public PlatformApiV4Client(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PlatformApiV4Client class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PlatformApiV4Client(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PlatformApiV4Client class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PlatformApiV4Client(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PlatformApiV4Client class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PlatformApiV4Client(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PlatformApiV4Client class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PlatformApiV4Client(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Applications = new Applications(this);
            Elements = new Elements(this);
            Groups = new Groups(this);
            Me = new Me(this);
            StatusService = new StatusService(this);
            Tenants = new Tenants(this);
            Users = new Users(this);
            BaseUri = new System.Uri("https://api-v4-ica5dyfal6qp2-test.azurewebsites.net");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Users operations.
    /// </summary>
    public partial interface IUsers
    {
        /// <summary>
        /// Resolve user in a tenant by email
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Retrieves a user by their email address&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='email'>
        /// The email address of the user
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<UserDetailsResponse>> GetUserByEmailWithHttpMessagesAsync(string tenantId, string email, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Resolve user in a tenant by email
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Retrieves a user by their email address&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='email'>
        /// The email address of the user
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<UserDetailsResponse> GetUserByEmailAsync(string tenantId, string email, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user in a tenant
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get user by id&lt;br/&gt;
        /// </remarks>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<GlobalUserDetailsResponse>> GetUserWithHttpMessagesAsync(System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user in a tenant
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get user by id&lt;br/&gt;
        /// </remarks>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<GlobalUserDetailsResponse> GetUserAsync(System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List user in a tenant
        ///
        ///
        /// </summary>
        /// <remarks>
        /// List users in a tenan
        ///
        /// Filterable fields: name, email, isServicePrincipal, state
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/users?$filter=name eq
        /// 'Normann, Ola'&amp;$top=1&amp;$skip=0&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedUserResponse>> ListUsersWithHttpMessagesAsync(string tenantId, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// List user in a tenant
        ///
        ///
        /// </summary>
        /// <remarks>
        /// List users in a tenan
        ///
        /// Filterable fields: name, email, isServicePrincipal, state
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/users?$filter=name eq
        /// 'Normann, Ola'&amp;$top=1&amp;$skip=0&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<PagedUserResponse> ListUsersAsync(string tenantId, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get multiple users by ids
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get full user details for a list of user ids&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<GlobalUserDetailsResponse>>> ResolveUsersWithHttpMessagesAsync(string tenantId, IEnumerable<System.Guid?> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get multiple users by ids
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get full user details for a list of user ids&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<GlobalUserDetailsResponse>> ResolveUsersAsync(string tenantId, IEnumerable<System.Guid?> body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user by id in a tenant
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get user details&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<UserDetailsResponse>> GetUserInTenantWithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user by id in a tenant
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get user details&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<UserDetailsResponse> GetUserInTenantAsync(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update application properties for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update extension properties  for a user. Extension properties have
        /// the name format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<UserDetailsResponse>> PatchUserWithHttpMessagesAsync(string tenantId, System.Guid userId, IEnumerable<Operation> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update application properties for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update extension properties  for a user. Extension properties have
        /// the name format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<UserDetailsResponse> PatchUserAsync(string tenantId, System.Guid userId, IEnumerable<Operation> body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get direct groups for the user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the direct groups for the user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<GroupResponse>>> GetGroupsForUserWithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get direct groups for the user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the direct groups for the user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<GroupResponse>> GetGroupsForUserAsync(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all groups for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get direct and inherited groups for the user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<GroupResponse>>> GetGroupsForUserExplodedWithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all groups for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get direct and inherited groups for the user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<GroupResponse>> GetGroupsForUserExplodedAsync(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user applications
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all applications in a tenant the user has access to&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<ApplicationLicenseResponse>>> GetApplicationsForUserWithHttpMessagesAsync(string tenantId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get user applications
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all applications in a tenant the user has access to&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<ApplicationLicenseResponse>> GetApplicationsForUserAsync(string tenantId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants the user belongs to
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the tenants a user is member of&lt;br/&gt;
        /// </remarks>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<TenantResponseEx>>> GetTenantsForUserWithHttpMessagesAsync(System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants the user belongs to
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the tenants a user is member of&lt;br/&gt;
        /// </remarks>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<TenantResponseEx>> GetTenantsForUserAsync(System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

    }
}

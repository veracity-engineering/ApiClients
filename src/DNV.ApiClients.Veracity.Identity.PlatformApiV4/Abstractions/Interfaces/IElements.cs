// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Elements operations.
    /// </summary>
    public partial interface IElements
    {
        /// <summary>
        /// Get root level elements
        ///
        ///
        /// </summary>
        /// <remarks>
        /// List all root level elements&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedElementResponse>> ListElementsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get root level elements
        ///
        ///
        /// </summary>
        /// <remarks>
        /// List all root level elements&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<PagedElementResponse> ListElementsAsync(string tenantId, System.Guid applicationId, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// create root element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Create a root level element&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementResponse>> CreateElementWithHttpMessagesAsync(string tenantId, System.Guid applicationId, ElementRequest body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// create root element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Create a root level element&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementResponse> CreateElementAsync(string tenantId, System.Guid applicationId, ElementRequest body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get child elements
        ///
        ///
        /// </summary>
        /// <remarks>
        /// List all child elements&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedElementResponse>> ListChildElementsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get child elements
        ///
        ///
        /// </summary>
        /// <remarks>
        /// List all child elements&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<PagedElementResponse> ListChildElementsAsync(string tenantId, System.Guid applicationId, string elementId, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create child element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Create a child element&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementResponse>> CreateChildElementWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, ElementRequest body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create child element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Create a child element&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementResponse> CreateChildElementAsync(string tenantId, System.Guid applicationId, string elementId, ElementRequest body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the element hierarchy
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the full tree view od the application elements&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<ElementTreeResponse>>> GetElementTreeWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the element hierarchy
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the full tree view od the application elements&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<ElementTreeResponse>> GetElementTreeAsync(string tenantId, System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get an element by the id or external reference&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementResponse>> GetElementWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get an element by the id or external reference&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementResponse> GetElementAsync(string tenantId, System.Guid applicationId, string elementId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update aspects of an element&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementResponse>> PatchElementWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, IEnumerable<Operation> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update aspects of an element&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementResponse> PatchElementAsync(string tenantId, System.Guid applicationId, string elementId, IEnumerable<Operation> body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Delete an element from the application&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteElementWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete element
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Delete an element from the application&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DeleteElementAsync(string tenantId, System.Guid applicationId, string elementId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get direct rights
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the direct element rights&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='memberType'>
        /// the type of member, profile or userGroup. Possible values include:
        /// 'profile', 'userGroup'
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<ElementRightResponse>>> GetElementRightsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, string memberType = default, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get direct rights
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the direct element rights&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='memberType'>
        /// the type of member, profile or userGroup. Possible values include:
        /// 'profile', 'userGroup'
        /// </param>
        /// <param name='odata'>
        /// OData query options, the values are passed as query string
        /// parameters
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<ElementRightResponse>> GetElementRightsAsync(string tenantId, System.Guid applicationId, string elementId, string memberType = default, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add right to a user or group
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Add element right to the user or group.&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementRightResponse>> AddElementRightsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, ElementRightRequest body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add right to a user or group
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Add element right to the user or group.&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementRightResponse> AddElementRightsAsync(string tenantId, System.Guid applicationId, string elementId, ElementRightRequest body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update right for a user or group
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update the element right&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='memberType'>
        /// the type of member, profile or userGroup. Possible values include:
        /// 'profile', 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementRightResponse>> UpdateElementRightsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, string entityId, IEnumerable<Operation> body = default, string memberType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update right for a user or group
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update the element right&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='memberType'>
        /// the type of member, profile or userGroup. Possible values include:
        /// 'profile', 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementRightResponse> UpdateElementRightsAsync(string tenantId, System.Guid applicationId, string elementId, string entityId, IEnumerable<Operation> body = default, string memberType = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a right from a user or group
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Delete element right&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='memberType'>
        /// the type of member, profile or userGroup. Possible values include:
        /// 'profile', 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteElementRightsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, string entityId, string memberType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a right from a user or group
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Delete element right&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='memberType'>
        /// the type of member, profile or userGroup. Possible values include:
        /// 'profile', 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DeleteElementRightsAsync(string tenantId, System.Guid applicationId, string elementId, string entityId, string memberType = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// direct right for an entity
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the direct right for a user or group&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementRightResponse>> GetElementRightWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, System.Guid entityId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// direct right for an entity
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the direct right for a user or group&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementRightResponse> GetElementRightAsync(string tenantId, System.Guid applicationId, string elementId, System.Guid entityId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get rights for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all element rights for a user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<ElementRightTreeResponse>>> GetUserElementsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get rights for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all element rights for a user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<ElementRightTreeResponse>> GetUserElementsAsync(string tenantId, System.Guid applicationId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the effective rights for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the effective rights for a specific element for a
        /// user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementRightResponse>> GetUserElementWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, string elementId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the effective rights for a user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the effective rights for a specific element for a
        /// user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='userId'>
        /// The users id found in Veracity Identity
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementRightResponse> GetUserElementAsync(string tenantId, System.Guid applicationId, System.Guid userId, string elementId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the rights for the logged in user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get element rights for the logged in user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<ElementRightTreeResponse>>> GetCurentUserElementsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the rights for the logged in user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get element rights for the logged in user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<ElementRightTreeResponse>> GetCurentUserElementsAsync(string tenantId, System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the effective rights for the logged in user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the effective rights for a specific element for the logged in
        /// user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ElementRightResponse>> GetCurentUserElementWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string elementId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the effective rights for the logged in user
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get the effective rights for a specific element for the logged in
        /// user&lt;br/&gt;
        /// </remarks>
        /// <param name='tenantId'>
        /// The tenant id (or dnvCustomerId for veracity_default tenants)
        /// </param>
        /// <param name='applicationId'>
        /// The applicationId is the same as serviceId in developer
        /// </param>
        /// <param name='elementId'>
        /// Can be the application internal id or the VTM elementId
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ElementRightResponse> GetCurentUserElementAsync(string tenantId, System.Guid applicationId, string elementId, string requestId = default, CancellationToken cancellationToken = default);

    }
}

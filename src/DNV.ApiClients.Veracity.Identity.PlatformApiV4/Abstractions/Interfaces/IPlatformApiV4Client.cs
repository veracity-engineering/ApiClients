// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Interfaces
{
    using Models;
    using Newtonsoft.Json;

    /// <summary>
    /// ### Documentation and scenarios
    ///
    /// #### Applications
    ///
    /// The `Applications` interface provides methods to interact with
    /// applications within a tenant. It supports retrieving applications,
    /// verifying user licenses, and managing user and group licenses.
    ///
    /// - **GetApplications** (`GET /tenants/{tenantId}/applications`):
    /// Retrieves applications installed in a tenant with support for OData
    /// query parameters.
    /// - **GetApplication** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}`): Retrieves a
    /// specific application by its public ID.
    /// - **GetLicenses** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`): Retrieves
    /// all direct users and groups with licenses for an application.
    /// - **VerifyUserLicense** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{userId}`):
    /// Verifies if a user has a license for an application.
    /// - **GetApplicationUsersExploded** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/users`): Retrieves all
    /// users, including those inherited from groups, with deduplication
    /// support.
    /// - **AddUserOrGroupLicense** (`POST
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`): Adds a
    /// user or group license to an application.
    /// - **SetAccessLevel** (`PUT
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}`):
    /// Sets access level on an existing subscription.
    /// - **UpdateLicense** (`PATCH
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}`):
    /// Updates license details using a JSON patch document.
    /// - **DeleteLicense** (`DELETE
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{entityId}`):
    /// Removes a subscription.
    /// - **GetTenantsForApplication** (`GET
    /// /applications/{applicationId}/tenants`): Retrieves all tenants where
    /// the application is installed.
    /// - **PatchApplication** (`PATCH
    /// /tenants/{tenantId}/applications/{applicationId}`): Updates application
    /// extension properties using a JSON patch document.
    /// - **GetAdministrators** (`GET
    /// /tenants/{tenantId}/applications/{applicationId}/administrators`):
    /// Lists application administrators.
    /// - **AddAdministrator** (`POST
    /// /tenants/{tenantId}/applications/{applicationId}/administrators/{userId}`):
    /// Adds a user as an application administrator.
    /// - **DeleteAdministrator** (`DELETE
    /// /tenants/{tenantId}/applications/{applicationId}/administrators/{userId}`):
    /// Removes an application administrator.
    ///
    /// #### Groups
    ///
    /// The `Groups` interface provides methods to manage groups and their
    /// members within a tenant. It supports retrieving groups, group members,
    /// and updating group properties.
    ///
    /// - **GetGroups** (`GET /tenants/{tenantId}/groups`): Retrieves groups in
    /// a tenant with support for OData query parameters.
    /// - **GetGroup** (`GET /tenants/{tenantId}/groups/{groupId}`): Retrieves
    /// a specific group by its ID.
    /// - **GetGroupMembers** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/members`): Retrieves all direct
    /// users and groups within a group.
    /// - **GetMembersExploded** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/members/exploded`): Retrieves all
    /// users, including those inherited from groups.
    /// - **PatchMember** (`PATCH
    /// /tenants/{tenantId}/groups/{groupId}/members/{memberId}`): Updates
    /// member properties using a JSON patch document.
    /// - **PatchGroup** (`PATCH /tenants/{tenantId}/groups/{groupId}`):
    /// Updates group properties using a JSON patch document.
    /// - **GetMemberOf** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/memberOf`): Lists all groups a
    /// specific group is a member of.
    /// - **GetApplications** (`GET
    /// /tenants/{tenantId}/groups/{groupId}/applications`) Get the
    /// applications licensed for the group
    ///
    /// #### Me
    ///
    /// The `Me` interface provides methods to retrieve information about the
    /// logged-on user, including their applications, groups, and tenants.
    ///
    /// - **GetMyInfo** (`GET /me`): Retrieves details for the logged-on user.
    /// - **GetMyApplications** (`GET /me/applications`): Retrieves all
    /// applications the user has access to.
    /// - **GetMyTenantApplications** (`GET
    /// /me/tenants/{tenantId}/applications`): Retrieves all applications in a
    /// tenant the user has access to.
    /// - **GetMyGroups** (`GET /me/tenants/{tenantId}/groups`): Retrieves the
    /// groups the logged-on user belongs to.
    /// - **GetMyTenants** (`GET /me/tenants`): Retrieves all tenants the
    /// logged-on user is a member of.
    /// - **GetMyTenantsWithApplication** (`GET
    /// /me/applications/{applicationId}/tenants`): Retrieves all tenants the
    /// logged-on user is a member of and has access to a specific application.
    /// - **VerifyUserPolicy** (`GET
    /// /me/applications/{applicationId}/.policy()`): Verifies Veracity user
    /// policies and returns appropriate responses based on policy compliance.
    ///
    /// #### Tenants
    ///
    /// The `Tenants` interface provides methods to interact with tenants,
    /// including retrieving tenant details and managing tenant administrators.
    ///
    /// - **GetTenant** (`GET /tenants/{tenantId}`): Retrieves a tenant by its
    /// ID.
    /// - **GetTenants** (`GET /tenants`): Retrieves a list of tenants linked
    /// to a specific service.
    /// - **GetAdmin** (`GET /tenants/{tenantId}/admins/{userId}`): Retrieves
    /// admin details for a user by their ID.
    /// - **GetAdmins** (`GET /tenants/{tenantId}/admins`): Retrieves all
    /// admins of a tenant, both global and local.
    ///
    /// #### Users
    ///
    ///
    /// The `Users` interface provides methods to manage users within a tenant,
    /// including retrieving user details, groups, and applications.
    ///
    /// - **GetUserByEmail** (`GET /tenants/{tenantId}/users/.email({email})`):
    /// Retrieves a user by their email address.
    /// - **GetUser** (`GET /users/{userId}`): Retrieves a user by their ID.
    /// - **ListUsers** (`GET /tenants/{tenantId}/users`): Retrieves a list of
    /// users in a tenant with support for OData query parameters.
    /// - **GetUserInTenant** (`GET /tenants/{tenantId}/users/{userId}`):
    /// Retrieves the details of a user in a tenant.
    /// - **GetGroupsForUser** (`GET
    /// /tenants/{tenantId}/users/{userId}/groups`): Retrieves the groups
    /// associated with a user.
    /// - **GetApplicationsForUser** (`GET
    /// /tenants/{tenantId}/users/{userId}/applications`): Retrieves the
    /// applications associated with a user.
    /// - **GetTenantsForUser** (`GET /users/{userId}/tenants`): Retrieves the
    /// tenants a user is a member of.
    /// - **ResolveUsers** (`POST /tenants/{tenantId}/users`): Retrieves full
    /// user details for a list of user IDs.
    /// - **UpdateUserProperties** (`PATCH
    /// /tenants/{tenantId}/users/{userId}`): Updates the extension properties
    /// for a user using a JSON patch document.
    ///
    /// ### According JsonPatch
    ///
    /// The api uses jsonPatch to update data within the graph. Common use-case
    /// for updating an entity in the graph is to add/update or remove
    /// extension properties. Here are some sample updates:
    ///
    /// Let's say we start out with this properties collection:
    /// ```JSON
    /// "properties": [
    /// {
    /// "name": "vtmd2_allowedVessels",
    /// "value": ""
    /// }
    /// ]
    /// ```
    ///
    /// Update a user to indicate the vessels the user can see in the app and
    /// mark the new application user as seeb by an admin.
    ///
    /// ```JSON
    /// [
    /// {
    /// "value": {
    /// "Name": "vtmd2_allowedVessels",
    /// "Value": "7911545;7911533"
    /// },
    /// "path": "/properties/-",
    /// "op": "replace"
    /// },
    /// {
    /// "value": {
    /// "Name": "vtmd2_isSeen",
    /// "Value": "true"
    /// },
    /// "path": "/properties/-",
    /// "op": "add"
    /// }
    /// ]
    /// ```
    ///
    /// This result in the following properties:
    /// ```json
    /// "properties": [
    /// {
    /// "name": "vtmd2_allowedVessels",
    /// "value": "7911545;7911533"
    /// },
    /// {
    /// "name": "vtmd2_isSeen",
    /// "value": "true"
    /// }
    /// ]
    /// ```
    ///
    /// Let's say we want remove the allowedVessels list and reset the isSeen
    /// flag. We remove the the  vtmd2_allowedVessels property by it's index
    /// and then do other operations. This is due to the fact that the order of
    /// elements can change when we do other operations, and remove does not
    /// support removing by name.
    ///
    /// The same type of operations can be performed on any entity or
    /// relationship in the graph.
    ///
    /// ```JSON
    /// [
    /// "path": "/properties/0",
    /// "op": "remove"
    /// },
    /// {
    /// "value": {
    /// "Name": "vtmd2_isSeen",
    /// "Value": "false"
    /// },
    /// "path": "/properties/-",
    /// "op": "replace"
    /// }
    /// ]
    /// ```
    ///
    /// This result in the following properties:
    /// ```json
    /// "properties": [
    /// {
    /// "name": "vtmd2_isSeen",
    /// "value": "false"
    /// }
    /// ]
    /// ```
    ///
    /// the nuget packages Veracity provides does have helper methods to
    /// construct these queries and run tem directly against the api.
    ///
    /// ```CS
    /// user.MakeJsonPatch()
    /// .AddOrUpdateProperty("allowedVessels", "7911545;7911533")
    /// .AddOrUpdateProperty("isSeen", "true")
    /// .ExecutePatchUserAsync();
    /// ```
    ///
    /// ### Scenario Usage
    ///
    /// #### common to all
    /// - **Policy**: use `POST /me/applications/{applicationId}/.policy()` to
    /// check that all user policies are fulfilled, usually called right after
    /// the token is aquired
    ///
    /// #### Seating Tracker for Hot Seating Workplaces (simple and
    /// intermediate applications )
    ///
    /// This application type leverages Veracity Access hub to assign license
    /// and roles to the users.
    ///
    /// - **Multi-tenant application**: Use `GET
    /// /me/applications/{applicationId}/tenants` to retrieve tenants the user
    /// has access to and the application is installed in, used to present the
    /// tenant selector screen.
    /// - **Access levels and permissions**: Use `GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`to list all
    /// users and `GET
    /// /tenants/{tenantId}/applications/{applicationId}/licenses/{userId}` to
    /// manage and verify user licenses and the accessLevel.
    ///
    ///
    /// #### Health and Safety Tracker Application (simple authorization model
    /// for most users, but advanced for some)
    ///
    /// This application type leverages Veracity Access Hub to assign the least
    /// privilege to the users, while advanced rights must be granted within
    /// the application's admin module.
    ///
    /// - **Detailed permissions**: Use `GET /tenants/{tenantId}/groups` and
    /// `GET /tenants/{tenantId}/groups/{groupId}/members` to manage
    /// group-based permissions.
    /// - **Local copy for performance**: Use `GET
    /// /tenants/{tenantId}/applications/{applicationId}/users` to retrieve all
    /// users (direct and indirect) and manage local copies for performance.
    ///
    /// #### Applications with no clear least privilege and a complex
    /// authorization model
    ///
    /// This category includes applications with row or entity level security.
    /// The authorization requirements are based on data stored in the
    /// application and that is not know to Veracity Access Hub.
    ///
    /// - **Complex authorization**: Use `GET /tenants/{tenantId}/groups` and
    /// `GET /tenants/{tenantId}/groups/{groupId}/members` to manage
    /// group-based permissions.
    /// - **inform veracity about application license**: Use  `POST
    /// /tenants/{tenantId}/applications/{applicationId}/licenses`this will
    /// show the tile in myServices and make sure that Veracity can count
    /// licenses (and enforce cap if applicable) in the tenant.
    ///
    ///
    /// #### Additional Information
    ///
    /// These interfaces and methods provide a comprehensive way to manage
    /// multi-tenant applications, user permissions, and group memberships,
    /// aligning with the scenarios described.
    ///
    /// All applications can leverage the Veracity domain events to replicate
    /// data locally to improve performance and remove single points of
    /// failure. This is not recommended for simple applications or
    /// applications with limited budgets or developers since the complexity of
    /// nested groups can make it too costly to implement.
    ///
    /// There is a NuGet package available on nuget.org that plugs into the
    /// other packages Veracity provides: Veracity.Core.Api.V4
    ///
    /// &gt; Service build version 20241015.1 - Environment: Test
    /// </summary>
    public partial interface IPlatformApiV4Client : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets the IApplications.
        /// </summary>
        IApplications Applications { get; }

        /// <summary>
        /// Gets the IGroups.
        /// </summary>
        IGroups Groups { get; }

        /// <summary>
        /// Gets the IMe.
        /// </summary>
        IMe Me { get; }

        /// <summary>
        /// Gets the IStatusService.
        /// </summary>
        IStatusService StatusService { get; }

        /// <summary>
        /// Gets the ITenants.
        /// </summary>
        ITenants Tenants { get; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        IUsers Users { get; }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Me operations.
    /// </summary>
    public partial interface IMe
    {
        /// <summary>
        /// Get details for the logged on user&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<UserDetails2Response>> GetMyInfoWithHttpMessagesAsync(string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details for the logged on user&lt;br/&gt;tenantId can be the
        /// guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<UserDetails2Response> GetMyInfoAsync(string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all applications the user has access to&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<ApplicationLicenseResponse>>> GetMyApplicationsWithHttpMessagesAsync(string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all applications the user has access to&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<ApplicationLicenseResponse>> GetMyApplicationsAsync(string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all applications in a tenant the user has access
        /// to&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<ApplicationLicenseResponse>>> GetMyTenantApplicationsWithHttpMessagesAsync(string tenantId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all applications in a tenant the user has access
        /// to&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<ApplicationLicenseResponse>> GetMyTenantApplicationsAsync(string tenantId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the groups the logged on user belongs to&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<GroupResponse>>> GetMyGroupsWithHttpMessagesAsync(string tenantId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the groups the logged on user belongs to&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<GroupResponse>> GetMyGroupsAsync(string tenantId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants the logged on user is a member
        /// of&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<TenantResponseEx>>> GetMyTenantsWithHttpMessagesAsync(string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants the logged on user is a member
        /// of&lt;br/&gt;tenantId can be the guid or the dnvCustomerId for the
        /// tenant
        /// </summary>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<TenantResponseEx>> GetMyTenantsAsync(string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants the logged on user is a member of and has access to
        /// the application&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<TenantResponse>>> GetMyTenantsWithApplicationWithHttpMessagesAsync(System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants the logged on user is a member of and has access to
        /// the application&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<TenantResponse>> GetMyTenantsWithApplicationAsync(System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// ! This endpoint will ensure that federated users are properly
        /// enrolled !
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Verify Veracity user policies, returns an empty 202 response if all
        /// policies are ok, 406 with an error response that contains the url
        /// to send the user to correct the policy issue&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='returnUrl'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> VerifyUserPolicyWithHttpMessagesAsync(System.Guid applicationId, string returnUrl = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// ! This endpoint will ensure that federated users are properly
        /// enrolled !
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Verify Veracity user policies, returns an empty 202 response if all
        /// policies are ok, 406 with an error response that contains the url
        /// to send the user to correct the policy issue&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='returnUrl'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task VerifyUserPolicyAsync(System.Guid applicationId, string returnUrl = default, string requestId = default, CancellationToken cancellationToken = default);

    }
}

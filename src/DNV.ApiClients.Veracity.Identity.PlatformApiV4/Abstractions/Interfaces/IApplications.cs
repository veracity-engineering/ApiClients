// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Applications operations.
    /// </summary>
    public partial interface IApplications
    {
        /// <summary>
        /// Get applications installed in the tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/applications?$filter=serviceId
        /// eq
        /// '88dd8fdc-c6db-49d4-89f5-76bc4e7c8d57'&amp;$top=1&amp;$skip=0&amp;search=Interface&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApplicationResponseModel>> GetApplicationsWithHttpMessagesAsync(string tenantId, IDictionary<string, string> odata = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get applications installed in the tenant
        ///
        /// query sample:
        /// tenants/be0c84cb-7a4a-4114-aa17-9c0224b084cf/applications?$filter=serviceId
        /// eq
        /// '88dd8fdc-c6db-49d4-89f5-76bc4e7c8d57'&amp;$top=1&amp;$skip=0&amp;search=Interface&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='odata'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ApplicationResponseModel> GetApplicationsAsync(string tenantId, IDictionary<string, string> odata = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get application by public id&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApplicationResponse>> GetApplicationWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get application by public id&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ApplicationResponse> GetApplicationAsync(string tenantId, System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update extension properties for a group. Extension properties have
        /// the name format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ApplicationResponse>> PatchApplicationWithHttpMessagesAsync(string tenantId, System.Guid applicationId, IEnumerable<Operation> body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update extension properties for a group. Extension properties have
        /// the name format {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ApplicationResponse> PatchApplicationAsync(string tenantId, System.Guid applicationId, IEnumerable<Operation> body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all direct users and/or groups. LicenseType values - profile:
        /// personal licenses, userGroup: license given to a group or empty
        /// string: get both personal and group licenses&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<LicenseResponse>>> GetLicensesWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all direct users and/or groups. LicenseType values - profile:
        /// personal licenses, userGroup: license given to a group or empty
        /// string: get both personal and group licenses&lt;br/&gt;tenantId can
        /// be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<LicenseResponse>> GetLicensesAsync(string tenantId, System.Guid applicationId, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add user or group license to application&lt;br/&gt;tenantId can be
        /// the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<LicenseResponse>> AddLicenseWithHttpMessagesAsync(string tenantId, System.Guid applicationId, LicenseRequest body = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add user or group license to application&lt;br/&gt;tenantId can be
        /// the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LicenseResponse> AddLicenseAsync(string tenantId, System.Guid applicationId, LicenseRequest body = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify user license&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<LicenseResponse>> VerifyUserLicenseWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify user license&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LicenseResponse> VerifyUserLicenseAsync(string tenantId, System.Guid applicationId, System.Guid userId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// All users, both direct and inherited
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all users including inherited from groups, deduplication is by
        /// default in effect. disable deduplication to detect users with
        /// multiple paths to the application in the tenant.&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='deduplicate'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<UserLicenseResponse>>> GetApplicationUsersExplodedWithHttpMessagesAsync(string tenantId, System.Guid applicationId, bool? deduplicate = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// All users, both direct and inherited
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Get all users including inherited from groups, deduplication is by
        /// default in effect. disable deduplication to detect users with
        /// multiple paths to the application in the tenant.&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='deduplicate'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<UserLicenseResponse>> GetApplicationUsersExplodedAsync(string tenantId, System.Guid applicationId, bool? deduplicate = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Only applicable for applications with access levels
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Set access level on an existing subscription. entityId is the id of
        /// the group or the person, and licenseType (profile,userGroup)
        /// indicates which type of license you are updating&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<LicenseResponse>> SetAccessLevelWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid entityId, string body = default, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Only applicable for applications with access levels
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Set access level on an existing subscription. entityId is the id of
        /// the group or the person, and licenseType (profile,userGroup)
        /// indicates which type of license you are updating&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LicenseResponse> SetAccessLevelAsync(string tenantId, System.Guid applicationId, System.Guid entityId, string body = default, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// You can only update extension properties.
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update license details. Extension properties have the name format
        /// {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com. EntityId is the id of the group or the
        /// person, and entityType (profile,userGroup) indicates which type of
        /// license you are updating&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<LicenseResponse>> UpdateLicenseWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid entityId, IEnumerable<Operation> body = default, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// You can only update extension properties.
        ///
        ///
        /// </summary>
        /// <remarks>
        /// Update license details. Extension properties have the name format
        /// {prefix}_property name. Prefixes are registered in
        /// developer.veracity.com. EntityId is the id of the group or the
        /// person, and entityType (profile,userGroup) indicates which type of
        /// license you are updating&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LicenseResponse> UpdateLicenseAsync(string tenantId, System.Guid applicationId, System.Guid entityId, IEnumerable<Operation> body = default, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove subscription. EntityId is the id of the group or the person,
        /// and licenseType (profile,userGroup) indicates which type of license
        /// you are removing&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteLicenseWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid entityId, string licenseType = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove subscription. EntityId is the id of the group or the person,
        /// and licenseType (profile,userGroup) indicates which type of license
        /// you are removing&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='entityId'>
        /// </param>
        /// <param name='licenseType'>
        /// Represents the type of entity. Possible values include: 'profile',
        /// 'userGroup'
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DeleteLicenseAsync(string tenantId, System.Guid applicationId, System.Guid entityId, string licenseType = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants where application is installed&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<TenantResponse>>> GetTenantsForApplicationWithHttpMessagesAsync(System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all tenants where application is installed&lt;br/&gt;tenantId
        /// can be the guid or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<TenantResponse>> GetTenantsForApplicationAsync(System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List application administrators&lt;br/&gt;tenantId can be the guid
        /// or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<AdminUser>>> GetAdministratorsWithHttpMessagesAsync(string tenantId, System.Guid applicationId, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// List application administrators&lt;br/&gt;tenantId can be the guid
        /// or the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IEnumerable<AdminUser>> GetAdministratorsAsync(string tenantId, System.Guid applicationId, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add user as application administrator, this is only used by hybrid
        /// and service managed applications. If the application has access
        /// levels defined, this must be provided if the user doesn't have a
        /// license from before.&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='accessLevel'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> AddAdministratorWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, string accessLevel = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add user as application administrator, this is only used by hybrid
        /// and service managed applications. If the application has access
        /// levels defined, this must be provided if the user doesn't have a
        /// license from before.&lt;br/&gt;tenantId can be the guid or the
        /// dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='accessLevel'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task AddAdministratorAsync(string tenantId, System.Guid applicationId, System.Guid userId, string accessLevel = default, string requestId = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove application administrator, this is only used by hybrid and
        /// service managed applications&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='removeLicense'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> DeleteAdministratorWithHttpMessagesAsync(string tenantId, System.Guid applicationId, System.Guid userId, bool? removeLicense = default, string requestId = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove application administrator, this is only used by hybrid and
        /// service managed applications&lt;br/&gt;tenantId can be the guid or
        /// the dnvCustomerId for the tenant
        /// </summary>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='userId'>
        /// </param>
        /// <param name='removeLicense'>
        /// </param>
        /// <param name='requestId'>
        /// A correlation token to use when looking in the logs.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DeleteAdministratorAsync(string tenantId, System.Guid applicationId, System.Guid userId, bool? removeLicense = default, string requestId = default, CancellationToken cancellationToken = default);

    }
}

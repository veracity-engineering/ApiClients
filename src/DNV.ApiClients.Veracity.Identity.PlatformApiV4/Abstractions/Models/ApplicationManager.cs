// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Models
{
    using Newtonsoft.Json;
    /// <summary>
    /// Represents a manager of an application.
    /// </summary>
    public partial class ApplicationManager
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationManager class.
        /// </summary>
        public ApplicationManager()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationManager class.
        /// </summary>
        /// <param name="userId">The user id of the manager.</param>
        /// <param name="email">The email of the manager.</param>
        /// <param name="name">the display name of the manager</param>
        /// <param name="isServicePrincipal">true if the manager is a service
        /// principal</param>
        /// <param name="isAdmin">true if the manager is an admin</param>
        /// <param name="canManageUsers">true id the user can manage
        /// application users (human users will only be able to manage users in
        /// the system tenant for legacy applications)</param>
        public ApplicationManager(string userId = default, string email = default, string name = default, bool? isServicePrincipal = default, bool? isAdmin = default, bool? canManageUsers = default)
        {
            UserId = userId;
            Email = email;
            Name = name;
            IsServicePrincipal = isServicePrincipal;
            IsAdmin = isAdmin;
            CanManageUsers = canManageUsers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the user id of the manager.
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets the email of the manager.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the display name of the manager
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets true if the manager is a service principal
        /// </summary>
        [JsonProperty(PropertyName = "isServicePrincipal")]
        public bool? IsServicePrincipal { get; set; }

        /// <summary>
        /// Gets or sets true if the manager is an admin
        /// </summary>
        [JsonProperty(PropertyName = "isAdmin")]
        public bool? IsAdmin { get; set; }

        /// <summary>
        /// Gets or sets true id the user can manage application users (human
        /// users will only be able to manage users in the system tenant for
        /// legacy applications)
        /// </summary>
        [JsonProperty(PropertyName = "canManageUsers")]
        public bool? CanManageUsers { get; set; }

    }
}

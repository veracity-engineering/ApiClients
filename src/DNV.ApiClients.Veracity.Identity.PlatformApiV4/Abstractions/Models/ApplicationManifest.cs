// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    /// <summary>
    /// Retreive the settings for the application
    /// </summary>
    public partial class ApplicationManifest
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationManifest class.
        /// </summary>
        public ApplicationManifest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationManifest class.
        /// </summary>
        /// <param name="name">the application name as defined in
        /// developer.veracity.com</param>
        /// <param name="applicationId">the application id found in
        /// developer.veracity.com</param>
        /// <param name="accessLevels">the application description as defined
        /// in developer.veracity.com</param>
        /// <param name="logoUri">the URI to the application logo</param>
        /// <param name="managers">The users and service principals that are
        /// administrators of the service</param>
        /// <param name="isProduction">true if the application is approved for
        /// production</param>
        /// <param name="propertyPrefix">the prefix reserved for the
        /// application, used to prefix properties in the graph</param>
        public ApplicationManifest(string name = default, string applicationId = default, IEnumerable<string> accessLevels = default, string logoUri = default, IEnumerable<ApplicationManager> managers = default, bool? isProduction = default, string propertyPrefix = default, bool? useApplyForFlow = default, ApplicationSettings settings = default, string applicationUrlTemplate = default)
        {
            Name = name;
            ApplicationId = applicationId;
            AccessLevels = accessLevels;
            LogoUri = logoUri;
            Managers = managers;
            IsProduction = isProduction;
            PropertyPrefix = propertyPrefix;
            UseApplyForFlow = useApplyForFlow;
            Settings = settings;
            ApplicationUrlTemplate = applicationUrlTemplate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the application name as defined in
        /// developer.veracity.com
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the application id found in developer.veracity.com
        /// </summary>
        [JsonProperty(PropertyName = "applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the application description as defined in
        /// developer.veracity.com
        /// </summary>
        [JsonProperty(PropertyName = "accessLevels")]
        public IEnumerable<string> AccessLevels { get; set; }

        /// <summary>
        /// Gets or sets the URI to the application logo
        /// </summary>
        [JsonProperty(PropertyName = "logoUri")]
        public string LogoUri { get; set; }

        /// <summary>
        /// Gets or sets the users and service principals that are
        /// administrators of the service
        /// </summary>
        [JsonProperty(PropertyName = "managers")]
        public IEnumerable<ApplicationManager> Managers { get; set; }

        /// <summary>
        /// Gets or sets true if the application is approved for production
        /// </summary>
        [JsonProperty(PropertyName = "isProduction")]
        public bool? IsProduction { get; set; }

        /// <summary>
        /// Gets or sets the prefix reserved for the application, used to
        /// prefix properties in the graph
        /// </summary>
        [JsonProperty(PropertyName = "propertyPrefix")]
        public string PropertyPrefix { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "useApplyForFlow")]
        public bool? UseApplyForFlow { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public ApplicationSettings Settings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "applicationUrlTemplate")]
        public string ApplicationUrlTemplate { get; set; }

    }
}

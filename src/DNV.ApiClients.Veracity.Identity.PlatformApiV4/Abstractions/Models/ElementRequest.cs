// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using System.Linq;

namespace DNV.ApiClients.Veracity.Identity.PlatformApiV4.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    /// <summary>
    /// Represents a request to create an application element.
    /// </summary>
    public partial class ElementRequest
    {
        /// <summary>
        /// Initializes a new instance of the ElementRequest class.
        /// </summary>
        public ElementRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ElementRequest class.
        /// </summary>
        /// <param name="name">The name of the element. This is used to display
        /// the element in the application and access hub.</param>
        /// <param name="description">Describe the purpose og the
        /// element</param>
        /// <param name="elementExternalId">the application's reference for the
        /// element. This is the same as the element id in the
        /// application.</param>
        /// <param name="elementType">the type of the element, used to describe
        /// the element in the application.</param>
        /// <param name="elementTypeIconUrl">The url element type icon. This is
        /// used to display the element in the application and access
        /// hub.</param>
        /// <param name="capabilities">Additional capabilities enabled for the
        /// application element.</param>
        /// <param name="systemTags">The system tags associated with the
        /// element and assigned by the application itself or Veracity Platform
        /// components. These are used to categorize and filter elements in the
        /// application and access hub.</param>
        /// <param name="properties">The extension properties. Extra
        /// information kept on the object.</param>
        public ElementRequest(string name, string description = default, string elementExternalId = default, string elementType = default, string elementTypeIconUrl = default, IEnumerable<CapabilityRequest> capabilities = default, IEnumerable<string> systemTags = default, IEnumerable<ExtensionProperty> properties = default)
        {
            Description = description;
            ElementExternalId = elementExternalId;
            ElementType = elementType;
            ElementTypeIconUrl = elementTypeIconUrl;
            Capabilities = capabilities;
            Name = name;
            SystemTags = systemTags;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describe the purpose og the element
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the application's reference for the element. This is
        /// the same as the element id in the application.
        /// </summary>
        [JsonProperty(PropertyName = "elementExternalId")]
        public string ElementExternalId { get; set; }

        /// <summary>
        /// Gets or sets the type of the element, used to describe the element
        /// in the application.
        /// </summary>
        [JsonProperty(PropertyName = "elementType")]
        public string ElementType { get; set; }

        /// <summary>
        /// Gets or sets the url element type icon. This is used to display the
        /// element in the application and access hub.
        /// </summary>
        [JsonProperty(PropertyName = "elementTypeIconUrl")]
        public string ElementTypeIconUrl { get; set; }

        /// <summary>
        /// Gets or sets additional capabilities enabled for the application
        /// element.
        /// </summary>
        [JsonProperty(PropertyName = "capabilities")]
        public IEnumerable<CapabilityRequest> Capabilities { get; set; }

        /// <summary>
        /// Gets or sets the name of the element. This is used to display the
        /// element in the application and access hub.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the system tags associated with the element and
        /// assigned by the application itself or Veracity Platform components.
        /// These are used to categorize and filter elements in the application
        /// and access hub.
        /// </summary>
        [JsonProperty(PropertyName = "systemTags")]
        public IEnumerable<string> SystemTags { get; set; }

        /// <summary>
        /// Gets or sets the extension properties. Extra information kept on
        /// the object.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IEnumerable<ExtensionProperty> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}

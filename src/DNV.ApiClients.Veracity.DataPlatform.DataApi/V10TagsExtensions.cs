// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using DNV.ApiClients.Veracity.DataPlatform.DataApi.Interfaces;

namespace DNV.ApiClients.Veracity.DataPlatform.DataApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for V10Tags.
    /// </summary>
    public static partial class V10TagsExtensions
    {
            /// <summary>
            /// Retrieve metadata tags in Veracity.
            /// </summary>
            /// <remarks>
            /// Default returns approved and non deleted tags.
            /// Use Query parameters to includes non approved and deleted (needs to be
            /// DataAdmin to perform this action)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeDeleted'>
            /// </param>
            /// <param name='includeNonVeracityApproved'>
            /// </param>
            public static IEnumerable<Tag> GetTags(this IV10Tags operations, bool? includeDeleted = default, bool? includeNonVeracityApproved = default)
            {
                return operations.GetTagsAsync(includeDeleted, includeNonVeracityApproved).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve metadata tags in Veracity.
            /// </summary>
            /// <remarks>
            /// Default returns approved and non deleted tags.
            /// Use Query parameters to includes non approved and deleted (needs to be
            /// DataAdmin to perform this action)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeDeleted'>
            /// </param>
            /// <param name='includeNonVeracityApproved'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Tag>> GetTagsAsync(this IV10Tags operations, bool? includeDeleted = default, bool? includeNonVeracityApproved = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetTagsWithHttpMessagesAsync(includeDeleted, includeNonVeracityApproved, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Inserts tags and returns the inserted new inserted tags with ID's
            /// &lt;remarks&gt;
            /// Id is not required for the input
            /// &lt;/remarks&gt;
            /// </summary>
            /// <remarks>
            /// Inserts tags and returns the inserted new inserted tags with ID's
            /// &lt;remarks&gt;
            /// Id is not required for the input
            /// &lt;/remarks&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IEnumerable<Tag> InsertTags(this IV10Tags operations, IEnumerable<Tag> body = default)
            {
                return operations.InsertTagsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Inserts tags and returns the inserted new inserted tags with ID's
            /// &lt;remarks&gt;
            /// Id is not required for the input
            /// &lt;/remarks&gt;
            /// </summary>
            /// <remarks>
            /// Inserts tags and returns the inserted new inserted tags with ID's
            /// &lt;remarks&gt;
            /// Id is not required for the input
            /// &lt;/remarks&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Tag>> InsertTagsAsync(this IV10Tags operations, IEnumerable<Tag> body = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.InsertTagsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

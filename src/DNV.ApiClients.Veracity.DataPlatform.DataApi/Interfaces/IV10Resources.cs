// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataApi.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// V10Resources operations.
    /// </summary>
    public partial interface IV10Resources
    {
        /// <summary>
        /// Fetches all storage resources that you can claim keys for
        /// </summary>
        /// <remarks>
        /// Fetches all storage resources that you can claim keys for
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<IEnumerable<Resource>>> GetWithHttpMessagesAsync(Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Returns a single resource
        /// </summary>
        /// <remarks>
        /// Returns a single resource.
        /// </remarks>
        /// <param name='resourceId'>
        /// Format - uuid. Resource Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Resource>> GetByIdWithHttpMessagesAsync(string resourceId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Fetch a SAS key to access a storage item shared with you
        /// Deprecated. Please use PUT
        /// /api/resources/{resourceId}/accesses/{accessId}/key
        /// </summary>
        /// <remarks>
        /// Fetch a SAS key to access a storage item shared with you
        /// Deprecated. Please use PUT
        /// /api/resources/{resourceId}/accesses/{accessId}/key
        /// </remarks>
        /// <param name='resourceId'>
        /// Format - uuid. Storage resource Id
        /// </param>
        /// <param name='accessSharingId'>
        /// Format - uuid. The Id for the key you want to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SASToken>> FetchKeyForStorageContainerWithHttpMessagesAsync(string resourceId, string accessSharingId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);
    }
}

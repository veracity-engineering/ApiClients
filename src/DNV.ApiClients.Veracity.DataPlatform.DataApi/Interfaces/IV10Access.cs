// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataApi.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// V10Access operations.
    /// </summary>
    public partial interface IV10Access
    {
        /// <summary>
        /// Retrieves a list of Providers that have access to a specified
        /// resource.
        /// </summary>
        /// <remarks>
        /// Get a list of all providers with accesses for a given storage item
        /// per page, using a page number and page size.
        /// Note the variable keyCreatedTimeUTC is the time the SAS key
        /// generated is valid from,
        /// this is set one hour in the past from the time created this to
        /// avoid azure time skew issues.
        /// </remarks>
        /// <param name='resourceId'>
        /// Format - uuid. Azure resource
        /// </param>
        /// <param name='pageNo'>
        /// Format - int32. Page number. Defaults to 1.
        /// </param>
        /// <param name='pageSize'>
        /// Format - int32. Number of results per page. Defaults to 50. If this
        /// is a negative number, all results will be fetched
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResultProviderAccessVM>> GetWithHttpMessagesAsync(string resourceId, int? pageNo = default, int? pageSize = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Share access to another user for the specified resource
        /// </summary>
        /// <remarks>
        /// Share access to another user for the specified resource
        /// </remarks>
        /// <param name='resourceId'>
        /// Format - uuid. Azure resource
        /// </param>
        /// <param name='autoRefreshed'>
        /// Should a renewed key be issued to the shared party after it expires
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<ShareResourceVM>> PostWithHttpMessagesAsync(string resourceId, bool autoRefreshed, SharingResourceInputData body = default, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Revoke an users ability to refresh keys on a resource
        /// </summary>
        /// <remarks>
        /// Revoke an users ability to refresh keys on a resource
        /// </remarks>
        /// <param name='resourceId'>
        /// Format - uuid. Azure resource
        /// </param>
        /// <param name='accessId'>
        /// Format - uuid. Access ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse> PutWithHttpMessagesAsync(string resourceId, string accessId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);
        /// <summary>
        /// Fetch a SAS key to access the storage item shared with you
        /// </summary>
        /// <remarks>
        /// Fetch a SAS key to access the storage item shared with you
        /// </remarks>
        /// <param name='resourceId'>
        /// Format - uuid. Resource Id
        /// </param>
        /// <param name='accessId'>
        /// Format - uuid. Access Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SASToken>> ClaimKeyWithHttpMessagesAsync(string resourceId, string accessId, Dictionary<string, IList<string>> customHeaders = null, CancellationToken cancellationToken = default);
    }
}

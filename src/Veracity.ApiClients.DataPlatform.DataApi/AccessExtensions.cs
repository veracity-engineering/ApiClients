// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracity.ApiClients.DataPlatform.DataApi
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Access.
    /// </summary>
    public static partial class AccessExtensions
    {
            /// <summary>
            /// Retrieves a list of Providers that have access to a specified resource.
            /// </summary>
            /// <remarks>
            /// Get a list of all providers with accesses for a given storage item per
            /// page, using a page number and page size.
            /// Note the variable keyCreatedTimeUTC is the time the SAS key generated is
            /// valid from,
            /// this is set one hour in the past from the time created this to avoid azure
            /// time skew issues.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Azure resource
            /// </param>
            /// <param name='pageNo'>
            /// Format - int32. Page number. Defaults to 1.
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32. Number of results per page. Defaults to 50. If this is a
            /// negative number, all results will be fetched
            /// </param>
            public static PagedResultProviderAccessVM Get(this IAccess operations, string resourceId, int? pageNo = default(int?), int? pageSize = default(int?))
            {
                return operations.GetAsync(resourceId, pageNo, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a list of Providers that have access to a specified resource.
            /// </summary>
            /// <remarks>
            /// Get a list of all providers with accesses for a given storage item per
            /// page, using a page number and page size.
            /// Note the variable keyCreatedTimeUTC is the time the SAS key generated is
            /// valid from,
            /// this is set one hour in the past from the time created this to avoid azure
            /// time skew issues.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Azure resource
            /// </param>
            /// <param name='pageNo'>
            /// Format - int32. Page number. Defaults to 1.
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32. Number of results per page. Defaults to 50. If this is a
            /// negative number, all results will be fetched
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultProviderAccessVM> GetAsync(this IAccess operations, string resourceId, int? pageNo = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceId, pageNo, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Share access to another user for the specified resource
            /// </summary>
            /// <remarks>
            /// Share access to another user for the specified resource
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Azure resource
            /// </param>
            /// <param name='autoRefreshed'>
            /// Should a renewed key be issued to the shared party after it expires
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ShareResourceVM Post(this IAccess operations, string resourceId, bool autoRefreshed, SharingResourceInputData body = default(SharingResourceInputData))
            {
                return operations.PostAsync(resourceId, autoRefreshed, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Share access to another user for the specified resource
            /// </summary>
            /// <remarks>
            /// Share access to another user for the specified resource
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Azure resource
            /// </param>
            /// <param name='autoRefreshed'>
            /// Should a renewed key be issued to the shared party after it expires
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShareResourceVM> PostAsync(this IAccess operations, string resourceId, bool autoRefreshed, SharingResourceInputData body = default(SharingResourceInputData), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(resourceId, autoRefreshed, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revoke an users ability to refresh keys on a resource
            /// </summary>
            /// <remarks>
            /// Revoke an users ability to refresh keys on a resource
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Azure resource
            /// </param>
            /// <param name='accessId'>
            /// Format - uuid. Access ID
            /// </param>
            public static void Put(this IAccess operations, string resourceId, string accessId)
            {
                operations.PutAsync(resourceId, accessId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke an users ability to refresh keys on a resource
            /// </summary>
            /// <remarks>
            /// Revoke an users ability to refresh keys on a resource
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Azure resource
            /// </param>
            /// <param name='accessId'>
            /// Format - uuid. Access ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync(this IAccess operations, string resourceId, string accessId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutWithHttpMessagesAsync(resourceId, accessId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Fetch a SAS key to access the storage item shared with you
            /// </summary>
            /// <remarks>
            /// Fetch a SAS key to access the storage item shared with you
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Resource Id
            /// </param>
            /// <param name='accessId'>
            /// Format - uuid. Access Id
            /// </param>
            public static SASToken ClaimKey(this IAccess operations, string resourceId, string accessId)
            {
                return operations.ClaimKeyAsync(resourceId, accessId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch a SAS key to access the storage item shared with you
            /// </summary>
            /// <remarks>
            /// Fetch a SAS key to access the storage item shared with you
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// Format - uuid. Resource Id
            /// </param>
            /// <param name='accessId'>
            /// Format - uuid. Access Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SASToken> ClaimKeyAsync(this IAccess operations, string resourceId, string accessId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClaimKeyWithHttpMessagesAsync(resourceId, accessId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

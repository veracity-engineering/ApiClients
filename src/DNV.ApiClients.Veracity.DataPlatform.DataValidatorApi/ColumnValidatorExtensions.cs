// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataValidatorApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ColumnValidator.
    /// </summary>
    public static partial class ColumnValidatorExtensions
    {
            /// <summary>
            /// Lists all pre-defined column validators
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ColumnValidatorReadDTO> GetList(this IColumnValidator operations)
            {
                return operations.GetListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all pre-defined column validators
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ColumnValidatorReadDTO>> GetListAsync(this IColumnValidator operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ColumnValidatorReadDTO Add(this IColumnValidator operations, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO))
            {
                return operations.AddAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ColumnValidatorReadDTO> AddAsync(this IColumnValidator operations, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// column validator Id
            /// </param>
            public static ColumnValidatorReadDTO Get(this IColumnValidator operations, int id)
            {
                return operations.GetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// column validator Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ColumnValidatorReadDTO> GetAsync(this IColumnValidator operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ColumnValidatorReadDTO Update(this IColumnValidator operations, int id, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO))
            {
                return operations.UpdateAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ColumnValidatorReadDTO> UpdateAsync(this IColumnValidator operations, int id, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// column validator Id
            /// </param>
            public static void Remove(this IColumnValidator operations, int id)
            {
                operations.RemoveAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a pre-defined column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// column validator Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this IColumnValidator operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all column validators by workspace Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='includesPredefined'>
            /// includes predefine validators in the response
            /// </param>
            public static IList<ColumnValidatorReadDTO> GetColumnValidatorList(this IColumnValidator operations, System.Guid id, bool? includesPredefined = false)
            {
                return operations.GetColumnValidatorListAsync(id, includesPredefined).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all column validators by workspace Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='includesPredefined'>
            /// includes predefine validators in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ColumnValidatorReadDTO>> GetColumnValidatorListAsync(this IColumnValidator operations, System.Guid id, bool? includesPredefined = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetColumnValidatorListWithHttpMessagesAsync(id, includesPredefined, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a column validator to a workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ColumnValidatorReadDTO AddColumnValidator(this IColumnValidator operations, System.Guid id, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO))
            {
                return operations.AddColumnValidatorAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a column validator to a workspace
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ColumnValidatorReadDTO> AddColumnValidatorAsync(this IColumnValidator operations, System.Guid id, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddColumnValidatorWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='validatorId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ColumnValidatorReadDTO UpdateColumnValidator(this IColumnValidator operations, System.Guid id, int validatorId, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO))
            {
                return operations.UpdateColumnValidatorAsync(id, validatorId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='validatorId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ColumnValidatorReadDTO> UpdateColumnValidatorAsync(this IColumnValidator operations, System.Guid id, int validatorId, ColumnValidatorWriteDTO body = default(ColumnValidatorWriteDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateColumnValidatorWithHttpMessagesAsync(id, validatorId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='validatorId'>
            /// </param>
            public static void RemoveColumnValidator(this IColumnValidator operations, System.Guid id, int validatorId)
            {
                operations.RemoveColumnValidatorAsync(id, validatorId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='validatorId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveColumnValidatorAsync(this IColumnValidator operations, System.Guid id, int validatorId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveColumnValidatorWithHttpMessagesAsync(id, validatorId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='validatorId'>
            /// </param>
            public static ColumnValidatorReadDTO GetColumnValidator(this IColumnValidator operations, System.Guid id, int validatorId)
            {
                return operations.GetColumnValidatorAsync(id, validatorId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a column validator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='validatorId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ColumnValidatorReadDTO> GetColumnValidatorAsync(this IColumnValidator operations, System.Guid id, int validatorId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetColumnValidatorWithHttpMessagesAsync(id, validatorId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataValidatorApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for User.
    /// </summary>
    public static partial class UserExtensions
    {
            /// <summary>
            /// List all workspace members
            /// </summary>
            /// <remarks>
            /// List all workspace members
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            public static IList<WorkspaceUserReadDTO> GetUserList(this IUser operations, string id)
            {
                return operations.GetUserListAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all workspace members
            /// </summary>
            /// <remarks>
            /// List all workspace members
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WorkspaceUserReadDTO>> GetUserListAsync(this IUser operations, string id, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.GetUserListWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a user to a workspace
            /// </summary>
            /// <remarks>
            /// Add a user to a workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WorkspaceUserReadDTO AddUser(this IUser operations, string id, WorkspaceUserWriteDTO body = default)
            {
                return operations.AddUserAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a user to a workspace
            /// </summary>
            /// <remarks>
            /// Add a user to a workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceUserReadDTO> AddUserAsync(this IUser operations, string id, WorkspaceUserWriteDTO body = default, CancellationToken cancellationToken = default)
            {
                using (var _result = await operations.AddUserWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change the role of a workspace member
            /// </summary>
            /// <remarks>
            /// Change the role of a workspace member
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UpdateUser(this IUser operations, string id, WorkspaceUserWriteDTO body = default)
            {
                operations.UpdateUserAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change the role of a workspace member
            /// </summary>
            /// <remarks>
            /// Change the role of a workspace member
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUserAsync(this IUser operations, string id, WorkspaceUserWriteDTO body = default, CancellationToken cancellationToken = default)
            {
                (await operations.UpdateUserWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove a member from a workspace
            /// </summary>
            /// <remarks>
            /// Remove a member from a workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            /// <param name='userId'>
            /// Format - uuid.
            /// </param>
            public static void RemoveUser(this IUser operations, string id, string userId)
            {
                operations.RemoveUserAsync(id, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a member from a workspace
            /// </summary>
            /// <remarks>
            /// Remove a member from a workspace
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Format - uuid.
            /// </param>
            /// <param name='userId'>
            /// Format - uuid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserAsync(this IUser operations, string id, string userId, CancellationToken cancellationToken = default)
            {
                (await operations.RemoveUserWithHttpMessagesAsync(id, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}

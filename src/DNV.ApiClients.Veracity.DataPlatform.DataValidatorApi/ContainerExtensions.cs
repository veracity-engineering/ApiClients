// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DNV.ApiClients.Veracity.DataPlatform.DataValidatorApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Container.
    /// </summary>
    public static partial class ContainerExtensions
    {
            /// <summary>
            /// Get a list of container sets
            /// </summary>
            /// <remarks>
            /// Default behavior: Name expanded
            /// Other fields are optionally expandable.
            /// To serve the front-end, they will also need an option to provide/expand:
            /// - the name/shortname of the schema that the schema version belongs to
            /// - the id of the schema the version belongs to
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<ContainerSetReadDTO> GetContainerList(this IContainer operations, System.Guid id)
            {
                return operations.GetContainerListAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of container sets
            /// </summary>
            /// <remarks>
            /// Default behavior: Name expanded
            /// Other fields are optionally expandable.
            /// To serve the front-end, they will also need an option to provide/expand:
            /// - the name/shortname of the schema that the schema version belongs to
            /// - the id of the schema the version belongs to
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ContainerSetReadDTO>> GetContainerListAsync(this IContainer operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContainerListWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new container
            /// </summary>
            /// <remarks>
            /// Required user input is:
            /// - Container Name
            /// - Processing region instance
            /// - Schema ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ContainerSetReadDTO AddContainer(this IContainer operations, System.Guid id, ContainerSetWriteDTO body = default(ContainerSetWriteDTO))
            {
                return operations.AddContainerAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new container
            /// </summary>
            /// <remarks>
            /// Required user input is:
            /// - Container Name
            /// - Processing region instance
            /// - Schema ID
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContainerSetReadDTO> AddContainerAsync(this IContainer operations, System.Guid id, ContainerSetWriteDTO body = default(ContainerSetWriteDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddContainerWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets container details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='containerId'>
            /// </param>
            public static ContainerSetReadDTO GetContainer(this IContainer operations, System.Guid id, System.Guid containerId)
            {
                return operations.GetContainerAsync(id, containerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets container details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='containerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContainerSetReadDTO> GetContainerAsync(this IContainer operations, System.Guid id, System.Guid containerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContainerWithHttpMessagesAsync(id, containerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='containerId'>
            /// </param>
            public static void Remove(this IContainer operations, System.Guid id, System.Guid containerId)
            {
                operations.RemoveAsync(id, containerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// workspace Id
            /// </param>
            /// <param name='containerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this IContainer operations, System.Guid id, System.Guid containerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(id, containerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}

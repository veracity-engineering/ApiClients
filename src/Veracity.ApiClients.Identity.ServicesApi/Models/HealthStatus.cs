// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Veracity.ApiClients.Identity.ServicesApi.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class HealthStatus
    {
        /// <summary>
        /// Initializes a new instance of the HealthStatus class.
        /// </summary>
        public HealthStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HealthStatus class.
        /// </summary>
        /// <param name="status"> status: (required) indicates whether the
        /// service status is acceptable
        /// or not.API publishers SHOULD use following values for the field:
        ///
        ///
        /// o  "pass": healthy (acceptable aliases: "ok" to support Node's
        ///
        /// Terminus and "up" for Java's SpringBoot),
        ///
        ///
        /// o  "fail": unhealthy (acceptable aliases: "error" to support Node's
        ///
        /// Terminus and "down" for Java's SpringBoot), and
        ///
        ///
        /// o  "warn": healthy, with some concerns.
        ///
        /// The value of the status field is case-insensitive and is tightly
        /// related with the HTTP response code returned by the health
        /// endpoint.
        ///
        /// For "pass" status, HTTP response code in the 2xx-3xx range MUST be
        ///
        /// used.For "fail" status, HTTP response code in the 4xx-5xx range
        ///
        /// MUST be used.In case of the "warn" status, endpoints MUST return
        ///
        /// HTTP status in the 2xx-3xx range, and additional information SHOULD
        ///
        /// be provided, utilizing optional fields of the response.
        ///
        ///
        /// A health endpoint is only meaningful in the context of the
        /// component
        /// it indicates the health of.  It has no other meaning or purpose.As
        /// such, its health is a conduit to the health of the component.
        ///
        /// Clients SHOULD assume that the HTTP response code returned by the
        /// health endpoint is applicable to the entire component (e.g.a larger
        ///
        /// API or a microservice).  This is compatible with the behavior that
        /// current infrastructural tooling expects: load-balancers, service
        /// discoveries and others, utilizing health-checks. Possible values
        /// include: 'pass', 'warn', 'fail'</param>
        /// <param name="checks">List of dependencies probed. Like database
        /// connections and such</param>
        /// <param name="serviceId">serviceId: (required) identifies the
        /// service. Use ids like: identityApi, V3 or any other commonly used
        /// names for the service in question.</param>
        /// <param name="releaseId"> releaseId: (optional) in well-designed
        /// APIs, backwards-compatible
        /// changes in the service should not update a version number.APIs
        ///
        /// usually change their version number as infrequently as possible, to
        /// preserve stable interface.  However, implementation of an API may
        /// change much more frequently, which leads to the importance of
        /// having
        /// separate "release number" or "releaseId" that is different from the
        /// public version of the API.</param>
        /// <param name="version">version: (optional) public version of the
        /// service.</param>
        /// <param name="description"> description (optional) is a
        /// human-friendly description of the
        /// service.</param>
        /// <param name="notes">notes: (optional) array of notes relevant to
        /// current state of health</param>
        /// <param name="output">output: (optional) raw error output, in case
        /// of "fail" or "warn"
        /// states.This field SHOULD be omitted for "pass" state.</param>
        public HealthStatus(HealthStateTypes status, int subCode, IList<DependencyState> checks = default(IList<DependencyState>), string serviceId = default(string), string releaseId = default(string), string version = default(string), string description = default(string), IList<string> notes = default(IList<string>), string output = default(string), string message = default(string), string information = default(string), string supportCode = default(string))
        {
            Checks = checks;
            Status = status;
            ServiceId = serviceId;
            ReleaseId = releaseId;
            Version = version;
            Description = description;
            Notes = notes;
            Output = output;
            Message = message;
            Information = information;
            SubCode = subCode;
            SupportCode = supportCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of dependencies probed. Like database connections
        /// and such
        /// </summary>
        [JsonProperty(PropertyName = "checks")]
        public IList<DependencyState> Checks { get; set; }

        /// <summary>
        /// Gets or sets  status: (required) indicates whether the service
        /// status is acceptable
        /// or not.API publishers SHOULD use following values for the field:
        ///
        ///
        /// o  "pass": healthy (acceptable aliases: "ok" to support Node's
        ///
        /// Terminus and "up" for Java's SpringBoot),
        ///
        ///
        /// o  "fail": unhealthy (acceptable aliases: "error" to support Node's
        ///
        /// Terminus and "down" for Java's SpringBoot), and
        ///
        ///
        /// o  "warn": healthy, with some concerns.
        ///
        /// The value of the status field is case-insensitive and is tightly
        /// related with the HTTP response code returned by the health
        /// endpoint.
        ///
        /// For "pass" status, HTTP response code in the 2xx-3xx range MUST be
        ///
        /// used.For "fail" status, HTTP response code in the 4xx-5xx range
        ///
        /// MUST be used.In case of the "warn" status, endpoints MUST return
        ///
        /// HTTP status in the 2xx-3xx range, and additional information SHOULD
        ///
        /// be provided, utilizing optional fields of the response.
        ///
        ///
        /// A health endpoint is only meaningful in the context of the
        /// component
        /// it indicates the health of.  It has no other meaning or purpose.As
        /// such, its health is a conduit to the health of the component.
        ///
        /// Clients SHOULD assume that the HTTP response code returned by the
        /// health endpoint is applicable to the entire component (e.g.a larger
        ///
        /// API or a microservice).  This is compatible with the behavior that
        /// current infrastructural tooling expects: load-balancers, service
        /// discoveries and others, utilizing health-checks. Possible values
        /// include: 'pass', 'warn', 'fail'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public HealthStateTypes Status { get; set; }

        /// <summary>
        /// Gets or sets serviceId: (required) identifies the service. Use ids
        /// like: identityApi, V3 or any other commonly used names for the
        /// service in question.
        /// </summary>
        [JsonProperty(PropertyName = "serviceId")]
        public string ServiceId { get; set; }

        /// <summary>
        /// Gets or sets  releaseId: (optional) in well-designed APIs,
        /// backwards-compatible
        /// changes in the service should not update a version number.APIs
        ///
        /// usually change their version number as infrequently as possible, to
        /// preserve stable interface.  However, implementation of an API may
        /// change much more frequently, which leads to the importance of
        /// having
        /// separate "release number" or "releaseId" that is different from the
        /// public version of the API.
        /// </summary>
        [JsonProperty(PropertyName = "releaseId")]
        public string ReleaseId { get; set; }

        /// <summary>
        /// Gets or sets version: (optional) public version of the service.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets  description (optional) is a human-friendly
        /// description of the
        /// service.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets notes: (optional) array of notes relevant to current
        /// state of health
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public IList<string> Notes { get; set; }

        /// <summary>
        /// Gets or sets output: (optional) raw error output, in case of "fail"
        /// or "warn"
        /// states.This field SHOULD be omitted for "pass" state.
        /// </summary>
        [JsonProperty(PropertyName = "output")]
        public string Output { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "information")]
        public string Information { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subCode")]
        public int SubCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "supportCode")]
        public string SupportCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Checks != null)
            {
                foreach (var element in Checks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
